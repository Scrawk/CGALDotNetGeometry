<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CGALDotNetGeometry</name>
    </assembly>
    <members>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.op_Addition(CGALDotNetGeometry.Colors.ColorHSV,CGALDotNetGeometry.Colors.ColorHSV)">
            <summary>
            Add two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.op_Addition(CGALDotNetGeometry.Colors.ColorHSV,System.Single)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.op_Addition(System.Single,CGALDotNetGeometry.Colors.ColorHSV)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.op_Subtraction(CGALDotNetGeometry.Colors.ColorHSV,CGALDotNetGeometry.Colors.ColorHSV)">
            <summary>
            Subtract two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.op_Subtraction(CGALDotNetGeometry.Colors.ColorHSV,System.Single)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.op_Subtraction(System.Single,CGALDotNetGeometry.Colors.ColorHSV)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.op_Multiply(CGALDotNetGeometry.Colors.ColorHSV,CGALDotNetGeometry.Colors.ColorHSV)">
            <summary>
            Multiply two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.op_Multiply(CGALDotNetGeometry.Colors.ColorHSV,System.Single)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.op_Multiply(System.Single,CGALDotNetGeometry.Colors.ColorHSV)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.op_Division(CGALDotNetGeometry.Colors.ColorHSV,CGALDotNetGeometry.Colors.ColorHSV)">
            <summary>
            Divide two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.op_Division(CGALDotNetGeometry.Colors.ColorHSV,System.Single)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.op_Equality(CGALDotNetGeometry.Colors.ColorHSV,CGALDotNetGeometry.Colors.ColorHSV)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.op_Inequality(CGALDotNetGeometry.Colors.ColorHSV,CGALDotNetGeometry.Colors.ColorHSV)">
            <summary>
            Are these colors not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.Equals(System.Object)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.AlmostEqual(CGALDotNetGeometry.Colors.ColorHSV,CGALDotNetGeometry.Colors.ColorHSV,System.Single)">
            <summary>
            Are these colors equal given the error.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.Equals(CGALDotNetGeometry.Colors.ColorHSV)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.GetHashCode">
            <summary>
            colors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.ToString">
            <summary>
            color as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.ToString(System.String)">
            <summary>
            color as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.FromBytes(System.Int32,System.Int32,System.Int32)">
            <summary>
            color from bytes.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.Distance(CGALDotNetGeometry.Colors.ColorHSV,CGALDotNetGeometry.Colors.ColorHSV)">
            <summary>
            The distance between two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.SqrDistance(CGALDotNetGeometry.Colors.ColorHSV,CGALDotNetGeometry.Colors.ColorHSV)">
            <summary>
            The square distance between two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.Lerp(CGALDotNetGeometry.Colors.ColorHSV,CGALDotNetGeometry.Colors.ColorHSV,System.Single)">
            <summary>
            Lerp between two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.BLerp(CGALDotNetGeometry.Colors.ColorHSV,CGALDotNetGeometry.Colors.ColorHSV,CGALDotNetGeometry.Colors.ColorHSV,CGALDotNetGeometry.Colors.ColorHSV,System.Single,System.Single)">
            <summary>
            BLerp between four colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.ToRGB(System.Single,System.Single,System.Single)">
            <summary>
            Convert to RGB color space.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorHSV.GenerateSpectrum(System.Int32)">
            <summary>
            Generates a list of colors with hues ranging from 0 360
            and a saturation and value of 1. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.op_Addition(CGALDotNetGeometry.Colors.ColorRGB,CGALDotNetGeometry.Colors.ColorRGB)">
            <summary>
            Add two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.op_Addition(CGALDotNetGeometry.Colors.ColorRGB,System.Single)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.op_Addition(System.Single,CGALDotNetGeometry.Colors.ColorRGB)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.op_Subtraction(CGALDotNetGeometry.Colors.ColorRGB,CGALDotNetGeometry.Colors.ColorRGB)">
            <summary>
            Subtract two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.op_Subtraction(CGALDotNetGeometry.Colors.ColorRGB,System.Single)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.op_Subtraction(System.Single,CGALDotNetGeometry.Colors.ColorRGB)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.op_Multiply(CGALDotNetGeometry.Colors.ColorRGB,CGALDotNetGeometry.Colors.ColorRGB)">
            <summary>
            Multiply two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.op_Multiply(CGALDotNetGeometry.Colors.ColorRGB,System.Single)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.op_Multiply(System.Single,CGALDotNetGeometry.Colors.ColorRGB)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.op_Division(CGALDotNetGeometry.Colors.ColorRGB,CGALDotNetGeometry.Colors.ColorRGB)">
            <summary>
            Divide two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.op_Division(CGALDotNetGeometry.Colors.ColorRGB,System.Single)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.op_Equality(CGALDotNetGeometry.Colors.ColorRGB,CGALDotNetGeometry.Colors.ColorRGB)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.op_Inequality(CGALDotNetGeometry.Colors.ColorRGB,CGALDotNetGeometry.Colors.ColorRGB)">
            <summary>
            Are these colors not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.Equals(System.Object)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.AlmostEqual(CGALDotNetGeometry.Colors.ColorRGB,CGALDotNetGeometry.Colors.ColorRGB,System.Single)">
            <summary>
            Are these colors equal given the error.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.Equals(CGALDotNetGeometry.Colors.ColorRGB)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.GetHashCode">
            <summary>
            colors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.ToString">
            <summary>
            color as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.ToString(System.String)">
            <summary>
            color as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.RGBA(System.Single)">
            <summary>
            Create a rgba color form this colors rgb 
            values and the provided alpha value.
            </summary>
            <param name="a">The alpha value.</param>
            <returns>THe RGBA color.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.AlphaBlend(CGALDotNetGeometry.Colors.ColorRGB,CGALDotNetGeometry.Colors.ColorRGB,System.Single,System.Single)">
            <summary>
            Alpha blend the two pixels.
            </summary>
            <param name="c0">The first pixel.</param>
            <param name="c1">The second pixel.</param>
            <param name="a0">The first pixels alpha.</param>
            <param name="a1">The second pixels alpha.</param>
            <returns>The alpha blened pixel.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.FromBytes(System.Int32,System.Int32,System.Int32)">
            <summary>
            color from bytes.
            The values will be converted from a 0-255 range to a 0-1 range.
            </summary>
            <returns>A color will values in the 0-1 range.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.FromInteger(System.Int32,System.Boolean)">
            <summary>
            Create a color from a integer where each byte in the 
            integer represents a channl in the color.
            </summary>
            <param name="i">The integer.</param>
            <param name="bgr">are the channels packed bgr or rgb.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.ToInteger(System.Boolean)">
            <summary>
            Convert the color to a integer where each byte 
            represents a channel in the color.
            </summary>
            <param name="abgr">are the channels packed bgr or rgb.</param>
            <returns>A integer where each byte represents a channel in the color.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.Gamma(System.Single,System.Single)">
            <summary>
            Apply the gamma function to the color.
            </summary>
            <param name="lambda">The power to raise each channel to.</param>
            <param name="A">The constant the result is multiplied by. Defaults to 1.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.Distance(CGALDotNetGeometry.Colors.ColorRGB,CGALDotNetGeometry.Colors.ColorRGB)">
            <summary>
            The distance between two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.SqrDistance(CGALDotNetGeometry.Colors.ColorRGB,CGALDotNetGeometry.Colors.ColorRGB)">
            <summary>
            The square distance between two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.Min(CGALDotNetGeometry.Colors.ColorRGB,System.Single)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.Max(CGALDotNetGeometry.Colors.ColorRGB,System.Single)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.Clamp(CGALDotNetGeometry.Colors.ColorRGB,System.Single,System.Single)">
            <summary>
            Clamp the each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.Lerp(CGALDotNetGeometry.Colors.ColorRGB,CGALDotNetGeometry.Colors.ColorRGB,System.Single)">
            <summary>
            Lerp between two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.BLerp(CGALDotNetGeometry.Colors.ColorRGB,CGALDotNetGeometry.Colors.ColorRGB,CGALDotNetGeometry.Colors.ColorRGB,CGALDotNetGeometry.Colors.ColorRGB,System.Single,System.Single)">
            <summary>
            BLerp between four colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.ToHSV(System.Single,System.Single,System.Single)">
            <summary>
            Convert to HSV color space.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.RainbowPalatte">
            <summary>
            Create a palette of 6 colors from the rainbow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.Palette">
            <summary>
            Create a palette of colors..
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGB.CustomPalette(System.Int32,System.Single,System.Single)">
            <summary>
            Create a custom palette of hues with the same saturation and value.
            </summary>
            <param name="hues">The number of hues in the palette.</param>
            <param name="saturation">The saturation of the colors.</param>
            <param name="value">The values of the colors.</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.op_Addition(CGALDotNetGeometry.Colors.ColorRGBA,CGALDotNetGeometry.Colors.ColorRGBA)">
            <summary>
            Add two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.op_Addition(CGALDotNetGeometry.Colors.ColorRGBA,System.Single)">
            <summary>
            Add color and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.op_Addition(System.Single,CGALDotNetGeometry.Colors.ColorRGBA)">
            <summary>
            Add color and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.op_Subtraction(CGALDotNetGeometry.Colors.ColorRGBA,CGALDotNetGeometry.Colors.ColorRGBA)">
            <summary>
            Subtract two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.op_Subtraction(CGALDotNetGeometry.Colors.ColorRGBA,System.Single)">
            <summary>
            Subtract color and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.op_Subtraction(System.Single,CGALDotNetGeometry.Colors.ColorRGBA)">
            <summary>
            Subtract color and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.op_Multiply(CGALDotNetGeometry.Colors.ColorRGBA,CGALDotNetGeometry.Colors.ColorRGBA)">
            <summary>
            Multiply two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.op_Multiply(CGALDotNetGeometry.Colors.ColorRGBA,System.Single)">
            <summary>
            Multiply a color and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.op_Multiply(System.Single,CGALDotNetGeometry.Colors.ColorRGBA)">
            <summary>
            Multiply a color and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.op_Division(CGALDotNetGeometry.Colors.ColorRGBA,CGALDotNetGeometry.Colors.ColorRGBA)">
            <summary>
            Divide two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.op_Division(CGALDotNetGeometry.Colors.ColorRGBA,System.Single)">
            <summary>
            Divide a color and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.op_Equality(CGALDotNetGeometry.Colors.ColorRGBA,CGALDotNetGeometry.Colors.ColorRGBA)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.op_Inequality(CGALDotNetGeometry.Colors.ColorRGBA,CGALDotNetGeometry.Colors.ColorRGBA)">
            <summary>
            Are these colors not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.Equals(System.Object)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.AlmostEqual(CGALDotNetGeometry.Colors.ColorRGBA,CGALDotNetGeometry.Colors.ColorRGBA,System.Single)">
            <summary>
            Are these colors equal given the error.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.Equals(CGALDotNetGeometry.Colors.ColorRGBA)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.GetHashCode">
            <summary>
            colors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.ToString">
            <summary>
            color as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.ToString(System.String)">
            <summary>
            color as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.AlphaBlend(CGALDotNetGeometry.Colors.ColorRGBA,CGALDotNetGeometry.Colors.ColorRGBA)">
            <summary>
            Alpha blend the two pixels.
            </summary>
            <param name="c0">The first pixel.</param>
            <param name="c1">The second pixel.</param>
            <returns>The alpha blened pixel.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.FromBytes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            color from bytes.
            The values will be converted from a 0-255 range to a 0-1 range.
            </summary>
            <returns>A color will values in the 0-1 range.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.FromInteger(System.Int32,System.Boolean)">
            <summary>
            Create a color from a integer where each byte in the 
            integer represents a channl in the color.
            </summary>
            <param name="i">The integer.</param>
            <param name="abgr">are the channels packed bgr or rgb.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.ToInteger(System.Boolean)">
            <summary>
            Convert the color to a integer where each byte 
            represents a channel in the color.
            </summary>
            <param name="abgr">are the channels packed bgr or rgb.</param>
            <returns>A integer where each byte represents a channel in the color.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.Gamma(System.Single,System.Single)">
            <summary>
            Apply the gamma function to the color.
            Gamma is not applied to the alpha channel.
            </summary>
            <param name="lambda">The power to raise each channel to.</param>
            <param name="A">The constant the result is multiplied by. Defaults to 1.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.Distance(CGALDotNetGeometry.Colors.ColorRGBA,CGALDotNetGeometry.Colors.ColorRGBA)">
            <summary>
            The distance between two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.SqrDistance(CGALDotNetGeometry.Colors.ColorRGBA,CGALDotNetGeometry.Colors.ColorRGBA)">
            <summary>
            The square distance between two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.Min(CGALDotNetGeometry.Colors.ColorRGBA,System.Single)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.Max(CGALDotNetGeometry.Colors.ColorRGBA,System.Single)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.Clamp(CGALDotNetGeometry.Colors.ColorRGBA,System.Single,System.Single)">
            <summary>
            Clamp the each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.Lerp(CGALDotNetGeometry.Colors.ColorRGBA,CGALDotNetGeometry.Colors.ColorRGBA,System.Single)">
            <summary>
            Lerp between two colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.BLerp(CGALDotNetGeometry.Colors.ColorRGBA,CGALDotNetGeometry.Colors.ColorRGBA,CGALDotNetGeometry.Colors.ColorRGBA,CGALDotNetGeometry.Colors.ColorRGBA,System.Single,System.Single)">
            <summary>
            BLerp between four colors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Colors.ColorRGBA.ToHSV">
            <summary>
            Convert to HSV color space.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Marching.MarchingBase.WindingOrder">
            <summary>
            Winding order of triangles use 2,1,0 or 0,1,2
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Marching.MarchingBase.Generate(System.Func{CGALDotNetGeometry.Numerics.Point3d,System.Double},System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point3d},System.Collections.Generic.List{System.Int32})">
            <summary>
            Generate the vertices and indices from the data returned from the function.
            </summary>
            <param name="sdf">The signed distance function</param>
            <param name="width">The width of the sdf's bounds</param>
            <param name="height">The height of the sdf's bounds</param>
            <param name="depth">The depth of the sdf's bounds</param>
            <param name="verts">The list the vertices will be added to.</param>
            <param name="indices">The list the indices will be added to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Marching.MarchingBase.Generate(System.Single[0:,0:,0:],System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point3d},System.Collections.Generic.List{System.Int32})">
            <summary>
            Generate the vertices and indices from the data in the voxel array.
            </summary>
            <param name="voxels">The voxel array</param>
            <param name="verts">The list the vertices will be added to.</param>
            <param name="indices">The list the indices will be added to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Marching.MarchingBase.March(System.Double,System.Double,System.Double,System.Single[],System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point3d},System.Collections.Generic.List{System.Int32})">
            <summary>
            MarchCube performs the Marching algorithm on a single cube
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Marching.MarchingBase.GetOffset(System.Double,System.Double)">
            <summary>
            GetOffset finds the approximate point of intersection of the surface
            between two points with the values v1 and v2
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Marching.MarchingBase.VertexOffset">
            <summary>
            VertexOffset lists the positions, relative to vertex0, 
            of each of the 8 vertices of a cube.
            vertexOffset[8][3]
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Marching.MarchingCubes.March(System.Double,System.Double,System.Double,System.Single[],System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point3d},System.Collections.Generic.List{System.Int32})">
            <summary>
            MarchCube performs the Marching Cubes algorithm on a single cube
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Marching.MarchingCubes.EdgeConnection">
            <summary>
            EdgeConnection lists the index of the endpoint vertices for each 
            of the 12 edges of the cube.
            edgeConnection[12][2]
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Marching.MarchingCubes.EdgeDirection">
            <summary>
            edgeDirection lists the direction vector (vertex1-vertex0) for each edge in the cube.
            edgeDirection[12][3]
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Marching.MarchingCubes.CubeEdgeFlags">
            <summary>
            For any edge, if one vertex is inside of the surface and the other 
            is outside of the surface then the edge intersects the surface.
            For each of the 8 vertices of the cube can be two possible states,
            either inside or outside of the surface.
            For any cube the are 2^8=256 possible sets of vertex states.
            This table lists the edges intersected by the surface for all 256 
            possible vertex states. There are 12 edges.  
            For each entry in the table, if edge #n is intersected, then bit #n is set to 1.
            cubeEdgeFlags[256]
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Marching.MarchingCubes.TriangleConnectionTable">
            <summary>
            For each of the possible vertex states listed in cubeEdgeFlags there is a specific triangulation
            of the edge intersection points.  triangleConnectionTable lists all of them in the form of
            0-5 edge triples with the list terminated by the invalid value -1.
            For example: triangleConnectionTable[3] list the 2 triangles formed when corner[0] 
            and corner[1] are inside of the surface, but the rest of the cube is not.
            triangleConnectionTable[256][16]
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Marching.MarchingSquares.Generate(System.Func{CGALDotNetGeometry.Numerics.Point2d,System.Double},System.Int32,System.Int32,System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d},System.Collections.Generic.List{System.Int32})">
            <summary>
            Generate the vertices and indices from the data returned from the function.
            </summary>
            <param name="sdf">The signed distance function</param>
            <param name="width">The width of the sdf's bounds</param>
            <param name="height">The height of the sdf's bounds</param>
            <param name="verts">The list the vertices will be added to.</param>
            <param name="indices">The list the indices will be added to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Marching.MarchingSquares.Generate(System.Single[0:,0:],System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d},System.Collections.Generic.List{System.Int32})">
            <summary>
            Generate the vertices and indices from the data in the voxel array.
            </summary>
            <param name="voxels">The voxel array</param>
            <param name="verts">The list the vertices will be added to.</param>
            <param name="indices">The list the indices will be added to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Marching.MarchingSquares.GetOffset(System.Double,System.Double)">
            <summary>
            GetOffset finds the approximate point of intersection of the surface
            between two points with the values v1 and v2
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Marching.MarchingSquares.VertexOffset">
            <summary>
            VertexOffset lists the positions, relative to vertex0, 
            of each of the 4 vertices of a square.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Marching.MarchingSquares.EdgeConnection">
            <summary>
            EdgeConnection lists the index of the endpoint vertices for each 
            of the 4 edges of the cube.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Marching.MarchingSquares.EdgeDirection">
            <summary>
            edgeDirection lists the direction vector (vertex1-vertex0) for each edge in the cube.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Marching.MarchingTertrahedron.March(System.Double,System.Double,System.Double,System.Single[],System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point3d},System.Collections.Generic.List{System.Int32})">
            <summary>
            MarchCubeTetrahedron performs the Marching Tetrahedrons algorithm on a single cube
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Marching.MarchingTertrahedron.MarchTetrahedron(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point3d},System.Collections.Generic.IList{System.Int32})">
            <summary>
            MarchTetrahedron performs the Marching Tetrahedrons algorithm on a single tetrahedron
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Marching.MarchingTertrahedron.TetrahedronEdgeConnection">
            <summary>
            TetrahedronEdgeConnection lists the index of the endpoint vertices for each of the 6 edges of the tetrahedron.
            tetrahedronEdgeConnection[6][2]
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Marching.MarchingTertrahedron.TetrahedronsInACube">
            <summary>
            TetrahedronEdgeConnection lists the index of verticies from a cube 
            that made up each of the six tetrahedrons within the cube.
            tetrahedronsInACube[6][4]
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Marching.MarchingTertrahedron.TetrahedronEdgeFlags">
            <summary>
            For any edge, if one vertex is inside of the surface and the other is outside of 
            the surface then the edge intersects the surface
            For each of the 4 vertices of the tetrahedron can be two possible states, 
            either inside or outside of the surface
            For any tetrahedron the are 2^4=16 possible sets of vertex states.
            This table lists the edges intersected by the surface for all 16 possible vertex states.
            There are 6 edges.  For each entry in the table, if edge #n is intersected, then bit #n is set to 1.
            tetrahedronEdgeFlags[16]
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Marching.MarchingTertrahedron.TetrahedronTriangles">
            <summary>
            For each of the possible vertex states listed in tetrahedronEdgeFlags there
            is a specific triangulation of the edge intersection points.  
            TetrahedronTriangles lists all of them in the form of 0-2 edge triples 
            with the list terminated by the invalid value -1.
            tetrahedronTriangles[16][7]
            </summary>
        </member>
        <member name="T:CGALDotNetGeometry.Numerics.Degree">
            <summary>
            Represents a angle in degrees.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Degree.angle">
            <summary>
            The angle in degrees.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Degree.radian">
            <summary>
            The degrees angle in radians.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Degree.A0">
            <summary>
            0 degrees.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Degree.A90">
            <summary>
            90 degrees.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Degree.A180">
            <summary>
            180 degrees.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Degree.A270">
            <summary>
            270 degrees.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Degree.A360">
            <summary>
            360 degrees.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.#ctor(System.Double)">
            <summary>
            Create a new degree from a value.
            </summary>
            <param name="angle">The angle in degrees.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_Addition(CGALDotNetGeometry.Numerics.Degree,CGALDotNetGeometry.Numerics.Degree)">
            <summary>
            Add two angles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_Addition(CGALDotNetGeometry.Numerics.Degree,System.Double)">
            <summary>
            Add angle and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_UnaryNegation(CGALDotNetGeometry.Numerics.Degree)">
            <summary>
            Negate the angle.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_Addition(System.Double,CGALDotNetGeometry.Numerics.Degree)">
            <summary>
            Add angle and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_Subtraction(CGALDotNetGeometry.Numerics.Degree,CGALDotNetGeometry.Numerics.Degree)">
            <summary>
            Subtract two angles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_Subtraction(CGALDotNetGeometry.Numerics.Degree,System.Double)">
            <summary>
            Subtract angle and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_Subtraction(System.Double,CGALDotNetGeometry.Numerics.Degree)">
            <summary>
            Subtract angle and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_Multiply(CGALDotNetGeometry.Numerics.Degree,CGALDotNetGeometry.Numerics.Degree)">
            <summary>
            Multiply two angles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_Multiply(CGALDotNetGeometry.Numerics.Degree,System.Double)">
            <summary>
            Multiply a angle and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_Multiply(System.Double,CGALDotNetGeometry.Numerics.Degree)">
            <summary>
            Multiply a angle and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_Division(CGALDotNetGeometry.Numerics.Degree,CGALDotNetGeometry.Numerics.Degree)">
            <summary>
            Divide two angles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_Division(CGALDotNetGeometry.Numerics.Degree,System.Double)">
            <summary>
            Divide a angle and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_LessThan(CGALDotNetGeometry.Numerics.Degree,System.Double)">
            <summary>
            Is the degree less than the scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_LessThanOrEqual(CGALDotNetGeometry.Numerics.Degree,System.Double)">
            <summary>
            Is the degree less than or equal to the scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_GreaterThan(CGALDotNetGeometry.Numerics.Degree,System.Double)">
            <summary>
            Is the degree greater than the scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_GreaterThanOrEqual(CGALDotNetGeometry.Numerics.Degree,System.Double)">
            <summary>
            Is the degree greater than or equal to the scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_LessThan(CGALDotNetGeometry.Numerics.Degree,CGALDotNetGeometry.Numerics.Degree)">
            <summary>
            Is the degree less than the other degree.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_LessThanOrEqual(CGALDotNetGeometry.Numerics.Degree,CGALDotNetGeometry.Numerics.Degree)">
            <summary>
            Is the degree less than or equal to the other degree.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_GreaterThan(CGALDotNetGeometry.Numerics.Degree,CGALDotNetGeometry.Numerics.Degree)">
            <summary>
            Is the degree greater than the other degree.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_GreaterThanOrEqual(CGALDotNetGeometry.Numerics.Degree,CGALDotNetGeometry.Numerics.Degree)">
            <summary>
            Is the degree greater than or equal to the other degree.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_Implicit(CGALDotNetGeometry.Numerics.Radian)~CGALDotNetGeometry.Numerics.Degree">
            <summary>
            Cast from a radian to degrees.
            </summary>
            <param name="v">The angle in radians.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_Equality(CGALDotNetGeometry.Numerics.Degree,CGALDotNetGeometry.Numerics.Degree)">
            <summary>
            Are these angles equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.op_Inequality(CGALDotNetGeometry.Numerics.Degree,CGALDotNetGeometry.Numerics.Degree)">
            <summary>
            Are these angles not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.Equals(System.Object)">
            <summary>
            Are these angles equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.Equals(CGALDotNetGeometry.Numerics.Degree)">
            <summary>
            Are these angles equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.GetHashCode">
            <summary>
            Angles hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.ToString">
            <summary>
            Angles as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.ToString(System.String)">
            <summary>
            Angles as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Degree.Rounded(System.Int32)">
            <summary>
            A rounded angle.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded angle</returns>
        </member>
        <member name="T:CGALDotNetGeometry.Numerics.HPoint2d">
            <summary>
            A Homogenous 2D point struct.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint2d.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint2d.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint2d.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint2d.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.#ctor(System.Double)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.#ctor(System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint2d.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint2d.IsFinite">
            <summary>
            Are all the components of vector finite.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint2d.Finite">
            <summary>
            Make a point with no non finite conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint2d.IsNAN">
            <summary>
            Are any of the points components nan.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint2d.NoNAN">
            <summary>
            Make a point with no nan conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint2d.Cartesian">
            <summary>
            Convert from homogenous to cartesian space.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.op_Addition(CGALDotNetGeometry.Numerics.HPoint2d,CGALDotNetGeometry.Numerics.HPoint2d)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.op_Addition(CGALDotNetGeometry.Numerics.HPoint2d,System.Double)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.op_Addition(System.Double,CGALDotNetGeometry.Numerics.HPoint2d)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.op_Multiply(CGALDotNetGeometry.Numerics.HPoint2d,CGALDotNetGeometry.Numerics.HPoint2d)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.op_Multiply(CGALDotNetGeometry.Numerics.HPoint2d,System.Double)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.op_Multiply(System.Double,CGALDotNetGeometry.Numerics.HPoint2d)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.op_Division(CGALDotNetGeometry.Numerics.HPoint2d,System.Double)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.op_Division(System.Double,CGALDotNetGeometry.Numerics.HPoint2d)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.op_Equality(CGALDotNetGeometry.Numerics.HPoint2d,CGALDotNetGeometry.Numerics.HPoint2d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.op_Inequality(CGALDotNetGeometry.Numerics.HPoint2d,CGALDotNetGeometry.Numerics.HPoint2d)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.Equals(CGALDotNetGeometry.Numerics.HPoint2d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.AlmostEqual(CGALDotNetGeometry.Numerics.HPoint2d,CGALDotNetGeometry.Numerics.HPoint2d,System.Double)">
            <summary>
            Are these points equal given the error.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded point</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.Round(System.Int32)">
            <summary>
            Round the point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.Floor">
            <summary>
            Floor each component if point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.Ceilling">
            <summary>
            Ceilling each component if point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2d.RandomPoints(System.Int32,System.Int32,System.Double,CGALDotNetGeometry.Shapes.Box2d)">
            <summary>
            Create a array of random points.
            </summary>
            <param name="seed">The seed</param>
            <param name="count">The number of points to create.</param>
            <param name="weight">The number of points weight.</param>
            <param name="range">The range of the points.</param>
            <returns>The point array.</returns>
        </member>
        <member name="T:CGALDotNetGeometry.Numerics.HPoint2f">
            <summary>
            A Homogenous 2D point struct.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint2f.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint2f.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint2f.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint2f.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.#ctor(System.Single)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.#ctor(System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint2f.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint2f.IsFinite">
            <summary>
            Are all the components of vector finite.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint2f.Finite">
            <summary>
            Make a point with no non finite conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint2f.IsNAN">
            <summary>
            Are any of the points components nan.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint2f.NoNAN">
            <summary>
            Make a point with no nan conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint2f.Cartesian">
            <summary>
            Convert from homogenous to cartesian space.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.op_Addition(CGALDotNetGeometry.Numerics.HPoint2f,CGALDotNetGeometry.Numerics.HPoint2f)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.op_Addition(CGALDotNetGeometry.Numerics.HPoint2f,System.Single)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.op_Addition(System.Single,CGALDotNetGeometry.Numerics.HPoint2f)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.op_Multiply(CGALDotNetGeometry.Numerics.HPoint2f,CGALDotNetGeometry.Numerics.HPoint2f)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.op_Multiply(CGALDotNetGeometry.Numerics.HPoint2f,System.Single)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.op_Multiply(System.Single,CGALDotNetGeometry.Numerics.HPoint2f)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.op_Division(CGALDotNetGeometry.Numerics.HPoint2f,System.Single)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.op_Division(System.Single,CGALDotNetGeometry.Numerics.HPoint2f)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.op_Equality(CGALDotNetGeometry.Numerics.HPoint2f,CGALDotNetGeometry.Numerics.HPoint2f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.op_Inequality(CGALDotNetGeometry.Numerics.HPoint2f,CGALDotNetGeometry.Numerics.HPoint2f)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.Equals(CGALDotNetGeometry.Numerics.HPoint2f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.AlmostEqual(CGALDotNetGeometry.Numerics.HPoint2f,CGALDotNetGeometry.Numerics.HPoint2f,System.Single)">
            <summary>
            Are these points equal given the error.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded point</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.Round(System.Int32)">
            <summary>
            Round the point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.Floor">
            <summary>
            Floor each component if point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.Ceilling">
            <summary>
            Ceilling each component if point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint2f.RandomPoints(System.Int32,System.Int32,System.Single,CGALDotNetGeometry.Shapes.Box2f)">
            <summary>
            Create a array of random points.
            </summary>
            <param name="seed">The seed</param>
            <param name="count">The number of points to create.</param>
            <param name="weight">The number of points weight.</param>
            <param name="range">The range of the points.</param>
            <returns>The point array.</returns>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint3d.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint3d.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint3d.UnitZ">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint3d.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint3d.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint3d.Half">
            <summary>
            A point of 0.5.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint3d.PositiveInfinity">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint3d.NegativeInfinity">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.#ctor(System.Double)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.#ctor(System.Double,System.Double)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint3d.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint3d.IsFinite">
            <summary>
            Are all the components of vector finite.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint3d.Finite">
            <summary>
            Make a point with no non finite conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint3d.IsNAN">
            <summary>
            Are any of the points components nan.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint3d.NoNAN">
            <summary>
            Make a point with no nan conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint3d.Cartesian">
            <summary>
            Convert from homogenous to cartesian space.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint3d.Vector3d">
            <summary>
            Point as vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint3d.Vector4d">
            <summary>
            Point as vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.op_Addition(CGALDotNetGeometry.Numerics.HPoint3d,CGALDotNetGeometry.Numerics.HPoint3d)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.op_Addition(CGALDotNetGeometry.Numerics.HPoint3d,System.Double)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.op_Addition(System.Double,CGALDotNetGeometry.Numerics.HPoint3d)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.op_Multiply(CGALDotNetGeometry.Numerics.HPoint3d,CGALDotNetGeometry.Numerics.HPoint3d)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.op_Multiply(CGALDotNetGeometry.Numerics.HPoint3d,System.Double)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.op_Multiply(System.Double,CGALDotNetGeometry.Numerics.HPoint3d)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.op_Division(CGALDotNetGeometry.Numerics.HPoint3d,System.Double)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.op_Division(System.Double,CGALDotNetGeometry.Numerics.HPoint3d)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.op_Equality(CGALDotNetGeometry.Numerics.HPoint3d,CGALDotNetGeometry.Numerics.HPoint3d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.op_Inequality(CGALDotNetGeometry.Numerics.HPoint3d,CGALDotNetGeometry.Numerics.HPoint3d)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.Equals(CGALDotNetGeometry.Numerics.HPoint3d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.AlmostEqual(CGALDotNetGeometry.Numerics.HPoint3d,CGALDotNetGeometry.Numerics.HPoint3d,System.Double)">
            <summary>
            Are these points equal given the error.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded point</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.Round(System.Int32)">
            <summary>
            Round the point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.Floor">
            <summary>
            Floor each component if point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.Ceilling">
            <summary>
            Ceilling each component if point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3d.RandomPoints(System.Int32,System.Int32,System.Double,CGALDotNetGeometry.Shapes.Box3d)">
            <summary>
            Create a array of random points.
            </summary>
            <param name="seed">The seed</param>
            <param name="count">The number of points to create.</param>
            <param name="weight">The number of points weight.</param>
            <param name="range">The range of the points.</param>
            <returns>The point array.</returns>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint3f.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint3f.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint3f.UnitZ">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint3f.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint3f.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint3f.Half">
            <summary>
            A point of 0.5.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint3f.PositiveInfinity">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.HPoint3f.NegativeInfinity">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.#ctor(System.Single)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.#ctor(System.Single,System.Single)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint3f.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint3f.IsFinite">
            <summary>
            Are all the components of vector finite.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint3f.Finite">
            <summary>
            Make a point with no non finite conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint3f.IsNAN">
            <summary>
            Are any of the points components nan.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint3f.NoNAN">
            <summary>
            Make a point with no nan conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint3f.Cartesian">
            <summary>
            Convert from homogenous to cartesian space.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint3f.Vector3f">
            <summary>
            Point as vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.HPoint3f.Vector4d">
            <summary>
            Point as vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.op_Addition(CGALDotNetGeometry.Numerics.HPoint3f,CGALDotNetGeometry.Numerics.HPoint3f)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.op_Addition(CGALDotNetGeometry.Numerics.HPoint3f,System.Single)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.op_Addition(System.Single,CGALDotNetGeometry.Numerics.HPoint3f)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.op_Multiply(CGALDotNetGeometry.Numerics.HPoint3f,CGALDotNetGeometry.Numerics.HPoint3f)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.op_Multiply(CGALDotNetGeometry.Numerics.HPoint3f,System.Single)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.op_Multiply(System.Single,CGALDotNetGeometry.Numerics.HPoint3f)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.op_Division(CGALDotNetGeometry.Numerics.HPoint3f,System.Single)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.op_Division(System.Single,CGALDotNetGeometry.Numerics.HPoint3f)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.op_Equality(CGALDotNetGeometry.Numerics.HPoint3f,CGALDotNetGeometry.Numerics.HPoint3f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.op_Inequality(CGALDotNetGeometry.Numerics.HPoint3f,CGALDotNetGeometry.Numerics.HPoint3f)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.Equals(CGALDotNetGeometry.Numerics.HPoint3f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.AlmostEqual(CGALDotNetGeometry.Numerics.HPoint3f,CGALDotNetGeometry.Numerics.HPoint3f,System.Single)">
            <summary>
            Are these points equal given the error.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded point</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.Round(System.Int32)">
            <summary>
            Round the point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.Floor">
            <summary>
            Floor each component if point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.Ceilling">
            <summary>
            Ceilling each component if point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.HPoint3f.RandomPoints(System.Int32,System.Int32,System.Single,CGALDotNetGeometry.Shapes.Box3f)">
            <summary>
            Create a array of random points.
            </summary>
            <param name="seed">The seed</param>
            <param name="count">The number of points to create.</param>
            <param name="weight">The number of points weight.</param>
            <param name="range">The range of the points.</param>
            <returns>The point array.</returns>
        </member>
        <member name="T:CGALDotNetGeometry.Numerics.Index2">
            <summary>
            WARNING - Must match layout of unmanaged c++ CGAL struct in Index.h file.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.Wrap(System.Int32,System.Int32)">
            <summary>
            Wrap a value between 0 and count-1 (inclusive).
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.Mirror(System.Int32,System.Int32)">
            <summary>
            Mirror a value between 0 and count-1 (inclusive).
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.Swap(System.Single@,System.Single@)">
            <summary>
            Swaps the two values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.Swap(System.Double@,System.Double@)">
            <summary>
            Swaps the two values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.Swap(System.Int32@,System.Int32@)">
            <summary>
            Swaps the two values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.Swap``1(``0@,``0@)">
            <summary>
            Swaps the two values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.IsPow2(System.Int32)">
            <summary>
            Is number a power of 2.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.NearestPow2(System.Int32)">
            <summary>
            Return the closest pow2 number to num.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.LowerPow2(System.Int32)">
            <summary>
            Return the closest pow2 number thats less than num.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.IntPow(System.Int32,System.Int32)">
            <summary>
            Simple int pow function.
            System Math.Pow may produce precision errors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.IntPow(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.Binomial(System.Int32,System.Int32)">
            <summary>
            Return the Binomial coefficients.
            </summary>
            <param name="k">N</param>
            <param name="i">n</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.Factorial(System.Int32)">
            <summary>
            Returns the factorial of number.
            Must be less than or equal MAX_FACTORIAL or overflow will occur.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.FactorialBI(System.Int32)">
            <summary>
            Returns the factorial of number using a BigInteger.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.Permutations(System.Int32)">
            <summary>
            Given N objects, how many unique sets exist.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.PermutationsOrderedWithRepeats(System.Int32,System.Int32)">
            <summary>
            Given N objects, how many unique sets exist of size n 
            where the order matters and objects may repeat.
            </summary>
            <param name="n">The size of the sets</param>
            <param name="N">The total number of objects</param>
            <returns>The number of sets possible</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.PermutationsUnorderedWithRepeats(System.Int32,System.Int32)">
            <summary>
            Given N objects, how many unique sets exist of size n 
            where the order does not matters and objects may repeat.
            </summary>
            <param name="n">The size of the sets</param>
            <param name="N">The total number of objects</param>
            <returns>The number of sets possible</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.PermutationsOrderedWithoutRepeats(System.Int32,System.Int32)">
            <summary>
            Given N objects, how many unique sets exist of size n 
            where the order matters and objects may not repeat.
            </summary>
            <param name="n">The size of the sets</param>
            <param name="N">The total number of objects</param>
            <returns>The number of sets possible</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.PermutationsUnorderedWithoutRepeats(System.Int32,System.Int32)">
            <summary>
            Given N objects, how many unique sets exist of size n 
            where the order does not matters and objects may not repeat.
            </summary>
            <param name="n">The size of the sets</param>
            <param name="N">The total number of objects</param>
            <returns>The number of sets possible</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.CreateFactorialTable">
            <summary>
            Creates a look up table for factorials.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.SolveQuadratic(System.Single,System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Solve the quadratic equation.
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="C"></param>
            <param name="t0">The first root.</param>
            <param name="t1">The second root.</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.MathUtil.SolveQuadratic(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Solve the quadratic equation.
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="C"></param>
            <param name="t0">The first root.</param>
            <param name="t1">The second root.</param>
            <returns></returns>
        </member>
        <member name="T:CGALDotNetGeometry.Numerics.Matrix2x2d">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*2). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix2x2d.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix2x2d.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix2x2d.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.#ctor(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.#ctor(System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.#ctor(System.Double[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix2x2d.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix2x2d.IsIdentity">
            <summary>
            Is this the identity matrix.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix2x2d.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix2x2d.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix2x2d.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix2x2d.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.op_Addition(CGALDotNetGeometry.Numerics.Matrix2x2d,CGALDotNetGeometry.Numerics.Matrix2x2d)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.op_Subtraction(CGALDotNetGeometry.Numerics.Matrix2x2d,CGALDotNetGeometry.Numerics.Matrix2x2d)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.op_Multiply(CGALDotNetGeometry.Numerics.Matrix2x2d,CGALDotNetGeometry.Numerics.Matrix2x2d)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.op_Multiply(CGALDotNetGeometry.Numerics.Matrix2x2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Multiply  a vector by a matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.op_Multiply(CGALDotNetGeometry.Numerics.Matrix2x2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Multiply a point by a matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.op_Multiply(CGALDotNetGeometry.Numerics.Matrix2x2d,System.Double)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.op_Multiply(System.Double,CGALDotNetGeometry.Numerics.Matrix2x2d)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.op_Implicit(CGALDotNetGeometry.Numerics.Matrix2x2f)~CGALDotNetGeometry.Numerics.Matrix2x2d">
            <summary>
            Cast to double matrix from a float matrix.
            </summary>
            <param name="m">The other matrix</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.op_Equality(CGALDotNetGeometry.Numerics.Matrix2x2d,CGALDotNetGeometry.Numerics.Matrix2x2d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.op_Inequality(CGALDotNetGeometry.Numerics.Matrix2x2d,CGALDotNetGeometry.Numerics.Matrix2x2d)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.Equals(CGALDotNetGeometry.Numerics.Matrix2x2d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.AlmostEqual(CGALDotNetGeometry.Numerics.Matrix2x2d,CGALDotNetGeometry.Numerics.Matrix2x2d,System.Double)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.ToString(System.String)">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.TryInverse(CGALDotNetGeometry.Numerics.Matrix2x2d@)">
            <summary>
            The Inverse of the matrix copied into mInv.
            Returns false if the matrix has no inverse.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.SetColumn(System.Int32,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Set the ith column from avector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.SetRow(System.Int32,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Set the ith row from avector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.Rotate(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2d.ToMatrix3x3d">
            <summary>
            Convert to a float precision 3 dimension matrix.
            </summary>
        </member>
        <member name="T:CGALDotNetGeometry.Numerics.Matrix2x2f">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*2). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix2x2f.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix2x2f.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix2x2f.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.#ctor(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.#ctor(System.Single)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.#ctor(System.Single[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix2x2f.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix2x2f.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix2x2f.IsIdentity">
            <summary>
            Is this the identity matrix.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix2x2f.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix2x2f.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix2x2f.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.op_Addition(CGALDotNetGeometry.Numerics.Matrix2x2f,CGALDotNetGeometry.Numerics.Matrix2x2f)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.op_Subtraction(CGALDotNetGeometry.Numerics.Matrix2x2f,CGALDotNetGeometry.Numerics.Matrix2x2f)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.op_Multiply(CGALDotNetGeometry.Numerics.Matrix2x2f,CGALDotNetGeometry.Numerics.Matrix2x2f)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.op_Multiply(CGALDotNetGeometry.Numerics.Matrix2x2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Multiply  a vector by a matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.op_Multiply(CGALDotNetGeometry.Numerics.Matrix2x2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Multiply a point by a matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.op_Multiply(CGALDotNetGeometry.Numerics.Matrix2x2f,System.Single)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.op_Multiply(System.Single,CGALDotNetGeometry.Numerics.Matrix2x2f)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.op_Explicit(CGALDotNetGeometry.Numerics.Matrix2x2d)~CGALDotNetGeometry.Numerics.Matrix2x2f">
            <summary>
            Cast to float matrix from a double matrix.
            </summary>
            <param name="m">The other matrix</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.op_Equality(CGALDotNetGeometry.Numerics.Matrix2x2f,CGALDotNetGeometry.Numerics.Matrix2x2f)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.op_Inequality(CGALDotNetGeometry.Numerics.Matrix2x2f,CGALDotNetGeometry.Numerics.Matrix2x2f)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.Equals(CGALDotNetGeometry.Numerics.Matrix2x2f)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.AlmostEqual(CGALDotNetGeometry.Numerics.Matrix2x2f,CGALDotNetGeometry.Numerics.Matrix2x2f,System.Single)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.TryInverse(CGALDotNetGeometry.Numerics.Matrix2x2f@)">
            <summary>
            The Inverse of the matrix copied into mInv.
            Returns false if the matrix has no inverse.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.SetColumn(System.Int32,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Set the ith column from avector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.SetRow(System.Int32,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Set the ith row from avector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.Rotate(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix2x2f.ToMatrix3x3f">
            <summary>
            Convert to a single precision 3 dimension matrix.
            </summary>
        </member>
        <member name="T:CGALDotNetGeometry.Numerics.Matrix3x3d">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*3). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix3x3d.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix3x3d.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix3x3d.m20">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix3x3d.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.#ctor(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.#ctor(System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.#ctor(System.Double[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix3x3d.IsIdentity">
            <summary>
            Is this the identity matrix.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix3x3d.HasScale">
            <summary>
            Does the matric have scale.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix3x3d.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix3x3d.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix3x3d.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix3x3d.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix3x3d.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.op_Addition(CGALDotNetGeometry.Numerics.Matrix3x3d,CGALDotNetGeometry.Numerics.Matrix3x3d)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.op_Subtraction(CGALDotNetGeometry.Numerics.Matrix3x3d,CGALDotNetGeometry.Numerics.Matrix3x3d)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.op_Multiply(CGALDotNetGeometry.Numerics.Matrix3x3d,CGALDotNetGeometry.Numerics.Matrix3x3d)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.op_Multiply(CGALDotNetGeometry.Numerics.Matrix3x3d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Multiply a vector by a matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.op_Multiply(CGALDotNetGeometry.Numerics.Matrix3x3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Multiply  a vector by a matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.op_Multiply(CGALDotNetGeometry.Numerics.Matrix3x3d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Multiply a point by a matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.op_Multiply(CGALDotNetGeometry.Numerics.Matrix3x3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Multiply a point by a matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.op_Multiply(CGALDotNetGeometry.Numerics.Matrix3x3d,System.Double)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.op_Multiply(System.Double,CGALDotNetGeometry.Numerics.Matrix3x3d)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.op_Implicit(CGALDotNetGeometry.Numerics.Matrix3x3f)~CGALDotNetGeometry.Numerics.Matrix3x3d">
            <summary>
            Cast to double matrix from a float matrix.
            </summary>
            <param name="m">The other matrix</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.op_Equality(CGALDotNetGeometry.Numerics.Matrix3x3d,CGALDotNetGeometry.Numerics.Matrix3x3d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.op_Inequality(CGALDotNetGeometry.Numerics.Matrix3x3d,CGALDotNetGeometry.Numerics.Matrix3x3d)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.Equals(CGALDotNetGeometry.Numerics.Matrix3x3d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.AlmostEqual(CGALDotNetGeometry.Numerics.Matrix3x3d,CGALDotNetGeometry.Numerics.Matrix3x3d,System.Double)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.ToString(System.String)">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.TryInverse(CGALDotNetGeometry.Numerics.Matrix3x3d@)">
            <summary>
            The Inverse of the matrix copied into mInv.
            Returns false if the matrix has no inverse.
            A matrix multipled by its inverse is the idenity.
            Invert a 3x3 using cofactors.  This is about 8 times faster than
            the Numerical Recipes code which uses Gaussian elimination.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.SetColumn(System.Int32,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Set the ith column from avector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.SetRow(System.Int32,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Set the ith row from avector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.ToMatrix4x4d">
            <summary>
            Convert to a REAL precision 4 dimension matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.Translate(CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Create a translation out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.Translate(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Create a translation out of a point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.Scale(CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.Scale(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Create a scale out of a point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.Scale(System.Double)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.RotateX(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.RotateY(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.RotateZ(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3d.Rotate(CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Create a rotation out of a vector.
            </summary>
        </member>
        <member name="T:CGALDotNetGeometry.Numerics.Matrix3x3f">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*3). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix3x3f.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix3x3f.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix3x3f.m20">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix3x3f.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.#ctor(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.#ctor(System.Single)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.#ctor(System.Single[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix3x3f.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix3x3f.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix3x3f.IsIdentity">
            <summary>
            Is this the identity matrix.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix3x3f.HasScale">
            <summary>
            Does the matric have scale.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix3x3f.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix3x3f.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix3x3f.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.op_Addition(CGALDotNetGeometry.Numerics.Matrix3x3f,CGALDotNetGeometry.Numerics.Matrix3x3f)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.op_Subtraction(CGALDotNetGeometry.Numerics.Matrix3x3f,CGALDotNetGeometry.Numerics.Matrix3x3f)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.op_Multiply(CGALDotNetGeometry.Numerics.Matrix3x3f,CGALDotNetGeometry.Numerics.Matrix3x3f)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.op_Multiply(CGALDotNetGeometry.Numerics.Matrix3x3f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Multiply a vector by a matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.op_Multiply(CGALDotNetGeometry.Numerics.Matrix3x3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Multiply a vector by a matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.op_Multiply(CGALDotNetGeometry.Numerics.Matrix3x3f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Multiply a point by a matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.op_Multiply(CGALDotNetGeometry.Numerics.Matrix3x3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Multiply a point by a matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.op_Multiply(CGALDotNetGeometry.Numerics.Matrix3x3f,System.Single)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.op_Multiply(System.Single,CGALDotNetGeometry.Numerics.Matrix3x3f)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.op_Explicit(CGALDotNetGeometry.Numerics.Matrix3x3d)~CGALDotNetGeometry.Numerics.Matrix3x3f">
            <summary>
            Cast to float matrix from a double matrix.
            </summary>
            <param name="m">The other matrix</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.op_Equality(CGALDotNetGeometry.Numerics.Matrix3x3f,CGALDotNetGeometry.Numerics.Matrix3x3f)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.op_Inequality(CGALDotNetGeometry.Numerics.Matrix3x3f,CGALDotNetGeometry.Numerics.Matrix3x3f)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.Equals(CGALDotNetGeometry.Numerics.Matrix3x3f)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.AlmostEqual(CGALDotNetGeometry.Numerics.Matrix3x3f,CGALDotNetGeometry.Numerics.Matrix3x3f,System.Single)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.ToString(System.String)">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.TryInverse(CGALDotNetGeometry.Numerics.Matrix3x3f@)">
            <summary>
            The Inverse of the matrix copied into mInv.
            Returns false if the matrix has no inverse.
            A matrix multipled by its inverse is the idenity.
            Invert a 3x3 using cofactors.  This is about 8 times faster than
            the Numerical Recipes code which uses Gaussian elimination.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.SetColumn(System.Int32,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Set the ith column from avector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.SetRow(System.Int32,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Set the ith row from avector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.ToMatrix4x4f">
            <summary>
            Convert to a single precision 4 dimension matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.Translate(CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Create a translation out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.Translate(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Create a translation out of a point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.Scale(CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.Scale(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Create a scale out of a point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.Scale(System.Single)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.RotateX(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.RotateY(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.RotateZ(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix3x3f.Rotate(CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Create a rotation out of a vector.
            </summary>
        </member>
        <member name="T:CGALDotNetGeometry.Numerics.Matrix4x4d">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*4). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix4x4d.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix4x4d.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix4x4d.m20">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix4x4d.m30">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix4x4d.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.#ctor(CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.#ctor(System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.#ctor(System.Double[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix4x4d.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix4x4d.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix4x4d.IsIdentity">
            <summary>
            Is this the identity matrix.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix4x4d.HasScale">
            <summary>
            Does the matric have scale.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix4x4d.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix4x4d.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix4x4d.Adjoint">
            <summary>
            The adjoint of a matrix. 
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix4x4d.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.op_Addition(CGALDotNetGeometry.Numerics.Matrix4x4d,CGALDotNetGeometry.Numerics.Matrix4x4d)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.op_Subtraction(CGALDotNetGeometry.Numerics.Matrix4x4d,CGALDotNetGeometry.Numerics.Matrix4x4d)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.op_Multiply(CGALDotNetGeometry.Numerics.Matrix4x4d,CGALDotNetGeometry.Numerics.Matrix4x4d)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.op_Multiply(CGALDotNetGeometry.Numerics.Matrix4x4d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Multiply a vector by a matrix.
            Acts like z is 0, and w is 0.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.op_Multiply(CGALDotNetGeometry.Numerics.Matrix4x4d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Multiply a vector by a matrix.
            Acts like w is 0.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.op_Multiply(CGALDotNetGeometry.Numerics.Matrix4x4d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Multiply a point by a matrix.
            Acts like z is 0, and w is 1.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.op_Multiply(CGALDotNetGeometry.Numerics.Matrix4x4d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Multiply a point by a matrix.
            Acts like w is 1.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.op_Multiply(CGALDotNetGeometry.Numerics.Matrix4x4d,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            Multiply a vector by a matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.op_Multiply(CGALDotNetGeometry.Numerics.Matrix4x4d,CGALDotNetGeometry.Numerics.Point4d)">
            <summary>
            Multiply a point by a matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.op_Multiply(CGALDotNetGeometry.Numerics.Matrix4x4d,System.Double)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.op_Multiply(System.Double,CGALDotNetGeometry.Numerics.Matrix4x4d)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.op_Implicit(CGALDotNetGeometry.Numerics.Matrix4x4f)~CGALDotNetGeometry.Numerics.Matrix4x4d">
            <summary>
            Cast to double matrix from a float matrix.
            </summary>
            <param name="m">The other matrix</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.op_Equality(CGALDotNetGeometry.Numerics.Matrix4x4d,CGALDotNetGeometry.Numerics.Matrix4x4d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.op_Inequality(CGALDotNetGeometry.Numerics.Matrix4x4d,CGALDotNetGeometry.Numerics.Matrix4x4d)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.Equals(CGALDotNetGeometry.Numerics.Matrix4x4d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.AlmostEqual(CGALDotNetGeometry.Numerics.Matrix4x4d,CGALDotNetGeometry.Numerics.Matrix4x4d,System.Double)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.ToString(System.String)">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.Minor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The minor of a matrix. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.TryInverse(CGALDotNetGeometry.Numerics.Matrix4x4d@)">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.SetColumn(System.Int32,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            Set the ith column from a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.SetRow(System.Int32,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            Set the ith row from a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.ToMatrix3x3d">
            <summary>
            Convert to a 3 dimension matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.TranslateRotateScale(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Create a translation, rotation and scale.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.TranslateRotate(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Quaternion3d)">
            <summary>
            Create a translation and rotation.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.TranslateScale(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Create a translation and scale.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.RotateScale(CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Create a rotation and scale.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.Translate(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Create a translation out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.Translate(System.Double,System.Double,System.Double)">
            <summary>
            Create a translation out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.Scale(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.Scale(System.Double)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.RotateX(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle in degrees.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.RotateY(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle in degrees.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.RotateZ(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle in degrees.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.Rotate(CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Create a rotation out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.Rotate(CGALDotNetGeometry.Numerics.Radian,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Create a rotation from a angle and the rotation axis.
            </summary>
            <param name="radian">The rotation amount.</param>
            <param name="axis">The axis to rotate on.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.Perspective(CGALDotNetGeometry.Numerics.Radian,System.Double,System.Double,System.Double)">
            <summary>
            Create a perspective matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.Ortho(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a ortho matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.Ortho(System.Double,System.Double)">
            <summary>
            Create a ortho matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4d.LookAt(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Creates the matrix need to look at target from position.
            </summary>
        </member>
        <member name="T:CGALDotNetGeometry.Numerics.Matrix4x4f">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*4). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix4x4f.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix4x4f.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix4x4f.m20">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix4x4f.m30">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Matrix4x4f.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.#ctor(CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.#ctor(System.Single)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.#ctor(System.Single[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix4x4f.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix4x4f.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix4x4f.IsIdentity">
            <summary>
            Is this the identity matrix.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix4x4f.HasScale">
            <summary>
            Does the matric have scale.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix4x4f.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix4x4f.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix4x4f.Adjoint">
            <summary>
            The adjoint of a matrix. 
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Matrix4x4f.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.op_Addition(CGALDotNetGeometry.Numerics.Matrix4x4f,CGALDotNetGeometry.Numerics.Matrix4x4f)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.op_Subtraction(CGALDotNetGeometry.Numerics.Matrix4x4f,CGALDotNetGeometry.Numerics.Matrix4x4f)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.op_Multiply(CGALDotNetGeometry.Numerics.Matrix4x4f,CGALDotNetGeometry.Numerics.Matrix4x4f)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.op_Multiply(CGALDotNetGeometry.Numerics.Matrix4x4f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Multiply a vector by a matrix.
            Acts like z is 0, and w is 0.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.op_Multiply(CGALDotNetGeometry.Numerics.Matrix4x4f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Multiply a vector by a matrix.
            Acts like w is 0.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.op_Multiply(CGALDotNetGeometry.Numerics.Matrix4x4f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Multiply a point by a matrix.
            Acts like z is 0, and w is 1.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.op_Multiply(CGALDotNetGeometry.Numerics.Matrix4x4f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Multiply a point by a matrix.
            Acts like w is 1.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.op_Multiply(CGALDotNetGeometry.Numerics.Matrix4x4f,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            Multiply a vector by a matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.op_Multiply(CGALDotNetGeometry.Numerics.Matrix4x4f,CGALDotNetGeometry.Numerics.Point4f)">
            <summary>
            Multiply a point by a matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.op_Multiply(CGALDotNetGeometry.Numerics.Matrix4x4f,System.Single)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.op_Multiply(System.Single,CGALDotNetGeometry.Numerics.Matrix4x4f)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.op_Explicit(CGALDotNetGeometry.Numerics.Matrix4x4d)~CGALDotNetGeometry.Numerics.Matrix4x4f">
            <summary>
            Cast to float matrix from a double matrix.
            </summary>
            <param name="m">The other matrix</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.op_Equality(CGALDotNetGeometry.Numerics.Matrix4x4f,CGALDotNetGeometry.Numerics.Matrix4x4f)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.op_Inequality(CGALDotNetGeometry.Numerics.Matrix4x4f,CGALDotNetGeometry.Numerics.Matrix4x4f)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.Equals(CGALDotNetGeometry.Numerics.Matrix4x4f)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.AlmostEqual(CGALDotNetGeometry.Numerics.Matrix4x4f,CGALDotNetGeometry.Numerics.Matrix4x4f,System.Single)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.ToString(System.String)">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.Minor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The minor of a matrix. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.TryInverse(CGALDotNetGeometry.Numerics.Matrix4x4f@)">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.SetColumn(System.Int32,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            Set the ith column from a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.SetRow(System.Int32,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            Set the ith row from a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.ToMatrix3x3f">
            <summary>
            Convert to a 3 dimension matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.TranslateRotateScale(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Quaternion3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Create a translation, rotation and scale.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.TranslateRotate(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Quaternion3f)">
            <summary>
            Create a translation and rotation.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.TranslateScale(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Create a translation and scale.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.RotateScale(CGALDotNetGeometry.Numerics.Quaternion3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Create a rotation and scale.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.Translate(CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Create a translation out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.Translate(System.Single,System.Single,System.Single)">
            <summary>
            Create a translation out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.Scale(CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.Scale(System.Single)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.RotateX(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle in degrees.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.RotateY(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle in degrees.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.RotateZ(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle in degrees.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.Rotate(CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Create a rotation out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.Rotate(CGALDotNetGeometry.Numerics.Radian,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Create a rotation from a angle and the rotation axis.
            </summary>
            <param name="radian">The rotation amount.</param>
            <param name="axis">The axis to rotate on.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.Perspective(CGALDotNetGeometry.Numerics.Radian,System.Single,System.Single,System.Single)">
            <summary>
            Create a perspective matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.Ortho(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a ortho matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.Ortho(System.Single,System.Single)">
            <summary>
            Create a ortho matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Matrix4x4f.LookAt(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Creates the matrix need to look at target from position.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point2d.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point2d.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point2d.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point2d.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point2d.Half">
            <summary>
            A point of 0.5.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point2d.PositiveInfinity">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point2d.NegativeInfinity">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2d.xy0">
            <summary>
            2D point to 3D point with z as 0.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2d.x0y">
            <summary>
            2D point to 3D point with y as z.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2d.xy1">
            <summary>
            2D point to 3D point with z as 1.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2d.xy00">
            <summary>
            2D point to 4D point with z as 0 and w as 0.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2d.xy01">
            <summary>
            2D point to 4D point with z as 0 and w as 1.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.#ctor(System.Double)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.#ctor(System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2d.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2d.IsFinite">
            <summary>
            Are all the components ofpoint finite.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2d.Finite">
            <summary>
            Make a point with no non finite conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2d.IsNAN">
            <summary>
            Are any of the points components nan.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2d.NoNAN">
            <summary>
            Make a point with no nan conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2d.Homogenous">
            <summary>
            Point as a homogenous point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.ToHomogenous(System.Double)">
            <summary>
            Point as a homogenous point.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2d.Sum">
            <summary>
            The sum of the points components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2d.Product">
            <summary>
            The product of the points components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2d.Absolute">
            <summary>
            The points absolute values.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2d.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2d.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_Addition(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Add two point and vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_Addition(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_Addition(CGALDotNetGeometry.Numerics.Point2d,System.Double)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_Addition(System.Double,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_UnaryNegation(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_Subtraction(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_Subtraction(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Subtract a point and a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_Subtraction(CGALDotNetGeometry.Numerics.Point2d,System.Double)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_Subtraction(System.Double,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_Multiply(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_Multiply(CGALDotNetGeometry.Numerics.Point2d,System.Double)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_Multiply(System.Double,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_Division(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_Division(CGALDotNetGeometry.Numerics.Point2d,System.Double)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_Division(System.Double,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Divide a scalar and a point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_Implicit(CGALDotNetGeometry.Numerics.Point2f)~CGALDotNetGeometry.Numerics.Point2d">
            <summary>
            Cast from Point2f to Point2d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_Implicit(CGALDotNetGeometry.Numerics.Point2i)~CGALDotNetGeometry.Numerics.Point2d">
            <summary>
            Cast from Point2i to Point2d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_Implicit(CGALDotNetGeometry.Numerics.Vector2f)~CGALDotNetGeometry.Numerics.Point2d">
            <summary>
            Cast from Vector2f to Point2d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_Implicit(CGALDotNetGeometry.Numerics.Vector2d)~CGALDotNetGeometry.Numerics.Point2d">
            <summary>
            Cast from Vector2d to Point2d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_Equality(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.op_Inequality(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.AlmostEqual(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,System.Double)">
            <summary>
            Are these points equal given the error.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.Equals(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.Distance(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Distance between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.SqrDistance(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Square distance between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.Direction(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,System.Boolean)">
            <summary>
            Direction between two points.
            </summary>
            <param name="v0">The first point.</param>
            <param name="v1">The second point.</param>
            <param name="normalize">Should the vector be normalized.</param>
            <returns>The vector from v0 to v1.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.Angle180(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Angle between two vectors in degrees from 0 to 180.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.Angle360(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Angle between two vectors in degrees from 0 to 360.
            Angle represents moving ccw from a to b.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.Min(CGALDotNetGeometry.Numerics.Point2d,System.Double)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.Min(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.Max(CGALDotNetGeometry.Numerics.Point2d,System.Double)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.Max(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.Clamp(CGALDotNetGeometry.Numerics.Point2d,System.Double,System.Double)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.Clamp(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.Lerp(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,System.Double)">
            <summary>
            Lerp between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.BLerp(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,System.Double,System.Double)">
            <summary>
            BLerp between four points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded point</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.Round(System.Int32)">
            <summary>
            Round the point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.Floor">
            <summary>
            Floor each component if point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.Ceilling">
            <summary>
            Ceilling each component if point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2d.RandomPoints(System.Int32,System.Int32,CGALDotNetGeometry.Shapes.Box2f)">
            <summary>
            Create a array of random points.
            </summary>
            <param name="seed">The seed</param>
            <param name="count">The number of points to create.</param>
            <param name="range">The range of the points.</param>
            <returns>The point array.</returns>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point2f.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point2f.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point2f.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point2f.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point2f.Half">
            <summary>
            A point of 0.5.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point2f.PositiveInfinity">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point2f.NegativeInfinity">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2f.xy0">
            <summary>
            2D point to 3D point with z as 0.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2f.x0y">
            <summary>
            2D point to 3D point with y as z.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2f.xy1">
            <summary>
            2D point to 3D point with z as 1.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2f.xy00">
            <summary>
            2D point to 4D point with z as 0 and w as 0.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2f.xy01">
            <summary>
            2D point to 4D point with z as 0 and w as 1.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.#ctor(System.Single)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.#ctor(System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.#ctor(System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2f.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2f.IsFinite">
            <summary>
            Are all the components of point finite.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2f.Finite">
            <summary>
            Make a point with no non finite conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2f.IsNAN">
            <summary>
            Are any of the points components nan.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2f.NoNAN">
            <summary>
            Make a point with no nan conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2f.Sum">
            <summary>
            The sum of the points components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2f.Product">
            <summary>
            The product of the points components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2f.Absolute">
            <summary>
            The points absolute values.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2f.Magnitude">
            <summary>
            The length of the point.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2f.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_Addition(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Add two point and vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_Addition(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_Addition(CGALDotNetGeometry.Numerics.Point2f,System.Single)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_Addition(System.Single,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_UnaryNegation(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_Subtraction(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_Subtraction(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Subtract a point and a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_Subtraction(CGALDotNetGeometry.Numerics.Point2f,System.Single)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_Subtraction(System.Single,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_Multiply(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_Multiply(CGALDotNetGeometry.Numerics.Point2f,System.Single)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_Multiply(System.Single,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_Division(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_Division(CGALDotNetGeometry.Numerics.Point2f,System.Single)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_Division(System.Single,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Divide a scalar and a point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_Explicit(CGALDotNetGeometry.Numerics.Point2d)~CGALDotNetGeometry.Numerics.Point2f">
            <summary>
            Cast from Point2d to Point2f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_Implicit(CGALDotNetGeometry.Numerics.Point2i)~CGALDotNetGeometry.Numerics.Point2f">
            <summary>
            Cast from Point2i to Point2f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_Explicit(CGALDotNetGeometry.Numerics.Vector2d)~CGALDotNetGeometry.Numerics.Point2f">
            <summary>
            Cast from Vector2d to Point2f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_Implicit(CGALDotNetGeometry.Numerics.Vector2f)~CGALDotNetGeometry.Numerics.Point2f">
            <summary>
            Cast from Vector2f to Point2f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_Equality(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.op_Inequality(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.AlmostEqual(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f,System.Single)">
            <summary>
            Are these points equal given the error.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.Equals(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.Distance(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Distance between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.SqrDistance(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Square distance between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.Direction(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f,System.Boolean)">
            <summary>
            Direction between two points.
            </summary>
            <param name="v0">The first point.</param>
            <param name="v1">The second point.</param>
            <param name="normalize">Should the vector be normalized.</param>
            <returns>The vector from v0 to v1.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.Angle180(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Angle between two vectors in degrees from 0 to 180.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.Angle360(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Angle between two vectors in degrees from 0 to 360.
            Angle represents moving ccw from a to b.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.Min(CGALDotNetGeometry.Numerics.Point2f,System.Single)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.Min(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.Max(CGALDotNetGeometry.Numerics.Point2f,System.Single)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.Max(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.Clamp(CGALDotNetGeometry.Numerics.Point2f,System.Single,System.Single)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.Clamp(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.Lerp(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f,System.Single)">
            <summary>
            Lerp between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.BLerp(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f,System.Single,System.Single)">
            <summary>
            BLerp between four points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded point</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.Round(System.Int32)">
            <summary>
            Round the point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.Floor">
            <summary>
            Floor each component if point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.Ceilling">
            <summary>
            Ceilling each component if point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2f.RandomPoints(System.Int32,System.Int32,CGALDotNetGeometry.Shapes.Box2f)">
            <summary>
            Create a array of random points.
            </summary>
            <param name="seed">The seed</param>
            <param name="count">The number of points to create.</param>
            <param name="range">The range of the points.</param>
            <returns>The point array.</returns>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point2i.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point2i.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point2i.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point2i.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point2i.MaxValue">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point2i.MinValue">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2i.xy0">
            <summary>
            2D point to 3D point with z as 0.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2i.x0y">
            <summary>
            2D point to 3D point with y as z.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2i.xy1">
            <summary>
            2D point to 3D point with z as 1.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2i.xy00">
            <summary>
            2D point to 4D point with z as 0 and w as 0.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2i.xy01">
            <summary>
            2D point to 4D point with z as 0 and w as 1.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.#ctor(System.Int32)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.#ctor(System.Int32,System.Int32)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.#ctor(System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.#ctor(System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2i.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2i.Sum">
            <summary>
            The sum of the points components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2i.Product">
            <summary>
            The product of the points components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2i.Absolute">
            <summary>
            The points absolute values.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point2i.SqrMagnitude">
            <summary>
            The length of the point squared.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.op_Addition(CGALDotNetGeometry.Numerics.Point2i,CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.op_Addition(CGALDotNetGeometry.Numerics.Point2i,System.Int32)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.op_Addition(System.Int32,CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.op_UnaryNegation(CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.op_Subtraction(CGALDotNetGeometry.Numerics.Point2i,CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.op_Subtraction(CGALDotNetGeometry.Numerics.Point2i,System.Int32)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.op_Subtraction(System.Int32,CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.op_Multiply(CGALDotNetGeometry.Numerics.Point2i,CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.op_Multiply(CGALDotNetGeometry.Numerics.Point2i,System.Int32)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.op_Multiply(System.Int32,CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.op_Division(CGALDotNetGeometry.Numerics.Point2i,CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.op_Division(CGALDotNetGeometry.Numerics.Point2i,System.Int32)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.op_Division(System.Int32,CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            Divide a scalar and a point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.op_Explicit(CGALDotNetGeometry.Numerics.Point2f)~CGALDotNetGeometry.Numerics.Point2i">
            <summary>
            Cast from Point2f to Point2i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.op_Explicit(CGALDotNetGeometry.Numerics.Point2d)~CGALDotNetGeometry.Numerics.Point2i">
            <summary>
            Cast from Point2d to Point2i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.op_Explicit(CGALDotNetGeometry.Numerics.Vector2f)~CGALDotNetGeometry.Numerics.Point2i">
            <summary>
            Cast from Vector2f to Point2i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.op_Explicit(CGALDotNetGeometry.Numerics.Vector2d)~CGALDotNetGeometry.Numerics.Point2i">
            <summary>
            Cast from Vector2d to Point2i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.op_Equality(CGALDotNetGeometry.Numerics.Point2i,CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.op_Inequality(CGALDotNetGeometry.Numerics.Point2i,CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.Equals(CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.Distance(CGALDotNetGeometry.Numerics.Point2i,CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            Distance between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.SqrDistance(CGALDotNetGeometry.Numerics.Point2i,CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            Square distance between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.Min(CGALDotNetGeometry.Numerics.Point2i,System.Int32)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.Min(CGALDotNetGeometry.Numerics.Point2i,CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.Max(CGALDotNetGeometry.Numerics.Point2i,System.Int32)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.Max(CGALDotNetGeometry.Numerics.Point2i,CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.Clamp(CGALDotNetGeometry.Numerics.Point2i,System.Int32,System.Int32)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point2i.Clamp(CGALDotNetGeometry.Numerics.Point2i,CGALDotNetGeometry.Numerics.Point2i,CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3d.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3d.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3d.UnitZ">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3d.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3d.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3d.Half">
            <summary>
            A point of 0.5.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3d.PositiveInfinity">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3d.NegativeInfinity">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3d.xzy">
            <summary>
            3D point to 3D swizzle point.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3d.xy">
            <summary>
            3D point to 2D point.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3d.xz">
            <summary>
            3D point to 2D point.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3d.zy">
            <summary>
            3D point to 2D point.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3d.xyz0">
            <summary>
            3D point to 4D point with w as 0.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3d.xyz1">
            <summary>
            3D point to 4D point with w as 1.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.#ctor(System.Double)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3d.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3d.IsFinite">
            <summary>
            Are all the components ofpoint finite.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3d.Finite">
            <summary>
            Make a point with no non finite conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3d.IsNAN">
            <summary>
            Are any of the points components nan.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3d.NoNAN">
            <summary>
            Make a point with no nan conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3d.Homogenous">
            <summary>
            Point as a homogenous point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.ToHomogenous(System.Double)">
            <summary>
            Point as a homogenous point.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3d.Sum">
            <summary>
            The sum of the points components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3d.Product">
            <summary>
            The product of the points components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3d.Absolute">
            <summary>
            The points absolute values.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3d.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3d.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_Addition(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Add two point and vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_Addition(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_Addition(CGALDotNetGeometry.Numerics.Point3d,System.Double)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_Addition(System.Double,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_UnaryNegation(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_Subtraction(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_Subtraction(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Subtract a point and a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_Subtraction(CGALDotNetGeometry.Numerics.Point3d,System.Double)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_Subtraction(System.Double,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_Multiply(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_Multiply(CGALDotNetGeometry.Numerics.Point3d,System.Double)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_Multiply(System.Double,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_Division(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_Division(System.Double,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Divide a scalar and a point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_Division(CGALDotNetGeometry.Numerics.Point3d,System.Double)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_Implicit(CGALDotNetGeometry.Numerics.Point3f)~CGALDotNetGeometry.Numerics.Point3d">
            <summary>
            Cast from Point3f to Point3d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_Implicit(CGALDotNetGeometry.Numerics.Point3i)~CGALDotNetGeometry.Numerics.Point3d">
            <summary>
            Cast from Point3i to Point3d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_Implicit(CGALDotNetGeometry.Numerics.Vector3f)~CGALDotNetGeometry.Numerics.Point3d">
            <summary>
            Cast from Vector3f to Point3d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_Implicit(CGALDotNetGeometry.Numerics.Vector3d)~CGALDotNetGeometry.Numerics.Point3d">
            <summary>
            Cast from Vector3d to Point3d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_Equality(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.op_Inequality(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.Equals(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.AlmostEqual(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,System.Double)">
            <summary>
            Are these points equal given the error.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.Distance(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Distance between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.SqrDistance(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Square distance between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.Direction(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,System.Boolean)">
            <summary>
            Direction between two points.
            </summary>
            <param name="v0">The first point.</param>
            <param name="v1">The second point.</param>
            <param name="normalize">Should the vector be normalized.</param>
            <returns>The vector from v0 to v1.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.Min(CGALDotNetGeometry.Numerics.Point3d,System.Double)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.Min(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.Max(CGALDotNetGeometry.Numerics.Point3d,System.Double)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.Max(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.Clamp(CGALDotNetGeometry.Numerics.Point3d,System.Double,System.Double)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.Clamp(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.Lerp(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,System.Double)">
            <summary>
            Lerp between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.BLerp(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,System.Double,System.Double)">
            <summary>
            BLerp between four points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded point</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.Round(System.Int32)">
            <summary>
            Round the point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.Floor">
            <summary>
            Floor each component if point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.Ceilling">
            <summary>
            Ceilling each component if point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3d.RandomPoints(System.Int32,System.Int32,CGALDotNetGeometry.Shapes.Box3d)">
            <summary>
            Create a array of random points.
            </summary>
            <param name="seed">The seed</param>
            <param name="count">The number of points to create.</param>
            <param name="range">The range of the points.</param>
            <returns>The point array.</returns>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3f.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3f.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3f.UnitZ">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3f.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3f.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3f.Half">
            <summary>
            A point of 0.5.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3f.PositiveInfinity">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3f.NegativeInfinity">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3f.xzy">
            <summary>
            3D point to 3D swizzle point.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3f.xy">
            <summary>
            3D point to 2D point.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3f.xz">
            <summary>
            3D point to 2D point.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3f.zy">
            <summary>
            3D point to 2D point.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3f.xyz0">
            <summary>
            3D point to 4D point with w as 0.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3f.xyz1">
            <summary>
            3D point to 4D point with w as 1.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.#ctor(System.Single)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3f.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3f.IsFinite">
            <summary>
            Are all the components ofpoint finite.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3f.Finite">
            <summary>
            Make a point with no non finite conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3f.IsNAN">
            <summary>
            Are any of the points components nan.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3f.NoNAN">
            <summary>
            Make a point with no nan conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3f.Sum">
            <summary>
            The sum of the points components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3f.Product">
            <summary>
            The product of the points components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3f.Absolute">
            <summary>
            The points absolute values.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3f.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3f.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_Addition(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Add two point and vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_Addition(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_Addition(CGALDotNetGeometry.Numerics.Point3f,System.Single)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_Addition(System.Single,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_UnaryNegation(CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_Subtraction(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_Subtraction(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Subtract a point and a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_Subtraction(CGALDotNetGeometry.Numerics.Point3f,System.Single)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_Subtraction(System.Single,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_Multiply(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_Multiply(CGALDotNetGeometry.Numerics.Point3f,System.Single)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_Multiply(System.Single,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_Division(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_Division(CGALDotNetGeometry.Numerics.Point3f,System.Single)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_Division(System.Single,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Divide a scalar and a point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_Explicit(CGALDotNetGeometry.Numerics.Point3d)~CGALDotNetGeometry.Numerics.Point3f">
            <summary>
            Cast from Point3d to Point3f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_Implicit(CGALDotNetGeometry.Numerics.Point3i)~CGALDotNetGeometry.Numerics.Point3f">
            <summary>
            Cast from Point3i to Point3f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_Explicit(CGALDotNetGeometry.Numerics.Vector3d)~CGALDotNetGeometry.Numerics.Point3f">
            <summary>
            Cast from Vector3d to Point3f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_Implicit(CGALDotNetGeometry.Numerics.Vector3f)~CGALDotNetGeometry.Numerics.Point3f">
            <summary>
            Cast from Vector3f to Point3f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_Equality(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.op_Inequality(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.Equals(CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.AlmostEqual(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f,System.Single)">
            <summary>
            Are these points equal given the error.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.Distance(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Distance between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.SqrDistance(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Square distance between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.Direction(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f,System.Boolean)">
            <summary>
            Direction between two points.
            </summary>
            <param name="v0">The first point.</param>
            <param name="v1">The second point.</param>
            <param name="normalize">Should the vector be normalized.</param>
            <returns>The vector from v0 to v1.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.Min(CGALDotNetGeometry.Numerics.Point3f,System.Single)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.Min(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.Max(CGALDotNetGeometry.Numerics.Point3f,System.Single)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.Max(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.Clamp(CGALDotNetGeometry.Numerics.Point3f,System.Single,System.Single)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.Clamp(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.Lerp(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f,System.Single)">
            <summary>
            Lerp between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.BLerp(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f,System.Single,System.Single)">
            <summary>
            BLerp between four points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded point</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.Round(System.Int32)">
            <summary>
            Round the point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.Floor">
            <summary>
            Floor each component if point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.Ceilling">
            <summary>
            Ceilling each component if point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3f.RandomPoints(System.Int32,System.Int32,CGALDotNetGeometry.Shapes.Box3f)">
            <summary>
            Create a array of random points.
            </summary>
            <param name="seed">The seed</param>
            <param name="count">The number of points to create.</param>
            <param name="range">The range of the points.</param>
            <returns>The point array.</returns>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3i.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3i.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3i.UnitZ">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3i.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3i.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3i.MaxValue">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point3i.MinValue">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3i.xzy">
            <summary>
            3D point to 3D swizzle point.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3i.xy">
            <summary>
            3D point to 2D point.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3i.xz">
            <summary>
            3D point to 2D point.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3i.xyz0">
            <summary>
            3D point to 4D point with w as 0.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3i.xyz1">
            <summary>
            3D point to 4D point with w as 1.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.#ctor(System.Int32)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3i.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3i.Sum">
            <summary>
            The sum of the points components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3i.Product">
            <summary>
            The product of the points components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3i.Absolute">
            <summary>
            The points absolute values.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point3i.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.op_Addition(CGALDotNetGeometry.Numerics.Point3i,CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.op_Addition(CGALDotNetGeometry.Numerics.Point3i,System.Int32)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.op_Addition(System.Int32,CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.op_UnaryNegation(CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.op_Subtraction(CGALDotNetGeometry.Numerics.Point3i,CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.op_Subtraction(CGALDotNetGeometry.Numerics.Point3i,System.Int32)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.op_Subtraction(System.Int32,CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.op_Multiply(CGALDotNetGeometry.Numerics.Point3i,CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.op_Multiply(CGALDotNetGeometry.Numerics.Point3i,System.Int32)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.op_Multiply(System.Int32,CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.op_Division(CGALDotNetGeometry.Numerics.Point3i,CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.op_Division(CGALDotNetGeometry.Numerics.Point3i,System.Int32)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.op_Division(System.Int32,CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            Divide a scalar and a point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.op_Explicit(CGALDotNetGeometry.Numerics.Point3f)~CGALDotNetGeometry.Numerics.Point3i">
            <summary>
            Cast from Point3f to Point3i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.op_Explicit(CGALDotNetGeometry.Numerics.Point3d)~CGALDotNetGeometry.Numerics.Point3i">
            <summary>
            Cast from Point3d to Point3i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.op_Explicit(CGALDotNetGeometry.Numerics.Vector3f)~CGALDotNetGeometry.Numerics.Point3i">
            <summary>
            Cast from Vector3f to Point3i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.op_Explicit(CGALDotNetGeometry.Numerics.Vector3d)~CGALDotNetGeometry.Numerics.Point3i">
            <summary>
            Cast from Vector3d to Point3i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.op_Equality(CGALDotNetGeometry.Numerics.Point3i,CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.op_Inequality(CGALDotNetGeometry.Numerics.Point3i,CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.Equals(CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.Distance(CGALDotNetGeometry.Numerics.Point3i,CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            Distance between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.SqrDistance(CGALDotNetGeometry.Numerics.Point3i,CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            Square distance between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.Min(CGALDotNetGeometry.Numerics.Point3i,System.Int32)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.Min(CGALDotNetGeometry.Numerics.Point3i,CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.Max(CGALDotNetGeometry.Numerics.Point3i,System.Int32)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.Max(CGALDotNetGeometry.Numerics.Point3i,CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.Clamp(CGALDotNetGeometry.Numerics.Point3i,System.Int32,System.Int32)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point3i.Clamp(CGALDotNetGeometry.Numerics.Point3i,CGALDotNetGeometry.Numerics.Point3i,CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4d.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4d.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4d.UnitZ">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4d.UnitW">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4d.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4d.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4d.Half">
            <summary>
            A point of 0.5.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4d.PositiveInfinity">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4d.NegativeInfinity">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4d.xy">
            <summary>
            4D point to 2D point.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4d.xyz">
            <summary>
            4D point to 3D point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.#ctor(System.Double)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4d.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4d.IsFinite">
            <summary>
            Are all the components ofpoint finite.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4d.Finite">
            <summary>
            Make a point with no non finite conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4d.IsNAN">
            <summary>
            Are any of the points components nan.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4d.NoNAN">
            <summary>
            Make a point with no nan conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4d.Sum">
            <summary>
            The sum of the points components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4d.Product">
            <summary>
            The product of the points components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4d.Absolute">
            <summary>
            The points absolute values.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4d.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4d.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_Addition(CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Point4d)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_Addition(CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            Add a point and a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_Addition(CGALDotNetGeometry.Numerics.Point4d,System.Double)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_Addition(System.Double,CGALDotNetGeometry.Numerics.Point4d)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_UnaryNegation(CGALDotNetGeometry.Numerics.Point4d)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_Subtraction(CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Point4d)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_Subtraction(CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            Add a point and a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_Subtraction(CGALDotNetGeometry.Numerics.Point4d,System.Double)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_Subtraction(System.Double,CGALDotNetGeometry.Numerics.Point4d)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_Multiply(CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Point4d)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_Multiply(CGALDotNetGeometry.Numerics.Point4d,System.Double)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_Multiply(System.Double,CGALDotNetGeometry.Numerics.Point4d)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_Division(CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Point4d)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_Division(CGALDotNetGeometry.Numerics.Point4d,System.Double)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_Division(System.Double,CGALDotNetGeometry.Numerics.Point4d)">
            <summary>
            Divide a scalar and a point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_Implicit(CGALDotNetGeometry.Numerics.Point4f)~CGALDotNetGeometry.Numerics.Point4d">
            <summary>
            Cast from Point4f to Point4d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_Implicit(CGALDotNetGeometry.Numerics.Point4i)~CGALDotNetGeometry.Numerics.Point4d">
            <summary>
            Cast from Point4i to Point4d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_Implicit(CGALDotNetGeometry.Numerics.Vector4f)~CGALDotNetGeometry.Numerics.Point4d">
            <summary>
            Cast from Vector4f to Point4d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_Implicit(CGALDotNetGeometry.Numerics.Vector4d)~CGALDotNetGeometry.Numerics.Point4d">
            <summary>
            Cast from Vector4d to Point4d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_Equality(CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Point4d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.op_Inequality(CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Point4d)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.Equals(CGALDotNetGeometry.Numerics.Point4d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.AlmostEqual(CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Point4d,System.Double)">
            <summary>
            Are these points equal given the error.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.Distance(CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Point4d)">
            <summary>
            Distance between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.SqrDistance(CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Point4d)">
            <summary>
            Square distance between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.Direction(CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Point4d,System.Boolean)">
            <summary>
            Direction between two points.
            </summary>
            <param name="v0">The first point.</param>
            <param name="v1">The second point.</param>
            <param name="normalize">Should the vector be normalized.</param>
            <returns>The vector from v0 to v1.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.Min(CGALDotNetGeometry.Numerics.Point4d,System.Double)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.Min(CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Point4d)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.Max(CGALDotNetGeometry.Numerics.Point4d,System.Double)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.Max(CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Point4d)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.Clamp(CGALDotNetGeometry.Numerics.Point4d,System.Double,System.Double)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.Clamp(CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Point4d)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.Lerp(CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Point4d,System.Double)">
            <summary>
            Lerp between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.BLerp(CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Point4d,System.Double,System.Double)">
            <summary>
            BLerp between four points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded point</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.Round(System.Int32)">
            <summary>
            Round the point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.Floor">
            <summary>
            Floor each component if point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4d.Ceilling">
            <summary>
            Ceilling each component if point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4f.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4f.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4f.UnitZ">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4f.UnitW">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4f.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4f.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4f.Half">
            <summary>
            A point of 0.5.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4f.PositiveInfinity">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4f.NegativeInfinity">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4f.xy">
            <summary>
            4D point to 2D point.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4f.xyz">
            <summary>
            4D point to 3D point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.#ctor(System.Single)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4f.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4f.IsFinite">
            <summary>
            Are all the components of point finite.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4f.Finite">
            <summary>
            Make a point with no non finite conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4f.IsNAN">
            <summary>
            Are any of the points components nan.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4f.NoNAN">
            <summary>
            Make a point with no nan conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4f.Sum">
            <summary>
            The sum of the points components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4f.Product">
            <summary>
            The product of the points components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4f.Absolute">
            <summary>
            The points absolute values.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4f.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4f.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_Addition(CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Point4f)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_Addition(CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            Add a point and a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_Addition(CGALDotNetGeometry.Numerics.Point4f,System.Single)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_Addition(System.Single,CGALDotNetGeometry.Numerics.Point4f)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_UnaryNegation(CGALDotNetGeometry.Numerics.Point4f)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_Subtraction(CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Point4f)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_Subtraction(CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            Subtract a point and a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_Subtraction(CGALDotNetGeometry.Numerics.Point4f,System.Single)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_Subtraction(System.Single,CGALDotNetGeometry.Numerics.Point4f)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_Multiply(CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Point4f)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_Multiply(CGALDotNetGeometry.Numerics.Point4f,System.Single)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_Multiply(System.Single,CGALDotNetGeometry.Numerics.Point4f)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_Division(CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Point4f)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_Division(CGALDotNetGeometry.Numerics.Point4f,System.Single)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_Division(System.Single,CGALDotNetGeometry.Numerics.Point4f)">
            <summary>
            Divide a scalar and a point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_Explicit(CGALDotNetGeometry.Numerics.Point4d)~CGALDotNetGeometry.Numerics.Point4f">
            <summary>
            Cast from Point4d to Point4f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_Implicit(CGALDotNetGeometry.Numerics.Point4i)~CGALDotNetGeometry.Numerics.Point4f">
            <summary>
            Cast from Point4i to Point4f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_Implicit(CGALDotNetGeometry.Numerics.Vector4f)~CGALDotNetGeometry.Numerics.Point4f">
            <summary>
            Cast from Vector4f to Point4f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_Explicit(CGALDotNetGeometry.Numerics.Vector4d)~CGALDotNetGeometry.Numerics.Point4f">
            <summary>
            Cast from Vector4d to Point4f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_Equality(CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Point4f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.op_Inequality(CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Point4f)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.Equals(CGALDotNetGeometry.Numerics.Point4f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.AlmostEqual(CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Point4f,System.Single)">
            <summary>
            Are these points equal given the error.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.GetHashCode">
            <summary>
            Points hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.ToString">
            <summary>
            Point as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.ToString(System.String)">
            <summary>
            Point as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.Distance(CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Point4f)">
            <summary>
            Distance between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.SqrDistance(CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Point4f)">
            <summary>
            Square distance between two points.
            </summary>]
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.Direction(CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Point4f,System.Boolean)">
            <summary>
            Direction between two points.
            </summary>
            <param name="v0">The first point.</param>
            <param name="v1">The second point.</param>
            <param name="normalize">Should the vector be normalized.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.Min(CGALDotNetGeometry.Numerics.Point4f,System.Single)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.Min(CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Point4f)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.Max(CGALDotNetGeometry.Numerics.Point4f,System.Single)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.Max(CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Point4f)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.Clamp(CGALDotNetGeometry.Numerics.Point4f,System.Single,System.Single)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.Clamp(CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Point4f)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.Lerp(CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Point4f,System.Single)">
            <summary>
            Lerp between two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.BLerp(CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Point4f,System.Single,System.Single)">
            <summary>
            BLerp between four points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded point</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.Round(System.Int32)">
            <summary>
            Round the point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.Floor">
            <summary>
            Floor each component if point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4f.Ceilling">
            <summary>
            Ceilling each component if point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4i.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4i.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4i.UnitZ">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4i.UnitW">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4i.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4i.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4i.MaxValue">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Point4i.MinValue">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4i.xy">
            <summary>
            4D point to 2D point.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4i.xyz">
            <summary>
            4D point to 3D point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.#ctor(System.Int32)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4i.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4i.Sum">
            <summary>
            The sum of the points components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4i.Product">
            <summary>
            The product of the points components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4i.Absolute">
            <summary>
            The points absolute values.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Point4i.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.op_Addition(CGALDotNetGeometry.Numerics.Point4i,CGALDotNetGeometry.Numerics.Point4i)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.op_Addition(CGALDotNetGeometry.Numerics.Point4i,System.Int32)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.op_Addition(System.Int32,CGALDotNetGeometry.Numerics.Point4i)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.op_UnaryNegation(CGALDotNetGeometry.Numerics.Point4i)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.op_Subtraction(CGALDotNetGeometry.Numerics.Point4i,CGALDotNetGeometry.Numerics.Point4i)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.op_Subtraction(CGALDotNetGeometry.Numerics.Point4i,System.Int32)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.op_Subtraction(System.Int32,CGALDotNetGeometry.Numerics.Point4i)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.op_Multiply(CGALDotNetGeometry.Numerics.Point4i,CGALDotNetGeometry.Numerics.Point4i)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.op_Multiply(CGALDotNetGeometry.Numerics.Point4i,System.Int32)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.op_Multiply(System.Int32,CGALDotNetGeometry.Numerics.Point4i)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.op_Division(CGALDotNetGeometry.Numerics.Point4i,CGALDotNetGeometry.Numerics.Point4i)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.op_Division(CGALDotNetGeometry.Numerics.Point4i,System.Int32)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.op_Division(System.Int32,CGALDotNetGeometry.Numerics.Point4i)">
            <summary>
            Divide a scalar and a point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.op_Explicit(CGALDotNetGeometry.Numerics.Point4f)~CGALDotNetGeometry.Numerics.Point4i">
            <summary>
            Cast from Point4f to Point4i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.op_Explicit(CGALDotNetGeometry.Numerics.Point4d)~CGALDotNetGeometry.Numerics.Point4i">
            <summary>
            Cast from Point4d to Point4i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.op_Explicit(CGALDotNetGeometry.Numerics.Vector4f)~CGALDotNetGeometry.Numerics.Point4i">
            <summary>
            Cast from Vector4f to Point4i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.op_Explicit(CGALDotNetGeometry.Numerics.Vector4d)~CGALDotNetGeometry.Numerics.Point4i">
            <summary>
            Cast from Vector4d to Point4i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.op_Equality(CGALDotNetGeometry.Numerics.Point4i,CGALDotNetGeometry.Numerics.Point4i)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.op_Inequality(CGALDotNetGeometry.Numerics.Point4i,CGALDotNetGeometry.Numerics.Point4i)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.Equals(CGALDotNetGeometry.Numerics.Point4i)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.Min(CGALDotNetGeometry.Numerics.Point4i,System.Int32)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.Min(CGALDotNetGeometry.Numerics.Point4i,CGALDotNetGeometry.Numerics.Point4i)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.Max(CGALDotNetGeometry.Numerics.Point4i,System.Int32)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.Max(CGALDotNetGeometry.Numerics.Point4i,CGALDotNetGeometry.Numerics.Point4i)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.Clamp(CGALDotNetGeometry.Numerics.Point4i,System.Int32,System.Int32)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Point4i.Clamp(CGALDotNetGeometry.Numerics.Point4i,CGALDotNetGeometry.Numerics.Point4i,CGALDotNetGeometry.Numerics.Point4i)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A Quaternion from varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Quaternion3d.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Quaternion3d.Conjugate">
            <summary>
            Returns the conjugate of a quaternion value.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Quaternion3d.Inverse">
            <summary>
            The inverse of the quaternion.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Quaternion3d.Magnitude">
            <summary>
            The length of the quaternion.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Quaternion3d.SqrMagnitude">
            <summary>
            The sqr length of the quaternion.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Quaternion3d.Normalized">
            <summary>
            The a normalized quaternion.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.op_Subtraction(CGALDotNetGeometry.Numerics.Quaternion3d,System.Double)">
            <summary>
            Subtract a quaternion and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.op_UnaryNegation(CGALDotNetGeometry.Numerics.Quaternion3d)">
            <summary>
            Negate a quaternion.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.op_Subtraction(CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Quaternion3d)">
            <summary>
            Subtract two quaternions.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.op_Addition(CGALDotNetGeometry.Numerics.Quaternion3d,System.Double)">
            <summary>
            Add a quaternion and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.op_Addition(CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Quaternion3d)">
            <summary>
            Add two quaternions.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.op_Multiply(CGALDotNetGeometry.Numerics.Quaternion3d,System.Double)">
            <summary>
            Multiply a quaternion and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.op_Division(CGALDotNetGeometry.Numerics.Quaternion3d,System.Double)">
            <summary>
            Divide a quaternion and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.op_Multiply(CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Quaternion3d)">
            <summary>
            Multiply two quternions together.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.op_Multiply(CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Multiply a quaternion and a vector together.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.op_Multiply(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Quaternion3d)">
            <summary>
            Multiply a quaternion and a vector together.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.op_Equality(CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Quaternion3d)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.op_Inequality(CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Quaternion3d)">
            <summary>
            Are these Quaternions not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.Equals(CGALDotNetGeometry.Numerics.Quaternion3d)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.Equals(System.Object)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.GetHashCode">
            <summary>
            Quaternions hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.ToString">
            <summary>
            Quaternion as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.ToString(System.String)">
            <summary>
            Quaternion as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.ToMatrix3x3d">
            <summary>
            Convert to a single precision 3 dimension matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.ToMatrix4x4d">
            <summary>
            Convert to a single precision 4 dimension matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.FromMatrix(CGALDotNetGeometry.Numerics.Matrix4x4d)">
            <summary>
            Extract the rotation from a matrix.
            </summary>
            <param name="m"></param>
            <returns>The rotation as a quaternion from the matrix.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.Normalize">
            <summary>
            The normalize the quaternion.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.Dot(CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Quaternion3d)">
            <summary>
            The dot product of two quaternion..
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.FromEuler(CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Create a rotation out of a vector.
            Uses Unity euler axis (+x right, +y up, +z forward)
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.RotateX(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Returns a 4x4 matrix that rotates around the x-axis by a given number of degrees.
            </summary>
            <param name="radian">
            The clockwise rotation angle when looking along the x-axis towards the origin in degrees.
            </param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.RotateY(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Returns a 4x4 matrix that rotates around the y-axis by a given number of degrees.
            </summary>
            <param name="radian">
            The clockwise rotation angle when looking along the y-axis towards the origin in degrees.
            </param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.RotateZ(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Returns a 4x4 matrix that rotates around the z-axis by a given number of degrees.
            </summary>
            <param name="radian">
            The clockwise rotation angle when looking along the z-axis towards the origin in degrees.
            </param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.Rotate(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            A Quaternion from a vector axis and angle.
            The axis is the up direction and the angle is the rotation.
            </summary>
            <param name="axis">The up axis.</param>
            <param name="radian">The amount to rotate in radians.</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.Slerp(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            A quaternion with the rotation required to
            rotation from the from direction to the to direction.
            </summary>
            <param name="from">The vector to start from.</param>
            <param name="to">The vector to slerp to.</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3d.Slerp(CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Quaternion3d,System.Double)">
            <summary>
            Slerp the quaternion from the from rotation to the to rotation by t.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A Quaternion from varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A Quaternion from varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Quaternion3f.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Quaternion3f.Conjugate">
            <summary>
            Returns the conjugate of a quaternion value.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Quaternion3f.Inverse">
            <summary>
            The inverse of the quaternion.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Quaternion3f.Magnitude">
            <summary>
            The length of the quaternion.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Quaternion3f.SqrMagnitude">
            <summary>
            The sqr length of the quaternion.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Quaternion3f.Normalized">
            <summary>
            The a normalized quaternion.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.op_Subtraction(CGALDotNetGeometry.Numerics.Quaternion3f,System.Single)">
            <summary>
            Subtract a quaternion and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.op_Subtraction(CGALDotNetGeometry.Numerics.Quaternion3f,CGALDotNetGeometry.Numerics.Quaternion3f)">
            <summary>
            Subtract two quaternions.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.op_UnaryNegation(CGALDotNetGeometry.Numerics.Quaternion3f)">
            <summary>
            Negate a quaternion.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.op_Addition(CGALDotNetGeometry.Numerics.Quaternion3f,System.Single)">
            <summary>
            Add a quaternion and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.op_Addition(CGALDotNetGeometry.Numerics.Quaternion3f,CGALDotNetGeometry.Numerics.Quaternion3f)">
            <summary>
            Add two quaternions.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.op_Multiply(CGALDotNetGeometry.Numerics.Quaternion3f,System.Single)">
            <summary>
            Multiply a quaternion and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.op_Division(CGALDotNetGeometry.Numerics.Quaternion3f,System.Single)">
            <summary>
            Divide a quaternion and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.op_Multiply(CGALDotNetGeometry.Numerics.Quaternion3f,CGALDotNetGeometry.Numerics.Quaternion3f)">
            <summary>
            Multiply two quaternions together.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.op_Multiply(CGALDotNetGeometry.Numerics.Quaternion3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Multiply a quaternion and a vector together.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.op_Multiply(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Quaternion3f)">
            <summary>
            Multiply a quaternion and a vector together.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.op_Equality(CGALDotNetGeometry.Numerics.Quaternion3f,CGALDotNetGeometry.Numerics.Quaternion3f)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.op_Inequality(CGALDotNetGeometry.Numerics.Quaternion3f,CGALDotNetGeometry.Numerics.Quaternion3f)">
            <summary>
            Are these Quaternions not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.Equals(CGALDotNetGeometry.Numerics.Quaternion3f)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.Equals(System.Object)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.GetHashCode">
            <summary>
            Quaternions hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.ToString">
            <summary>
            Quaternion as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.ToString(System.String)">
            <summary>
            Quaternion as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.ToMatrix3x3f">
            <summary>
            Convert to a single precision 3 dimension matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.ToMatrix4x4f">
            <summary>
            Convert to a single precision 4 dimension matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.FromMatrix(CGALDotNetGeometry.Numerics.Matrix4x4f)">
            <summary>
            Extract the rotation from a matrix.
            </summary>
            <param name="m"></param>
            <returns>The rotation as a quaternion from the matrix.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.Normalize">
            <summary>
            The normalize the quaternion.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.Dot(CGALDotNetGeometry.Numerics.Quaternion3f,CGALDotNetGeometry.Numerics.Quaternion3f)">
            <summary>
            The dot product of two quaternion..
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.FromEuler(CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Create a rotation out of a vector.
            Uses Unity euler axis (+x right, +y up, +z forward)
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.RotateX(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Returns a 4x4 matrix that rotates around the x-axis by a given number of degrees.
            </summary>
            <param name="radian">
            The clockwise rotation angle when looking along the x-axis towards the origin in degrees.
            </param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.RotateY(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Returns a 4x4 matrix that rotates around the y-axis by a given number of degrees.
            </summary>
            <param name="radian">
            The clockwise rotation angle when looking along the y-axis towards the origin in degrees.
            </param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.RotateZ(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Returns a 4x4 matrix that rotates around the z-axis by a given number of degrees.
            </summary>
            <param name="radian">
            The clockwise rotation angle when looking along the z-axis towards the origin in degrees.
            </param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.Rotate(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            A Quaternion from a vector axis and angle.
            The axis is the up direction and the angle is the rotation.
            </summary>
            <param name="axis">The up axis.</param>
            <param name="radian">The amount to rotate in radians.</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.Slerp(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            A quaternion with the rotation required to
            rotation from the from direction to the to direction.
            </summary>
            <param name="from">The vector to start from.</param>
            <param name="to">The vector to slerp to.</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Quaternion3f.Slerp(CGALDotNetGeometry.Numerics.Quaternion3f,CGALDotNetGeometry.Numerics.Quaternion3f,System.Single)">
            <summary>
            Slerp the quaternion from the from rotation to the to rotation by t.
            </summary>
        </member>
        <member name="T:CGALDotNetGeometry.Numerics.Radian">
            <summary>
            Represents a angle in degrees.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Radian.angle">
            <summary>
            The angle in radians.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Radian.degree">
            <summary>
            The radian angle in degees.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Radian.PI">
            <summary>
            Pi.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Radian.A0">
            <summary>
            0 degrees.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Radian.A45">
            <summary>
            90 degrees.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Radian.A90">
            <summary>
            90 degrees.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Radian.A180">
            <summary>
            180 degrees.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Radian.A270">
            <summary>
            270 degrees.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Radian.A360">
            <summary>
            360 degrees.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.#ctor(System.Double)">
            <summary>
            Create a new radian from a value.
            </summary>
            <param name="angle">The angle in radians.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_Addition(CGALDotNetGeometry.Numerics.Radian,CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Add two angles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_Addition(CGALDotNetGeometry.Numerics.Radian,System.Double)">
            <summary>
            Add angle and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_UnaryNegation(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Negate the angle.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_Addition(System.Double,CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Add angle and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_Subtraction(CGALDotNetGeometry.Numerics.Radian,CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Subtract two angles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_Subtraction(CGALDotNetGeometry.Numerics.Radian,System.Double)">
            <summary>
            Subtract angle and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_Subtraction(System.Double,CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Subtract angle and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_Multiply(CGALDotNetGeometry.Numerics.Radian,CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Multiply two angles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_Multiply(CGALDotNetGeometry.Numerics.Radian,System.Double)">
            <summary>
            Multiply a angle and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_LessThan(CGALDotNetGeometry.Numerics.Radian,System.Double)">
            <summary>
            Is the radian less than the scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_LessThanOrEqual(CGALDotNetGeometry.Numerics.Radian,System.Double)">
            <summary>
            Is the radian less than or equal to the scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_GreaterThan(CGALDotNetGeometry.Numerics.Radian,System.Double)">
            <summary>
            Is the radian greater than the scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_GreaterThanOrEqual(CGALDotNetGeometry.Numerics.Radian,System.Double)">
            <summary>
            Is the radian greater than or equal to the scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_LessThan(CGALDotNetGeometry.Numerics.Radian,CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Is the radian less than the other radian.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_LessThanOrEqual(CGALDotNetGeometry.Numerics.Radian,CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Is the radian less than or equal to the other radian.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_GreaterThan(CGALDotNetGeometry.Numerics.Radian,CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Is the radian greater than the other radian.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_GreaterThanOrEqual(CGALDotNetGeometry.Numerics.Radian,CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Is the radian greater than or equal to the other radian.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_Multiply(System.Double,CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Multiply a angle and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_Implicit(CGALDotNetGeometry.Numerics.Degree)~CGALDotNetGeometry.Numerics.Radian">
            <summary>
            Cast from a degrees to radians.
            </summary>
            <param name="v">The angle in radians.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_Equality(CGALDotNetGeometry.Numerics.Radian,CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Are these angles equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.op_Inequality(CGALDotNetGeometry.Numerics.Radian,CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Are these angles not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.Equals(System.Object)">
            <summary>
            Are these angles equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.Equals(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Are these angles equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.GetHashCode">
            <summary>
            Angles hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.ToString">
            <summary>
            Angles as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.ToString(System.String)">
            <summary>
            Angles as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Radian.Rounded(System.Int32)">
            <summary>
            A rounded angle.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded angle</returns>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector2d.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector2d.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector2d.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector2d.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector2d.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector2d.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector2d.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2d.x0y">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2d.xy0">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2d.xy01">
            <summary>
            Convert to a 4 dimension vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2d.x0y1">
            <summary>
            Convert to a 4 dimension vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.#ctor(System.Double)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.#ctor(System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2d.IsFinite">
            <summary>
            Are all the components of vector finite.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2d.Finite">
            <summary>
            Make a vector with no non finite conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2d.IsNAN">
            <summary>
            Are any of the vectors components nan.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2d.NoNAN">
            <summary>
            Make a vector with no nan conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2d.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2d.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2d.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2d.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2d.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2d.PerpendicularCCW">
            <summary>
            Counter clock-wise perpendicular.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2d.PerpendicularCW">
            <summary>
            Clock-wise perpendicular.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2d.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.op_Addition(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.op_Addition(CGALDotNetGeometry.Numerics.Vector2d,System.Double)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.op_Addition(System.Double,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.op_UnaryNegation(CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.op_Subtraction(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.op_Subtraction(CGALDotNetGeometry.Numerics.Vector2d,System.Double)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.op_Subtraction(System.Double,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.op_Multiply(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.op_Multiply(CGALDotNetGeometry.Numerics.Vector2d,System.Double)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.op_Multiply(System.Double,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.op_Division(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.op_Division(CGALDotNetGeometry.Numerics.Vector2d,System.Double)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.op_Division(System.Double,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Divide a scalar and a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.op_Implicit(CGALDotNetGeometry.Numerics.Vector2f)~CGALDotNetGeometry.Numerics.Vector2d">
            <summary>
            Cast from Vector2f to Vector2f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.op_Implicit(CGALDotNetGeometry.Numerics.Point2f)~CGALDotNetGeometry.Numerics.Vector2d">
            <summary>
            Cast from Point2f to Vector2f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.op_Implicit(CGALDotNetGeometry.Numerics.Point2d)~CGALDotNetGeometry.Numerics.Vector2d">
            <summary>
            Cast from Point2d to Vector2f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.op_Equality(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.op_Inequality(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.AlmostEqual(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d,System.Double)">
            <summary>
            Are these vectors equal given the error.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Equals(CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.CompareTo(CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Dot(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Dot(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            The dot product of vector and point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Dot(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            The dot product of two pointss.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.AbsDot(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Cross(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Project(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Project vector v onto u.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Reflect(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Given an incident vector i and a normal vector n.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Refract(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d,System.Single)">
            <summary>
            Returns the refraction vector given the incident vector i, 
            the normal vector n and the refraction index eta.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Angle180(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Angle between two vectors in degrees from 0 to 180.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Angle360(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Angle between two vectors in degrees from 0 to 360.
            Angle represents moving ccw from a to b.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Min(CGALDotNetGeometry.Numerics.Vector2d,System.Double)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Min(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Max(CGALDotNetGeometry.Numerics.Vector2d,System.Double)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Max(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Clamp(CGALDotNetGeometry.Numerics.Vector2d,System.Double,System.Double)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Clamp(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Lerp(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d,System.Double)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.BLerp(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d,System.Double,System.Double)">
            <summary>
            BLerp between four vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Slerp(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d,System.Double)">
            <summary>
            Slerp between two vectors arc.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Rounded(System.Int32)">
            <summary>
            Round vector.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Round(System.Int32)">
            <summary>
            Round the vector.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Floor">
            <summary>
            Floor each component of vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2d.Ceilling">
            <summary>
            Ceilling each component of vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector2f.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector2f.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector2f.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector2f.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector2f.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector2f.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector2f.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2f.x0y">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2f.xy0">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2f.xy01">
            <summary>
            Convert to a 4 dimension vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2f.x0y1">
            <summary>
            Convert to a 4 dimension vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.#ctor(System.Single)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.#ctor(System.Single,System.Single)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.#ctor(System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2f.IsFinite">
            <summary>
            Are all the components of vector finite.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2f.Finite">
            <summary>
            Make a vector with no non finite conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2f.IsNAN">
            <summary>
            Are any of the vectors components nan.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2f.NoNAN">
            <summary>
            Make a vector with no nan conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2f.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2f.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2f.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2f.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2f.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2f.PerpendicularCCW">
            <summary>
            Counter clock-wise perpendicular.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2f.PerpendicularCW">
            <summary>
            Clock-wise perpendicular.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector2f.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.op_Addition(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.op_Addition(CGALDotNetGeometry.Numerics.Vector2f,System.Single)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.op_Addition(System.Single,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.op_UnaryNegation(CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.op_Subtraction(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.op_Subtraction(CGALDotNetGeometry.Numerics.Vector2f,System.Single)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.op_Subtraction(System.Single,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.op_Multiply(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.op_Multiply(CGALDotNetGeometry.Numerics.Vector2f,System.Single)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.op_Multiply(System.Single,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.op_Division(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.op_Division(CGALDotNetGeometry.Numerics.Vector2f,System.Single)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.op_Division(System.Single,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Divide a scalar and a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.op_Explicit(CGALDotNetGeometry.Numerics.Vector2d)~CGALDotNetGeometry.Numerics.Vector2f">
            <summary>
            Cast from Vector2f to Vector2f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.op_Explicit(CGALDotNetGeometry.Numerics.Point2d)~CGALDotNetGeometry.Numerics.Vector2f">
            <summary>
            Cast from Point2f to Vector2f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.op_Implicit(CGALDotNetGeometry.Numerics.Point2f)~CGALDotNetGeometry.Numerics.Vector2f">
            <summary>
            Cast from Point2f to Vector2f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.op_Equality(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.op_Inequality(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.AlmostEqual(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f,System.Single)">
            <summary>
            Are these vectors equal given the error.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Equals(CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.CompareTo(CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Dot(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Dot(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            The dot product of vector and point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Dot(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            The dot product of two pointss.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.AbsDot(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Cross(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Project(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Project vector v onto u.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Reflect(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Given an incident vector i and a normal vector n.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Refract(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f,System.Single)">
            <summary>
            Returns the refraction vector given the incident vector i, 
            the normal vector n and the refraction index eta.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Angle180(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Angle between two vectors in degrees from 0 to 180.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Angle360(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Angle between two vectors in degrees from 0 to 360.
            Angle represents moving ccw from a to b.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Min(CGALDotNetGeometry.Numerics.Vector2f,System.Single)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Min(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Max(CGALDotNetGeometry.Numerics.Vector2f,System.Single)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Max(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Clamp(CGALDotNetGeometry.Numerics.Vector2f,System.Single,System.Single)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Clamp(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Lerp(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f,System.Single)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.BLerp(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f,System.Single,System.Single)">
            <summary>
            BLerp between four vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Slerp(CGALDotNetGeometry.Numerics.Vector2f,CGALDotNetGeometry.Numerics.Vector2f,System.Single)">
            <summary>
            Slerp between two vectors arc.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Rounded(System.Int32)">
            <summary>
            Round vector.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Round(System.Int32)">
            <summary>
            Round the vector.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Floor">
            <summary>
            Floor each component of vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector2f.Ceilling">
            <summary>
            Ceilling each component of vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector3d.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector3d.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector3d.UnitZ">
            <summary>
            The unit z vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector3d.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector3d.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector3d.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector3d.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector3d.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3d.xzy">
            <summary>
            3D vector to 3D swizzle vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3d.xy">
            <summary>
            3D vector to 2D vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3d.xz">
            <summary>
            3D vector to 2D vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3d.zy">
            <summary>
            3D vector to 2D vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3d.xyz0">
            <summary>
            3D vector to 4D vector with w as 0.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3d.xyz1">
            <summary>
            3D vector to 4D vector with w as 1.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.#ctor(System.Double)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.#ctor(CGALDotNetGeometry.Numerics.Vector2d,System.Double)">
            <summary>
            A vector from a 2d vector and the z varible.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3d.IsFinite">
            <summary>
            Are all the components of vector finite.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3d.Finite">
            <summary>
            Make a vector with no non finite conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3d.IsNAN">
            <summary>
            Are any of the vectors components nan.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3d.NoNAN">
            <summary>
            Make a vector with no nan conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3d.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3d.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3d.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3d.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3d.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3d.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3d.TangentSpaceNormal">
            <summary>
            Convert a normalized vector to tangent space.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.op_Addition(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.op_Addition(CGALDotNetGeometry.Numerics.Vector3d,System.Double)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.op_Addition(System.Double,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.op_UnaryNegation(CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.op_Subtraction(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.op_Subtraction(CGALDotNetGeometry.Numerics.Vector3d,System.Double)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.op_Subtraction(System.Double,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.op_Multiply(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.op_Multiply(CGALDotNetGeometry.Numerics.Vector3d,System.Double)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.op_Multiply(System.Double,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.op_Division(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.op_Division(CGALDotNetGeometry.Numerics.Vector3d,System.Double)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.op_Division(System.Double,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Divide a scalar and a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.op_Implicit(CGALDotNetGeometry.Numerics.Vector3f)~CGALDotNetGeometry.Numerics.Vector3d">
            <summary>
            Cast from Vector3f to Vector3d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.op_Implicit(CGALDotNetGeometry.Numerics.Point3f)~CGALDotNetGeometry.Numerics.Vector3d">
            <summary>
            Cast from Point3f to Vector3d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.op_Implicit(CGALDotNetGeometry.Numerics.Point3d)~CGALDotNetGeometry.Numerics.Vector3d">
            <summary>
            Cast from Point3d to Vector3d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.op_Equality(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.op_Inequality(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.AlmostEqual(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d,System.Double)">
            <summary>
            Are these vectors equal given the error.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Equals(CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.CompareTo(CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Dot(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Dot(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            The dot product of vector and point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Dot(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            The dot product of two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.AbsDot(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Angle180(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Angle between two vectors in degrees from 0 to 180.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Cross(CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Cross(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Cross(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Cross a vector andpoint.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Cross(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Cross two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Project(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Project vector v onto u.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Reflect(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Given an incident vector i and a normal vector n.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Refract(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d,System.Double,CGALDotNetGeometry.Numerics.Vector3d@)">
            <summary>
            Returns the refraction vector given the incident vector i, 
            the normal vector n and the refraction index eta.
            </summary>
            <param name="i">The incident vector</param>
            <param name="n">The normal vector</param>
            <param name="eta">The refraction index</param>
            <param name="r">The reflected ray.</param>
            <returns>True if there is a solution.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Orthonormal(CGALDotNetGeometry.Numerics.Vector3d@,CGALDotNetGeometry.Numerics.Vector3d@,CGALDotNetGeometry.Numerics.Vector3d@)">
            <summary>
            Create a set of orthonormal vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Min(CGALDotNetGeometry.Numerics.Vector3d,System.Double)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Min(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Max(CGALDotNetGeometry.Numerics.Vector3d,System.Double)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Max(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Clamp(CGALDotNetGeometry.Numerics.Vector3d,System.Double,System.Double)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Clamp(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Lerp(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d,System.Double)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.BLerp(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d,System.Double,System.Double)">
            <summary>
            BLerp between four vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Slerp(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d,System.Double)">
            <summary>
            Slerp between two vectors arc.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Rounded(System.Int32)">
            <summary>
            Round vector.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Round(System.Int32)">
            <summary>
            Round the vector.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Floor">
            <summary>
            Floor each component of vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3d.Ceilling">
            <summary>
            Ceilling each component of vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector3f.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector3f.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector3f.UnitZ">
            <summary>
            The unit z vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector3f.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector3f.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector3f.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector3f.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector3f.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3f.xzy">
            <summary>
            3D vector to 3D swizzle vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3f.xy">
            <summary>
            3D vector to 2D vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3f.xz">
            <summary>
            3D vector to 2D vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3f.zy">
            <summary>
            3D vector to 2D vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3f.xyz0">
            <summary>
            3D vector to 4D vector with w as 0.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3f.xyz1">
            <summary>
            3D vector to 4D vector with w as 1.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.#ctor(System.Single)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.#ctor(CGALDotNetGeometry.Numerics.Vector2f,System.Single)">
            <summary>
            A vector from a 2f vector and the z varible.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3f.IsFinite">
            <summary>
            Are all the components of vector finite.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3f.Finite">
            <summary>
            Make a vector with no non finite conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3f.IsNAN">
            <summary>
            Are any of the vectors components nan.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3f.NoNAN">
            <summary>
            Make a vector with no nan conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3f.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3f.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3f.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3f.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3f.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3f.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector3f.TangentSpaceNormal">
            <summary>
            Convert a normalized vector to tangent space.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.op_Addition(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.op_Addition(CGALDotNetGeometry.Numerics.Vector3f,System.Single)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.op_Addition(System.Single,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.op_UnaryNegation(CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.op_Subtraction(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.op_Subtraction(CGALDotNetGeometry.Numerics.Vector3f,System.Single)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.op_Subtraction(System.Single,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.op_Multiply(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.op_Multiply(CGALDotNetGeometry.Numerics.Vector3f,System.Single)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.op_Multiply(System.Single,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.op_Division(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.op_Division(CGALDotNetGeometry.Numerics.Vector3f,System.Single)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.op_Division(System.Single,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Divide a scalar and a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.op_Explicit(CGALDotNetGeometry.Numerics.Vector3d)~CGALDotNetGeometry.Numerics.Vector3f">
            <summary>
            Cast from Vector3f to Vector3f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.op_Implicit(CGALDotNetGeometry.Numerics.Point3f)~CGALDotNetGeometry.Numerics.Vector3f">
            <summary>
            Cast from Point3f to Vector3f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.op_Explicit(CGALDotNetGeometry.Numerics.Point3d)~CGALDotNetGeometry.Numerics.Vector3f">
            <summary>
            Cast from Point3f to Vector3f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.op_Equality(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.op_Inequality(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.AlmostEqual(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f,System.Single)">
            <summary>
            Are these vectors equal given the error.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Equals(CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.CompareTo(CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Dot(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Dot(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            The dot product of vector and point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Dot(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            The dot product of two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.AbsDot(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Angle180(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Angle between two vectors in degrees from 0 to 180.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Cross(CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Cross(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Cross(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Cross a vector andpoint.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Cross(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Cross two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Project(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Project vector v onto u.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Reflect(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Given an incident vector i and a normal vector n.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Refract(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f,System.Single,CGALDotNetGeometry.Numerics.Vector3f@)">
            <summary>
            Returns the refraction vector given the incident vector i, 
            the normal vector n and the refraction index eta.
            </summary>
            <param name="i">The incident vector</param>
            <param name="n">The normal vector</param>
            <param name="eta">The refraction index</param>
            <param name="r">The reflected ray.</param>
            <returns>True if there is a solution.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Orthonormal(CGALDotNetGeometry.Numerics.Vector3f@,CGALDotNetGeometry.Numerics.Vector3f@,CGALDotNetGeometry.Numerics.Vector3f@)">
            <summary>
            Create a set of orthonormal vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Min(CGALDotNetGeometry.Numerics.Vector3f,System.Single)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Min(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Max(CGALDotNetGeometry.Numerics.Vector3f,System.Single)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Max(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Clamp(CGALDotNetGeometry.Numerics.Vector3f,System.Single,System.Single)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Clamp(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Lerp(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f,System.Single)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.BLerp(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f,System.Single,System.Single)">
            <summary>
            BLerp between four vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Slerp(CGALDotNetGeometry.Numerics.Vector3f,CGALDotNetGeometry.Numerics.Vector3f,System.Single)">
            <summary>
            Slerp between two vectors arc.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Rounded(System.Int32)">
            <summary>
            Round vector.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Round(System.Int32)">
            <summary>
            Round the vector.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Floor">
            <summary>
            Floor each component of vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector3f.Ceilling">
            <summary>
            Ceilling each component of vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector4d.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector4d.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector4d.UnitZ">
            <summary>
            The unit z vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector4d.UnitW">
            <summary>
            The unit w vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector4d.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector4d.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector4d.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector4d.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector4d.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4d.xy">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4d.xz">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4d.xyz">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4d.xyz0">
            <summary>
            A copy of the vector with w as 0.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.#ctor(System.Double)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.#ctor(CGALDotNetGeometry.Numerics.Vector2d,System.Double,System.Double)">
            <summary>
            A vector from a 2d vector and the z and w varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.#ctor(CGALDotNetGeometry.Numerics.Vector3d,System.Double)">
            <summary>
            A vector from a 3d vector and the w varible.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4d.IsFinite">
            <summary>
            Are all the components of vector finite.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4d.Finite">
            <summary>
            Make a vector with no non finite conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4d.IsNAN">
            <summary>
            Are any of the vectors components nan.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4d.NoNAN">
            <summary>
            Make a vector with no nan conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4d.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4d.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4d.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4d.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4d.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4d.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.op_Addition(CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.op_Addition(CGALDotNetGeometry.Numerics.Vector4d,System.Double)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.op_Addition(System.Double,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.op_UnaryNegation(CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.op_Subtraction(CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.op_Subtraction(CGALDotNetGeometry.Numerics.Vector4d,System.Double)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.op_Subtraction(System.Double,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.op_Multiply(CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.op_Multiply(CGALDotNetGeometry.Numerics.Vector4d,System.Double)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.op_Multiply(System.Double,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.op_Division(CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.op_Division(CGALDotNetGeometry.Numerics.Vector4d,System.Double)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.op_Division(System.Double,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            Divide a scalar and a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.op_Implicit(CGALDotNetGeometry.Numerics.Vector4f)~CGALDotNetGeometry.Numerics.Vector4d">
            <summary>
            Cast from Vector4f to Vector4d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.op_Implicit(CGALDotNetGeometry.Numerics.Point4f)~CGALDotNetGeometry.Numerics.Vector4d">
            <summary>
            Cast from Point4f to Vector4d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.op_Implicit(CGALDotNetGeometry.Numerics.Point4d)~CGALDotNetGeometry.Numerics.Vector4d">
            <summary>
            Cast from Point4d to Vector4d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.op_Equality(CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.op_Inequality(CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.AlmostEqual(CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Vector4d,System.Double)">
            <summary>
            Are these vectors equal given the error.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.Equals(CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.CompareTo(CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.Dot(CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.Dot(CGALDotNetGeometry.Numerics.Point4d,CGALDotNetGeometry.Numerics.Point4d)">
            <summary>
            The dot product of two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.Dot(CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Point4d)">
            <summary>
            The dot product of vector and point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.AbsDot(CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.Min(CGALDotNetGeometry.Numerics.Vector4d,System.Double)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.Min(CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.Max(CGALDotNetGeometry.Numerics.Vector4d,System.Double)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.Max(CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.Clamp(CGALDotNetGeometry.Numerics.Vector4d,System.Double,System.Double)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.Clamp(CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Vector4d)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.Lerp(CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Vector4d,System.Double)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.BLerp(CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Vector4d,CGALDotNetGeometry.Numerics.Vector4d,System.Double,System.Double)">
            <summary>
            BLerp between four vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.Rounded(System.Int32)">
            <summary>
            Round vector.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.Round(System.Int32)">
            <summary>
            Round the vector.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.Floor">
            <summary>
            Floor each component of vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4d.Ceilling">
            <summary>
            Ceilling each component of vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector4f.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector4f.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector4f.UnitZ">
            <summary>
            The unit z vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector4f.UnitW">
            <summary>
            The unit w vector.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector4f.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector4f.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector4f.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector4f.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Numerics.Vector4f.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4f.xy">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4f.xz">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4f.xyz">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4f.xyz0">
            <summary>
            A copy of the vector with w as 0.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.#ctor(System.Single)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.#ctor(CGALDotNetGeometry.Numerics.Vector2f,System.Single,System.Single)">
            <summary>
            A vector from a 2d vector and the z and w varibles.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.#ctor(CGALDotNetGeometry.Numerics.Vector3f,System.Single)">
            <summary>
            A vector from a 3d vector and the w varible.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4f.IsFinite">
            <summary>
            Are all the components of vector finite.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4f.Finite">
            <summary>
            Make a vector with no non finite conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4f.IsNAN">
            <summary>
            Are any of the vectors components nan.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4f.NoNAN">
            <summary>
            Make a vector with no nan conponents.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4f.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4f.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4f.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4f.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4f.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Numerics.Vector4f.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.op_Addition(CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.op_Addition(CGALDotNetGeometry.Numerics.Vector4f,System.Single)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.op_Addition(System.Single,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.op_UnaryNegation(CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.op_Subtraction(CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.op_Subtraction(CGALDotNetGeometry.Numerics.Vector4f,System.Single)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.op_Subtraction(System.Single,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.op_Multiply(CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.op_Multiply(CGALDotNetGeometry.Numerics.Vector4f,System.Single)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.op_Multiply(System.Single,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.op_Division(CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.op_Division(CGALDotNetGeometry.Numerics.Vector4f,System.Single)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.op_Division(System.Single,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            Divide a scalar and a vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.op_Explicit(CGALDotNetGeometry.Numerics.Vector4d)~CGALDotNetGeometry.Numerics.Vector4f">
            <summary>
            Cast from Vector4d to Vector4f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.op_Explicit(CGALDotNetGeometry.Numerics.Point4d)~CGALDotNetGeometry.Numerics.Vector4f">
            <summary>
            Cast from Point4d to Vector4f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.op_Implicit(CGALDotNetGeometry.Numerics.Point4f)~CGALDotNetGeometry.Numerics.Vector4f">
            <summary>
            Cast from Point4f to Vector4f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.op_Equality(CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.op_Inequality(CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.AlmostEqual(CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Vector4f,System.Single)">
            <summary>
            Are these vectors equal given the error.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.Equals(CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.CompareTo(CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.Dot(CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.Dot(CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Point4f)">
            <summary>
            The dot product of vector and point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.Dot(CGALDotNetGeometry.Numerics.Point4f,CGALDotNetGeometry.Numerics.Point4f)">
            <summary>
            The dot product of two points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.AbsDot(CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.Min(CGALDotNetGeometry.Numerics.Vector4f,System.Single)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.Min(CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.Max(CGALDotNetGeometry.Numerics.Vector4f,System.Single)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.Max(CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.Clamp(CGALDotNetGeometry.Numerics.Vector4f,System.Single,System.Single)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.Clamp(CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Vector4f)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.Lerp(CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Vector4f,System.Single)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.BLerp(CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Vector4f,CGALDotNetGeometry.Numerics.Vector4f,System.Single,System.Single)">
            <summary>
            BLerp between four vectors.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.Rounded(System.Int32)">
            <summary>
            Round vector.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.Round(System.Int32)">
            <summary>
            Round the vector.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.Floor">
            <summary>
            Floor each component of vector.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Numerics.Vector4f.Ceilling">
            <summary>
            Ceilling each component of vector.
            </summary>
        </member>
        <member name="T:CGALDotNetGeometry.Nurbs.LinearSystem">
            <summary>
            Used to solve linear systems of equation.
            https://en.wikipedia.org/wiki/LU_decomposition
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Nurbs.LinearSystem.PA">
            <summary>
            Matrix A changed so that it contains a copy of both 
            matrices L-E and U as A=(L-E)+U such that P*A=L*U.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Nurbs.LinearSystem.P">
            <summary>
             The permutation matrix is not stored as a matrix, 
             but in an integer vector P of size N+1 
             containing column indexes where the permutation
             matrix has "1". The last element P[N] = S + N,
             where S is the number of row exchanges needed 
             for determinant computation, det(P)=(-1)^S
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.LinearSystem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.LinearSystem.#ctor(System.Double[0:,0:])">
            <summary>
            Construct a linear system from matrix A.
            </summary>
            <param name="A">The matrix to decompose.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.LinearSystem.ToString">
            <summary>
            The description of the linear system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.LinearSystem.Decompose(System.Double[0:,0:],System.Double)">
            <summary>
            Decompose matrix A.
            </summary>
            <param name="A">Matrix A that is part of the linear system Ax.</param>
            <param name="eps">small tolerance number to detect failure 
            when the matrix is near degenerate</param>
            <returns>If the decompositon was successful.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.LinearSystem.Solve(System.Double[],System.Double[])">
            <summary>
            Solve the linear system for the input vector.
            </summary>
            <param name="b">The vector in Ax=b.</param>
            <param name="x">The solution vector of Ax=b.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.LinearSystem.SwapRows(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Swap the rows i and k in the matrix.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsBasis.FindSpan(System.Int32,System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Find the span of the given parameter in the knot vector.
            </summary>
            <param name="degree">Degree of the curve.</param>
            <param name="knots">Knot vector of the curve.</param>
            <param name="u">Parameter value.</param>
            <returns>Span index into the knot vector such that (span - 1) less than u less tha or equal span</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsBasis.BSplineBasis(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Compute all non-zero B-spline basis functions
            </summary>
            <param name="deg">Degree of the basis function.</param>
            <param name="span"></param>
            <param name="knots">Knot vector corresponding to the basis functions.</param>
            <param name="u">Parameter to evaluate the basis functions at.</param>
            <returns>N Values of (deg+1) non-zero basis functions.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsBasis.BSplineOneBasis(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Compute a single B-spline basis function
            </summary>
            <param name="i">The ith basis function to compute.</param>
            <param name="deg">Degree of the basis function.</param>
            <param name="knots">Knot vector corresponding to the basis functions.</param>
            <param name="u">Parameter to evaluate the basis functions at.</param>
            <returns>The value of the ith basis function at u.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsBasis.BSplineDerBasis(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Double,System.Int32)">
            <summary>
            Compute all non-zero derivatives of B-spline basis functions
            </summary>
            <param name="deg">Degree of the basis function.</param>
            <param name="span">Index obtained from findSpan() corresponding the u and knots.</param>
            <param name="knots">Knot vector corresponding to the basis functions.</param>
            <param name="u">Parameter to evaluate the basis functions at.</param>
            <param name="num_ders">Number of derivatives to compute (num_ders less tha or equal deg)</param>
            <returns>Values of non-zero derivatives of basis functions.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCheck.KnotMultiplicity(System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Returns the mulitplicity of the knot at index
            </summary>
            <param name="knots">Knot vector</param>
            <param name="index">index Index of knot of interest</param>
            <returns>Multiplicity (>= 1)</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCheck.CurveIsValid(CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d)">
            <summary>
            Returns whether the curve is valid
            </summary>
            <param name="crv">Curve object</param>
            <returns>Whether valid</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCheck.CurveIsClosed(CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d)">
            <summary>
            Checks whether the curve is closed
            </summary>
            <param name="crv">Curve object</param>
            <returns>Whether closed</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCheck.SurfaceIsValid(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d)">
            <summary>
            Returns whether the surface is valid
            </summary>
            <param name="srf">Surface object</param>
            <returns>Whether valid</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCheck.SurfaceIsClosedU(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d)">
            <summary>
            Checks whether the surface is closed along u-direction
            </summary>
            <param name="srf">Surface object</param>
            <returns>Whether closed along u-direction</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCheck.SurfaceIsClosedV(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d)">
            <summary>
            Checks whether the surface is closed along v-direction
            </summary>
            <param name="srf">Surface object</param>
            <returns>Whether closed along v-direction</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCheck.IsValidRelation(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if the relation between degree, number of knots, and
            number of control points is valid
            </summary>
            <param name="degree">The degree</param>
            <param name="num_knots">Number of knot values</param>
            <param name="num_ctrl_pts">Number of control points</param>
            <returns>Whether the relationship is valid</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCheck.IsKnotVectorMonotonic(System.Collections.Generic.IList{System.Double})">
            <summary>
            Whether the knots are in ascending order
            </summary>
            <param name="knots">Knot vector</param>
            <returns>Whether monotonic</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCheck.CurveIsValid(System.Int32,System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Returns whether the curve is valid
            </summary>
            <param name="degree">Degree of curve</param>
            <param name="knots">Knot vector of curve</param>
            <param name="numControlPoints">The number of control points.</param>
            <returns>Whether valid</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCheck.SurfaceIsValid(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)">
            <summary>
            Returns whether the surface is valid
            </summary>
            <param name="degree_u">Degree of surface along u-direction</param>
            <param name="degree_v">Degree of surface along v-direction</param>
            <param name="knots_u">Knot vector of surface along u-direction</param>
            <param name="knots_v">Knot vector of surface along v-direction</param>
            <param name="controlPointsLen0">The number of control point in first dimension.</param>
            <param name="controlPointsLen1">The number of control point in second dimension.</param>
            <returns>Whether valid</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCheck.IsKnotVectorClosed(CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d)">
            <summary>
            Returns whether the given knot vector is closed by checking the
            periodicity of knot vectors near the start and end
            </summary>
            <returns>Whether knot vector is closed</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCheck.IsKnotVectorClosedU(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d)">
            <summary>
            Returns whether the given knot vector is closed by checking the
            periodicity of knot vectors near the start and end
            </summary>
            <returns>Whether knot vector is closed</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCheck.IsKnotVectorClosedV(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d)">
            <summary>
            Returns whether the given knot vector is closed by checking the
            periodicity of knot vectors near the start and end
            </summary>
            <returns>Whether knot vector is closed</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCheck.IsArray1Closed(CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d)">
            <summary>
            Returns whether the given knot vector is closed by checking the
            periodicity of knot vectors near the start and end
            </summary>
            <returns>Whether knot vector is closed</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCheck.IsArray2ClosedU(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d)">
            <summary>
            Returns whether the 2D array is closed along the u-direction
            i.e., along rows.
            </summary>
            <returns>Whether closed along u-direction</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCheck.IsArray2ClosedV(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d)">
            <summary>
            Returns whether the 2D array is closed along the v-direction
            i.e., along columns.
            </summary>
            <returns>Whether closed along v-direction</returns>
        </member>
        <member name="T:CGALDotNetGeometry.Nurbs.NurbsCurveParams2d">
            <summary>
            Param struct to create curve.
            </summary>
        </member>
        <member name="T:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d">
            <summary>
            Class for holding a polynomial B-spline curve
            Not part of CGAL.
            Implementation found https://github.com/pboyer/verb and https://github.com/pradeep-pyro/tinynurbs
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.MIN_DEGREE">
            <summary>
            The min degree a curve can have.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.MAX_DEGREE">
            <summary>
            The max degree a curve can have.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.IsRational">
            <summary>
            Is this a rational curve.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.Degree">
            <summary>
            The curves degree.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.Knots">
            <summary>
            The curves knots.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.Count">
            <summary>
            The number of control points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.IsValid">
            <summary>
            Is this a valid curve.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.IsClosed">
            <summary>
            Is this a closed curve.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.GetCartesianControlPoint(System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.GetHomogeneousControlPoint(System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points index.</param>
            <returns>The control point in homogeneous coordinates.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.GetCartesianControlPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d})">
            <summary>
            Get the control points
            </summary>
            <param name="points">The list to copy the points into.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.SetCartesianControlPoint(System.Int32,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Set the control point.
            </summary>
            <param name="i">The points index.</param>
            <param name="point">The control point in cartesian coordinates.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.CartesianPoint(System.Double)">
            <summary>
            Get the point at parameter u.
            </summary>
            <param name="u">The parameter.</param>
            <returns>The point at u.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.GetCartesianPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d},System.Int32)">
            <summary>
            Sample a curves points in a range of equally spaced parametric intervals.
            </summary>
            <param name="samples">The numbers times to sample the curve.</param>
            <param name="points">The list of sampled points.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.Translate(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Translate the triangulation.
            </summary>
            <param name="translation">The amount to translate.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.Rotate(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Rotate the triangulation.
            </summary>
            <param name="rotation">The amount to rotate in radians.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.Scale(System.Double)">
            <summary>
            Scale the triangulation.
            </summary>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.Transform(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Radian,System.Double)">
            <summary>
            Transform the triangulation with a TRS matrix.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.Tangent(System.Double)">
            <summary>
            Get the tangent at parameter u.
            </summary>
            <param name="u">The parameter.</param>
            <returns>The tangent at u.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.GetTangents(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Vector2d},System.Int32)">
            <summary>
            Sample a curves tangents in a range of equally spaced parametric intervals.
            </summary>
            <param name="samples">The numbers times to sample the curve.</param>
            <param name="tangents">The list of sampled points.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.Normal(System.Double,System.Boolean)">
            <summary>
            Get the tangent at parameter u.
            </summary>
            <param name="u">The parameter.</param>
            <param name="ccw">The normal direction.</param>
            <returns>The normal at u.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.GetNormals(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Vector2d},System.Int32,System.Boolean)">
            <summary>
            Sample a curves normals in a range of equally spaced parametric intervals.
            </summary>
            <param name="samples">The numbers times to sample the curve.</param>
            <param name="normals">The list of sampled points.</param>
            <param name="ccw">The normals direction.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d.NormalizeKnots">
            <summary>
            Normlize the curves knots so the first knot starts at 0
            and the last knot ends at 1.
            </summary>
        </member>
        <member name="T:CGALDotNetGeometry.Nurbs.NurbsCurve2d">
            <summary>
            Class for holding a polynomial B-spline curve
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Nurbs.NurbsCurve2d.m_degree">
            <summary>
            The curves degree.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCurve2d.#ctor(CGALDotNetGeometry.Nurbs.NurbsCurveParams2d)">
            <summary>
            Create a new curve from the parameters.
            </summary>
            <param name="param">The curves parameters.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCurve2d.#ctor(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point2d})">
            <summary>
            Create a curve new curve.
            </summary>
            <param name="degree">The curves degree.</param>
            <param name="knots">The curves knots.</param>
            <param name="control_points">The curves control points.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCurve2d.#ctor(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.HPoint2d})">
            <summary>
            Create a curve new curve.
            </summary>
            <param name="degree">The curves degree.</param>
            <param name="knots">The curves knots.</param>
            <param name="control_points">The curves control points in cartesian coordinates.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.NurbsCurve2d.IsRational">
            <summary>
            Is this a rational curve.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.NurbsCurve2d.Degree">
            <summary>
            The curves degree.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.NurbsCurve2d.Count">
            <summary>
            The number of control points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.NurbsCurve2d.CartesianControlPoints">
            <summary>
            The curves control points in cartesian coordinates.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCurve2d.GetCartesianControlPoint(System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCurve2d.GetHomogeneousControlPoint(System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points index.</param>
            <returns>The control point in homogeneous coordinates.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCurve2d.GetCartesianControlPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d})">
            <summary>
            Get the control points
            </summary>
            <param name="points">The list to copy the points into.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCurve2d.SetCartesianControlPoint(System.Int32,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Set the control point.
            </summary>
            <param name="i">The points index.</param>
            <param name="point">The control point in cartesian coordinates.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCurve2d.GetCartesianPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d},System.Int32)">
            <summary>
            Sample a curves points in a range of equally spaced parametric intervals.
            </summary>
            <param name="samples">The numbers times to sample the curve.</param>
            <param name="points">The list of sampled points.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCurve2d.Transform(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Radian,System.Double)">
            <summary>
            Transform the triangulation with a TRS matrix.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCurve2d.InsertKnot(CGALDotNetGeometry.Nurbs.NurbsCurve2d,System.Double,System.Int32)">
            <summary>
            Insert a new knot into the curve and return as a new curve.
            </summary>
            <param name="crv">The curve to insert the knot into.</param>
            <param name="u">The parameter to insert the knot at.</param>
            <param name="repeat">The number of times to repeat the knot.</param>
            <returns>A new curve with the inserted knots.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsCurve2d.Split(CGALDotNetGeometry.Nurbs.NurbsCurve2d,System.Double,CGALDotNetGeometry.Nurbs.NurbsCurve2d@,CGALDotNetGeometry.Nurbs.NurbsCurve2d@)">
            <summary>
            Split the curve a the parameter and return the two new curves.
            </summary>
            <param name="crv">The curve to split.</param>
            <param name="u">The parameter to split the curve at</param>
            <param name="left">The left side of the split curve.</param>
            <param name="right">The right side of the split curve.</param>
            <returns>The two new curves.</returns>
        </member>
        <member name="T:CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d">
            <summary>
            Class for holding a polynomial B-spline curve
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d.m_degree">
            <summary>
            The curves degree.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d.#ctor(CGALDotNetGeometry.Nurbs.NurbsCurveParams2d)">
            <summary>
            Create a new curve from the parameters.
            </summary>
            <param name="param">The curves parameters.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d.#ctor(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point2d},System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a curve new curve.
            </summary>
            <param name="degree">The curves degree.</param>
            <param name="knots">The curves knots.</param>
            <param name="control_points">The curves control points.</param>
            <param name="weights">The curves weights.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d.#ctor(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.HPoint2d})">
            <summary>
            Create a curve new curve.
            </summary>
            <param name="degree">The curves degree.</param>
            <param name="knots">The curves knots.</param>
            <param name="control_points">The curves control points in cartesian coordinates.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d.IsRational">
            <summary>
            Is this a rational curve.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d.Degree">
            <summary>
            The curves degree.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d.Count">
            <summary>
            The number of control points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d.HomogeneousControlPoints">
            <summary>
            The curves control points in homogegous coordinates.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d.GetCartesianControlPoint(System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d.GetHomogeneousControlPoint(System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points index.</param>
            <returns>The control point in homogeneous coordinates.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d.GetCartesianControlPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d})">
            <summary>
            Get the control points
            </summary>
            <param name="points">The list to copy the points into.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d.SetCartesianControlPoint(System.Int32,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Set the control point.
            </summary>
            <param name="i">The points index.</param>
            <param name="point">The control point in cartesian coordinates.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d.GetCartesianPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d},System.Int32)">
            <summary>
            Sample a curves points in a range of equally spaced parametric intervals.
            </summary>
            <param name="samples">The numbers times to sample the curve.</param>
            <param name="points">The list of sampled points.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d.Transform(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Radian,System.Double)">
            <summary>
            Transform the triangulation with a TRS matrix.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d.InsertKnot(CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d,System.Double,System.Int32)">
            <summary>
            Insert a new knot into the curve and return as a new curve.
            </summary>
            <param name="crv">The curve to insert the knot into.</param>
            <param name="u">The parameter to insert the knot at.</param>
            <param name="repeat">The number of times to repeat the knot.</param>
            <returns>A new curve with the inserted knots.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d.Split(CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d,System.Double,CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d@,CGALDotNetGeometry.Nurbs.RationalNurbsCurve2d@)">
            <summary>
            Split the curve a the parameter and return the two new curves.
            </summary>
            <param name="crv">The curve to split.</param>
            <param name="u">The parameter to split the curve at.</param>
            <param name="left">The left side of split curve.</param>
            <param name="right">The right side of the split curve.</param>
            <returns>The two new curves.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsEval.CartesianCurvePoint(CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d,System.Double)">
            <summary>
            Evaluate point on a nonrational NURBS curve
            </summary>
            <param name="crv">Curve object</param>
            <param name="u">Parameter to evaluate the curve at.</param>
            <returns>Resulting point on the curve at parameter u.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsEval.HomogeneousCurvePoint(CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d,System.Double)">
            <summary>
            Evaluate point on a nonrational NURBS curve
            </summary>
            <param name="crv">The nurbs curve.</param>
            <param name="u">Parameter to evaluate the curve at.</param>
            <returns>Resulting point on the curve at parameter u.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsEval.CurveTangent(CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d,System.Double)">
            <summary>
            Evaluate the tangent of a B-spline curve
            </summary>
            <param name="crv">Curve object</param>
            <param name="u"></param>
            <returns>Unit tangent of the curve at u.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsEval.CurveNormal(CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d,System.Double,System.Boolean)">
            <summary>
            Evaluate the tangent of a B-spline curve
            </summary>
            <param name="crv">Curve object</param>
            <param name="u"></param>
            <param name="ccw">Shouuld the normal be counter clock-wise to the tangent or clock-wise</param>
            <returns>Unit tangent of the curve at u.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsEval.CurveDerivatives(CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d,System.Int32,System.Double)">
            <summary>
            Evaluate derivatives of a non-rational NURBS curve
            E.g. curve_ders[n] is the nth derivative at u, where 0 less than n less than or equal num_ders.
            </summary>
            <param name="crv">Curve object</param>
            <param name="num_ders">Number of times to derivate.</param>
            <param name="u">Parameter to evaluate the derivatives at.</param>
            <returns>Derivatives of the curve at u.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsEval.HomogeneousCurveDerivatives(CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d,System.Int32,System.Double)">
            <summary>
            Evaluate derivatives of a non-rational NURBS curve
            </summary>
            <param name="num_ders">Number of times to derivate.</param>
            <param name="u">Parameter to evaluate the derivatives at.</param>
            <param name="crv"></param>
            <returns>Derivatives of the curve at u.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsEval.CartesianSurfacePoint(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d,System.Double,System.Double)">
            <summary>
            Evaluate point on a nonrational NURBS surface
            </summary>
            <param name="srf">Surface object</param>
            <param name="u">Parameter to evaluate the surface at.</param>
            <param name="v">Parameter to evaluate the surface at.</param>
            <returns>Resulting point on the surface at (u, v).</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsEval.HomogeneousSurfacePoint(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d,System.Double,System.Double)">
            <summary>
            Evaluate point on a nonrational NURBS surface
            </summary>
            <param name="u">Parameter to evaluate the surface at.</param>
            <param name="v">Parameter to evaluate the surface at.</param>
            <param name="srf">The surface.</param>
            <returns>Resulting point on the surface at (u, v).</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsEval.SurfaceTangent(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d,System.Double,System.Double,CGALDotNetGeometry.Numerics.Vector3d@,CGALDotNetGeometry.Numerics.Vector3d@)">
            <summary>
            Evaluate the two orthogonal tangents of a non-rational surface at the given
            </summary>
            <param name="srf">Surface object</param>
            <param name="u">Parameter in the u-direction</param>
            <param name="v">Parameter in the v-direction</param>
            <param name="du"></param>
            <param name="dv"></param>
            <returns>Tuple with unit tangents along u- and v-directions</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsEval.SurfaceNormal(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d,System.Double,System.Double)">
            <summary>
            Evaluate the normal a non-rational surface at the given parameters
            </summary>
            <param name="srf">Surface object</param>
            <param name="u">Parameter in the u-direction</param>
            <param name="v">Parameter in the v-direction</param>
            <returns>Unit normal at of the surface at (u, v)</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsEval.SurfaceDerivatives(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d,System.Int32,System.Double,System.Double)">
            <summary>
            Evaluate derivatives on a non-rational NURBS surface
            </summary>
            <param name="srf">Surface object</param>
            <param name="num_ders">Number of times to differentiate</param>
            <param name="u">Parameter to evaluate the surface at.</param>
            <param name="v">Parameter to evaluate the surface at.</param>
            <returns>Derivatives of the surface at (u, v).</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsEval.HomogeneousSurfaceDerivatives(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d,System.Int32,System.Double,System.Double)">
            <summary>
            Evaluate derivatives on a non-rational NURBS surface
            </summary>
            <param name="srf">The surface.</param>
            <param name="num_ders">Number of times to differentiate.</param>
            <param name="u">Parameter to evaluate the surface at.</param>
            <param name="v">Parameter to evaluate the surface at.</param>
            <returns>Derivatives of the surface at (u, v).</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsMake.FromPoints(System.Int32,System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point2d})">
            <summary>
            0) build knot vector for curve by normalized chord length
            1) construct effective basis function in square matrix
            2) construct set of coordinattes to interpolate vector
            3) set of control points
            4) solve in all 3 dimensions
            </summary>
            <param name="degree">The degree of the curve.</param>
            <param name="points">The points to interp curve from.</param>
            <returns>A curve that passes through all the points.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsMake.BezierCurve(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point2d})">
            <summary>
            Create a bezier curve from the control points.
            </summary>
            <param name="controlPoints">Points in counter-clockwise form.</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsMake.RationalBezierCurve(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.HPoint2d})">
            <summary>
            Create a rational bezier curve from the control points and weights.
            </summary>
            <param name="controlPoints">Points in counter-clockwise form.</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsMake.Circle(CGALDotNetGeometry.Numerics.Point2d,System.Double)">
            <summary>
            Create an Circle.
            </summary>
            <param name="center"></param>
            <param name="radius">the radius</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsMake.Arc(CGALDotNetGeometry.Numerics.Point2d,System.Double,System.Double,System.Double)">
            <summary>
            Create an Arc.
            </summary>
            <param name="center"></param>
            <param name="radius">the radius</param>
            <param name="startAngle">start angle of the ellipse arc, between 0 and 2pi, where 0 points at the xaxis</param>
            <param name="endAngle">end angle of the arc, between 0 and 2pi, greater than the start angle</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsMake.Ellipse(CGALDotNetGeometry.Numerics.Point2d,System.Double,System.Double)">
            <summary>
            Create an Ellipse.
            </summary>
            <param name="center"></param>
            <param name="xradius">the x radius</param>
            <param name="yradius">the y radius</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsMake.EllipseArc(CGALDotNetGeometry.Numerics.Point2d,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create an EllipseArc.
            </summary>
            <param name="center"></param>
            <param name="xradius">the x radius</param>
            <param name="yradius">the y radius</param>
            <param name="startAngle">start angle of the ellipse arc, between 0 and 2pi, where 0 points at the xaxis</param>
            <param name="endAngle">end angle of the arc, between 0 and 2pi, greater than the start angle</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsMake.EllipseArc(CGALDotNetGeometry.Numerics.Point2d,System.Double,System.Double,System.Double,System.Double,CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Generate the control points, weights, and knots of an elliptical arc.
            (Corresponds to Algorithm A7.1 from Piegl and Tiller)
            </summary>
            <param name="center"></param>
            <param name="xradius">the x radius</param>
            <param name="yradius">the y radius</param>
            <param name="startAngle">start angle of the ellipse arc, between 0 and 2pi, where 0 points at the xaxis</param>
            <param name="endAngle">end angle of the arc, between 0 and 2pi, greater than the start angle</param>
            <param name="xaxis">the x axis</param>
            <param name="yaxis">the y axis</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsMake.IntersectRays(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Nurbs.NurbsMake.CurveCurveIntersection@)">
            <summary>
            Find the closest parameter on two rays, see http://geomalgorithms.com/a07-_distance.html
            </summary>
            <param name="a0">origin for ray 1</param>
            <param name="a">direction of ray 1, assumed normalized</param>
            <param name="b0">origin for ray 2</param>
            <param name="b">direction of ray 2, assumed normalized</param>
            <param name="result">The intersection result.</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsModify.CurveKnotInsert(CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d,System.Double,System.Int32)">
            <summary>
            Insert knots in the curve
            </summary>
            <param name="crv">Curve object</param>
            <param name="u">Parameter to insert knot at</param>
            <param name="repeat">Number of times to insert</param>
            <returns>New curve with repeat knots inserted at u</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsModify.CurveSplit(CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d,System.Double,CGALDotNetGeometry.Nurbs.NurbsCurveParams2d@,CGALDotNetGeometry.Nurbs.NurbsCurveParams2d@)">
            <summary>
            Split a curve into two
            </summary>
            <param name="crv">Curve object</param>
            <param name="u">Parameter to split at</param>
            <param name="leftParam"></param>
            <param name="rightParam"></param>
            <returns>Tuple with first half and second half of the curve</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsModify.CurveKnotInsert(CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d,System.Double,System.Int32,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{CGALDotNetGeometry.Numerics.HPoint2d}@)">
            <summary>
             Insert knots in the curve
            </summary>
            <param name="crv">The curve to insert knots</param>
            <param name="u">Parameter to insert knot(s) at</param>
            <param name="r">Number of times to insert knot</param>
            <param name="new_knots">Updated knot vector</param>
            <param name="new_cp">Updated control pointss</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsModify.CurveSplit(CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d,System.Double,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{CGALDotNetGeometry.Numerics.HPoint2d}@,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{CGALDotNetGeometry.Numerics.HPoint2d}@)">
            <summary>
            Split the curve into two
            </summary>
            <param name="crv"></param>
            <param name="u"></param>
            <param name="left_knots"></param>
            <param name="left_control_points"></param>
            <param name="right_knots"></param>
            <param name="right_control_points"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsModify.SurfaceKnotInsertU(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d,System.Double,System.Int32)">
            <summary>
            Insert knots in the surface along u-direction
            </summary>
            <param name="srf">Surface object</param>
            <param name="u">Knot value to insert</param>
            <param name="repeat">Number of times to insert</param>
            <returns>New Surface object after knot insertion</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsModify.SurfaceKnotInsertV(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d,System.Double,System.Int32)">
            <summary>
            Insert knots in the surface along v-direction
            </summary>
            <param name="srf">Surface object</param>
            <param name="v">Knot value to insert</param>
            <param name="repeat">Number of times to insert</param>
            <returns>New Surface object after knot insertion</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsModify.SurfaceSplitU(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d,System.Double,CGALDotNetGeometry.Nurbs.NurbsSurfaceParams3d@,CGALDotNetGeometry.Nurbs.NurbsSurfaceParams3d@)">
            <summary>
            Split a surface into two along u-direction
            </summary>
            <param name="srf">Surface object</param>
            <param name="u">Parameter along u-direction to split the surface</param>
            <param name="leftParam"></param>
            <param name="rightParam"></param>
            <returns>Tuple with first and second half of the surfaces</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsModify.SurfaceSplitV(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d,System.Double,CGALDotNetGeometry.Nurbs.NurbsSurfaceParams3d@,CGALDotNetGeometry.Nurbs.NurbsSurfaceParams3d@)">
            <summary>
            Split a surface into two along v-direction
            </summary>
            <param name="srf">Surface object</param>
            <param name="v">Parameter along v-direction to split the surface</param>
            <param name="leftParam"></param>
            <param name="rightParam"></param>
            <returns>Tuple with first and second half of the surfaces</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsModify.SurfaceKnotInsert(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d,System.Double,System.Int32,System.Boolean,System.Collections.Generic.List{System.Double}@,CGALDotNetGeometry.Numerics.HPoint3d[0:,0:]@)">
            <summary>
            Insert knots in the surface along one direction.
            </summary>
            <param name="srf"></param>
            <param name="knot"></param>
            <param name="r"></param>
            <param name="along_u"></param>
            <param name="new_knots"></param>
            <param name="new_cp"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsModify.SurfaceSplit(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d,System.Double,System.Boolean,System.Collections.Generic.List{System.Double}@,CGALDotNetGeometry.Numerics.HPoint3d[0:,0:]@,System.Collections.Generic.List{System.Double}@,CGALDotNetGeometry.Numerics.HPoint3d[0:,0:]@)">
            <summary>
            
            </summary>
            <param name="srf">The surface.</param>
            <param name="u">Parameter to split curve</param>
            <param name="along_u">Whether the direction to split along is the u-direction</param>
            <param name="left_knots">Knots of the left part of the curve</param>
            <param name="left_control_points">Control points of the left part of the curve</param>
            <param name="right_knots">Knots of the right part of the curve</param>
            <param name="right_control_points">Control points of the right part of the curve</param>
        </member>
        <member name="T:CGALDotNetGeometry.Nurbs.NurbsSurfaceParams3d">
            <summary>
            Param struct to hold surface params.
            </summary>
        </member>
        <member name="T:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d">
            <summary>
            Class for representing a non-rational NURBS surface
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.MIN_DEGREE">
            <summary>
            The min degree a surface can have.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.MAX_DEGREE">
            <summary>
            The max degree a surface can have.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.IsRational">
            <summary>
            Is the surface rational.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.DegreeU">
            <summary>
            The degree on the first dimension.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.DegreeV">
            <summary>
            The degree on the second dimension.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.KnotsU">
            <summary>
            The knots on the first dimension.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.KnotsV">
            <summary>
            The knots on the second dimension.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.Width">
            <summary>
            The surfaces width.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.Height">
            <summary>
            The surfaces height.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.IsValid">
            <summary>
            Is the surface valid.
            Checks the degree, knots and controal points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.IsClosedU">
            <summary>
            Is the surface closed in the u axis.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.IsClosedV">
            <summary>
            Is the surface closed in the v axis.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.GetCartesianControlPoint(System.Int32,System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.GetHomogeneousControlPoint(System.Int32,System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.GetCartesianControlPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point3d})">
            <summary>
            Get the control points
            </summary>
            <param name="points">The list to copy the points into.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.SetCartesianControlPoint(System.Int32,System.Int32,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Set the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <param name="point">The control point in cartesian coordinates.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.CartesianPoint(System.Double,System.Double)">
            <summary>
            Get the point at parameter u,v.
            </summary>
            <param name="u">The u parameter.</param>
            <param name="v">The v parameter.</param>
            <returns>The point at u,v.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.GetCartesianPoints(System.Int32,CGALDotNetGeometry.Numerics.Point3d[0:,0:])">
            <summary>
            Get a array of points.
            </summary>
            <param name="samples">The number of samples.</param>
            <param name="points">The points array that has a width 
            and height of the number of samples.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.Tangent(System.Double,System.Double,CGALDotNetGeometry.Numerics.Vector3d@,CGALDotNetGeometry.Numerics.Vector3d@)">
            <summary>
            Get the tangent at parameter u,v.
            </summary>
            <param name="u">The v parameter.</param>
            <param name="v">The v parameter.</param>
            <param name="tu">The u parameters tangent.</param>
            <param name="tv">The v parameters tangent.</param>
            <returns>The tanget at u,v.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.Normal(System.Double,System.Double)">
            <summary>
            Get the normal at parameter u,v.
            </summary>
            <param name="u">The u parameter.</param>
            <param name="v">The v parameter.</param>
            <returns>The normal at u,v.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.GetNormals(System.Int32,CGALDotNetGeometry.Numerics.Vector3d[0:,0:])">
            <summary>
            Get a array of normals.
            </summary>
            <param name="samples">The number of samples</param>
            <param name="normals">The normal array that is same size as the number of samples.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.Translate(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Translate the triangulation.
            </summary>
            <param name="translation">The amount to translate.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.Rotate(CGALDotNetGeometry.Numerics.Quaternion3d)">
            <summary>
            Rotate the triangulation.
            </summary>
            <param name="rotation">The amount to rotate in radians.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.Scale(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Scale the triangulation.
            </summary>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.Transform(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Transform the triangulation with a TRS matrix.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.NormalizeKnotsU">
            <summary>
            Normlize the surfaces u knots so the first knot starts at 0
            and the last knot ends at 1.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.NormalizeKnotsV">
            <summary>
            Normlize the surfaces v knots so the first knot starts at 0
            and the last knot ends at 1.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.InsertKnotU(CGALDotNetGeometry.Nurbs.NurbsSurface3d,System.Double,System.Int32)">
            <summary>
            Insert a new knot into the surface and return as a new surface.
            </summary>
            <param name="srf">The surface to insert the knot into.</param>
            <param name="u">The parameter to insert the knot at.</param>
            <param name="repeat">The number of times to repeat the knot.</param>
            <returns>A new surface with the inserted knots.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d.InsertKnotV(CGALDotNetGeometry.Nurbs.NurbsSurface3d,System.Double,System.Int32)">
            <summary>
            Insert a new knot into the surface and return as a new surface.
            </summary>
            <param name="srf">The surface to insert the knot into.</param>
            <param name="v">The parameter to insert the knot at.</param>
            <param name="repeat">The number of times to repeat the knot.</param>
            <returns>A new surface with the inserted knots.</returns>
        </member>
        <member name="T:CGALDotNetGeometry.Nurbs.NurbsSurface3d">
            <summary>
            Class for representing a non-rational NURBS surface
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsSurface3d.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsSurface3d.#ctor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},CGALDotNetGeometry.Numerics.Point3d[0:,0:])">
            <summary>
            Create a new surface.
            </summary>
            <param name="degree_u">The degree on the first dimension.</param>
            <param name="degree_v">The degree on the second dimension.</param>
            <param name="knots_u">The knots on the first dimension.</param>
            <param name="knots_v">The knots on the second dimension.</param>
            <param name="control_points">The control points in cartesion coordinates.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsSurface3d.#ctor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},CGALDotNetGeometry.Numerics.HPoint3d[0:,0:])">
            <summary>
            Create a new surface.
            </summary>
            <param name="degree_u">The degree on the first dimension.</param>
            <param name="degree_v">The degree on the second dimension.</param>
            <param name="knots_u">The knots on the first dimension.</param>
            <param name="knots_v">The knots on the second dimension.</param>
            <param name="control_points">The control points in cartesion coordinates.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.NurbsSurface3d.IsRational">
            <summary>
            Is the surface rational.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.NurbsSurface3d.DegreeU">
            <summary>
            The degree on the first dimension.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.NurbsSurface3d.DegreeV">
            <summary>
            The degree on the second dimension.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsSurface3d.GetCartesianControlPoint(System.Int32,System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsSurface3d.GetHomogeneousControlPoint(System.Int32,System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsSurface3d.GetCartesianControlPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point3d})">
            <summary>
            Get the control points
            </summary>
            <param name="points">The list to copy the points into.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsSurface3d.SetCartesianControlPoint(System.Int32,System.Int32,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Set the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <param name="point">The control point in cartesian coordinates.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsSurface3d.Transform(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Transform the triangulation with a TRS matrix.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsSurface3d.SplitU(CGALDotNetGeometry.Nurbs.NurbsSurface3d,System.Double,CGALDotNetGeometry.Nurbs.NurbsSurface3d@,CGALDotNetGeometry.Nurbs.NurbsSurface3d@)">
            <summary>
            
            </summary>
            <param name="srf"></param>
            <param name="u"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsSurface3d.SplitV(CGALDotNetGeometry.Nurbs.NurbsSurface3d,System.Double,CGALDotNetGeometry.Nurbs.NurbsSurface3d@,CGALDotNetGeometry.Nurbs.NurbsSurface3d@)">
            <summary>
            
            </summary>
            <param name="srf"></param>
            <param name="v"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="T:CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d">
            <summary>
            Class for representing a non-rational NURBS surface
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d.#ctor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},CGALDotNetGeometry.Numerics.Point3d[0:,0:])">
            <summary>
            Create a new surface.
            </summary>
            <param name="degree_u">The degree on the first dimension.</param>
            <param name="degree_v">The degree on the second dimension.</param>
            <param name="knots_u">The knots on the first dimension.</param>
            <param name="knots_v">The knots on the second dimension.</param>
            <param name="control_points">The control points in cartesion coordinates.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d.#ctor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},CGALDotNetGeometry.Numerics.Point3d[0:,0:],System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="degree_u"></param>
            <param name="degree_v"></param>
            <param name="knots_u"></param>
            <param name="knots_v"></param>
            <param name="control_points"></param>
            <param name="weights"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d.#ctor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},CGALDotNetGeometry.Numerics.HPoint3d[0:,0:])">
            <summary>
            Create a new surface.
            </summary>
            <param name="degree_u">The degree on the first dimension.</param>
            <param name="degree_v">The degree on the second dimension.</param>
            <param name="knots_u">The knots on the first dimension.</param>
            <param name="knots_v">The knots on the second dimension.</param>
            <param name="control_points">The control points in cartesion coordinates.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d.IsRational">
            <summary>
            Is the surface rational.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d.DegreeU">
            <summary>
            The degree on the first dimension.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d.DegreeV">
            <summary>
            The degree on the second dimension.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d.GetCartesianControlPoint(System.Int32,System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d.GetHomogeneousControlPoint(System.Int32,System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d.GetCartesianControlPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point3d})">
            <summary>
            Get the control points
            </summary>
            <param name="points">The list to copy the points into.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d.SetCartesianControlPoint(System.Int32,System.Int32,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Set the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <param name="point">The control point in cartesian coordinates.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d.Transform(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Transform the triangulation with a TRS matrix.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d.SplitU(CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d,System.Double,CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d@,CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d@)">
            <summary>
            
            </summary>
            <param name="srf"></param>
            <param name="u"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d.SplitV(CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d,System.Double,CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d@,CGALDotNetGeometry.Nurbs.RationalNurbsSurface3d@)">
            <summary>
            
            </summary>
            <param name="srf"></param>
            <param name="v"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsTess.GetCartesianPoints(CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d,System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d},System.Double,System.Double,System.Int32)">
            <summary>
            Sample a curves points in a range of equally spaced parametric intervals.
            </summary>
            <param name="curve">NurbsCurveData object</param>
            <param name="start">start parameter for sampling</param>
            <param name="end">end parameter for sampling</param>
            <param name="numSamples">integer number of samples</param>
            <param name="points">The list of sampled points.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsTess.GetTangents(CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d,System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Vector2d},System.Double,System.Double,System.Int32)">
            <summary>
            Sample a curves tangents in a range of equally spaced parametric intervals.
            </summary>
            <param name="curve">NurbsCurveData object</param>
            <param name="start">start parameter for sampling</param>
            <param name="end">end parameter for sampling</param>
            <param name="numSamples">integer number of samples</param>
            <param name="tangents">The list of sampled points.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsTess.GetNormals(CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d,System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Vector2d},System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Sample a curves tangents in a range of equally spaced parametric intervals.
            </summary>
            <param name="curve">NurbsCurveData object</param>
            <param name="start">start parameter for sampling</param>
            <param name="end">end parameter for sampling</param>
            <param name="numSamples">integer number of samples</param>
            <param name="normals">The list of sampled points.</param>
            <param name="ccw"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsTess.EstimateLength(CGALDotNetGeometry.Nurbs.BaseNurbsCurve2d,System.Double,System.Double,System.Int32)">
            <summary>
            Estimate the length of the curve.
            </summary>
            <param name="curve">NurbsCurveData object</param>
            <param name="start">start parameter for sampling</param>
            <param name="end">end parameter for sampling</param>
            <param name="numSamples">integer number of samples</param>
            <returns>The curves estmated length.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsTess.GetCartesianPoints(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d,CGALDotNetGeometry.Numerics.Point3d[0:,0:],System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="srf"></param>
            <param name="points"></param>
            <param name="startU"></param>
            <param name="endU"></param>
            <param name="numSamplesU"></param>
            <param name="startV"></param>
            <param name="endV"></param>
            <param name="numSamplesV"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsTess.GetNormals(CGALDotNetGeometry.Nurbs.BaseNurbsSurface3d,CGALDotNetGeometry.Numerics.Vector3d[0:,0:],System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="srf"></param>
            <param name="normals"></param>
            <param name="startU"></param>
            <param name="endU"></param>
            <param name="numSamplesU"></param>
            <param name="startV"></param>
            <param name="endV"></param>
            <param name="numSamplesV"></param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsUtil.Copy``1(``0[])">
            <summary>
            Create a shallow copy of the array.
            </summary>
            <typeparam name="T">The arrays type</typeparam>
            <param name="array">The array to copy.</param>
            <returns>The copied array</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsUtil.Copy``1(``0[0:,0:])">
            <summary>
            Create a shallow copy of the array.
            </summary>
            <typeparam name="T">The arrays type</typeparam>
            <param name="array">The array to copy.</param>
            <returns>The copied array</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsUtil.Copy``1(``0[0:,0:,0:])">
            <summary>
            Create a shallow copy of the array.
            </summary>
            <typeparam name="T">The arrays type</typeparam>
            <param name="array">The array to copy.</param>
            <returns>The copied array</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsUtil.AddRange``1(System.Collections.Generic.List{``0},System.Int32,``0)">
            <summary>
            Add the item to the list a number of times.
            </summary>
            <typeparam name="T">The lists type</typeparam>
            <param name="list">The list to add to.</param>
            <param name="count">The number of items to added</param>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsUtil.ToVector(CGALDotNetGeometry.Numerics.HPoint3d[0:,0:])">
            <summary>
            
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsUtil.ToVector(CGALDotNetGeometry.Numerics.Point3d[0:,0:])">
            <summary>
            
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsUtil.Binomial(System.Int32,System.Int32)">
            <summary>
            Compute the binomial coefficient
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Nurbs.NurbsUtil.MapToRange(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Map numbers from one interval to another
            </summary>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Box2d">
            <summary>
            A 2D box represented by its min and max values.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Box2d.Min">
            <summary>
            The boxes min point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Box2d.Max">
            <summary>
            The boxes max point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.#ctor(System.Double,System.Double)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.#ctor(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2d.Bounds">
            <summary>
            The boxes bounding box is just itself.
            Needed for the IShape interface.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2d.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2d.Corner00">
            <summary>
            The boxes lower left corner.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2d.Corner10">
            <summary>
            The boxes lower right corner.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2d.Corner11">
            <summary>
            The boxes upper right corner.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2d.Corner01">
            <summary>
            The boxes upper left corner.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2d.Center">
            <summary>
            The center of the box.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2d.Size">
            <summary>
            The size of the boxes sides.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2d.Width">
            <summary>
            The size of the box on the x axis.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2d.Height">
            <summary>
            The size of the box on the y axis.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2d.Area">
            <summary>
            The area of the box.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.Equals(System.Object)">
            <summary>
            Is the box equal to this obj.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the box equal to this obj.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.Equals(CGALDotNetGeometry.Shapes.Box2d)">
            <summary>
            Is the box equal to the other box.
            </summary>
            <param name="box">The other box.</param>
            <returns>Is the box equal to the other box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.GetHashCode">
            <summary>
            The boxes hash code.
            </summary>
            <returns>The boxes hash code.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.GetCorners">
            <summary>
            Get the boxes corner points as a array.
            </summary>
            <returns>The boxes corner points as a array</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.GetCorners(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point2d})">
            <summary>
            Copy the boxes corner points in the array.
            </summary>
            <param name="corners">A array that has a size of at least 4.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.GetCornersXZ(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point3d},System.Double)">
            <summary>
            Copy the boxes corner points in the array.
            Convert the 2d points into 3d points with the
            y component now as the z component.
            </summary>
            <param name="corners">A array that has a size of at least 4.</param>
            <param name="y">The 3d points y value.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.Enlarge(CGALDotNetGeometry.Shapes.Box2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Returns the bounding box containing this box and the given point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.Enlarge(CGALDotNetGeometry.Shapes.Box2d,CGALDotNetGeometry.Shapes.Box2d)">
            <summary>
            Returns the bounding box containing this box and the given box.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.Expand(CGALDotNetGeometry.Shapes.Box2d,System.Double)">
            <summary>
            Return a new box expanded by the amount.
            </summary>
            <param name="box">The box to expand.</param>
            <param name="amount">The amount to expand.</param>
            <returns>The expanded box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.Intersects(CGALDotNetGeometry.Shapes.Box2d,System.Boolean)">
            <summary>
            Returns true if this box intersects the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Returns true if this box intersects the other box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.Contains(CGALDotNetGeometry.Shapes.Box2d,System.Boolean)">
            <summary>
            Does the box fully contain the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Does the box fully contain the other box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.Contains(CGALDotNetGeometry.Numerics.Point2d,System.Boolean)">
            <summary>
            Does the box contain the point.
            </summary>
            <param name="point">The point.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>True if the box contains the point.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.Closest(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Find the closest point to the box.
            If point inside box return point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.SignedDistance(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Return the signed distance to the point. 
            If point is outside box field is positive.
            If point is inside box field is negative.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.Round(System.Int32)">
            <summary>
            Round the boxes components.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.CalculateBounds(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point2d})">
            <summary>
            Caculate the bounding box of the points.
            </summary>
            <param name="points">The points.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.CalculateBounds(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Calculate the bounds of 2 points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2d.CalculateBounds(System.Collections.Generic.IList{CGALDotNetGeometry.Shapes.Segment2d})">
            <summary>
            Caculate the bounding box of a set of segments.
            </summary>
            <param name="segments">The segments.</param>
            <returns>The bounding box</returns>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Box2f">
            <summary>
            A 2D box represented by its min and max values.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Box2f.Min">
            <summary>
            The boxes min point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Box2f.Max">
            <summary>
            The boxes max point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.#ctor(System.Single,System.Single)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.#ctor(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2f.Bounds">
            <summary>
            The boxes bounding box is just itself.
            Needed for the IShape interface.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2f.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2f.Corner00">
            <summary>
            The boxes lower left corner.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2f.Corner10">
            <summary>
            The boxes lower right corner.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2f.Corner11">
            <summary>
            The boxes upper right corner.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2f.Corner01">
            <summary>
            The boxes upper left corner.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2f.Center">
            <summary>
            The center of the box.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2f.Size">
            <summary>
            The size of the boxes sides.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2f.Width">
            <summary>
            The size of the box on the x axis.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2f.Height">
            <summary>
            The size of the box on the y axis.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2f.Area">
            <summary>
            The area of the box.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.Equals(System.Object)">
            <summary>
            Is the box equal to this obj.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the box equal to this obj.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.Equals(CGALDotNetGeometry.Shapes.Box2f)">
            <summary>
            Is the box equal to the other box.
            </summary>
            <param name="box">The other box.</param>
            <returns>Is the box equal to the other box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.GetHashCode">
            <summary>
            The boxes hash code.
            </summary>
            <returns>The boxes hash code.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.GetCorners">
            <summary>
            Get the boxes corner points as a array.
            </summary>
            <returns>The boxes corner points as a array</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.GetCorners(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point2f})">
            <summary>
            Copy the boxes corner points in the array.
            </summary>
            <param name="corners">A array that has a size of at least 4.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.GetCornersXZ(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point3f},System.Single)">
            <summary>
            Copy the boxes corner points in the array.
            Convert the 2f points into 3f points with the
            y component now as the z component.
            </summary>
            <param name="corners">A array that has a size of at least 4.</param>
            <param name="y">The 3f points y value.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.Enlarge(CGALDotNetGeometry.Shapes.Box2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Returns the bounding box containing this box and the given point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.Enlarge(CGALDotNetGeometry.Shapes.Box2f,CGALDotNetGeometry.Shapes.Box2f)">
            <summary>
            Returns the bounding box containing this box and the given box.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.Expand(CGALDotNetGeometry.Shapes.Box2f,System.Single)">
            <summary>
            Return a new box expanded by the amount.
            </summary>
            <param name="box">The box to expand.</param>
            <param name="amount">The amount to expand.</param>
            <returns>The expanded box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.Intersects(CGALDotNetGeometry.Shapes.Box2f,System.Boolean)">
            <summary>
            Returns true if this box intersects the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Returns true if this box intersects the other box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.Contains(CGALDotNetGeometry.Shapes.Box2f,System.Boolean)">
            <summary>
            Does the box fully contain the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Does the box fully contain the other box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.Contains(CGALDotNetGeometry.Numerics.Point2f,System.Boolean)">
            <summary>
            Does the box contain the point.
            </summary>
            <param name="point">The point.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>True if the box contains the point.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.Closest(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Find the closest point to the box.
            If point inside box return point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.SignedDistance(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Return the signed distance to the point. 
            If point is outside box field is positive.
            If point is inside box field is negative.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.Round(System.Int32)">
            <summary>
            Round the boxes components.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.CalculateBounds(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point2f})">
            <summary>
            Caculate the bounding box of the points.
            </summary>
            <param name="points">The points.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.CalculateBounds(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Calculate the bounds of 2 points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2f.CalculateBounds(System.Collections.Generic.IList{CGALDotNetGeometry.Shapes.Segment2f})">
            <summary>
            Caculate the bounding box of a set of segments.
            </summary>
            <param name="segments">The segments.</param>
            <returns>The bounding box</returns>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Box2i">
            <summary>
            A 2D box represented by its min and max values.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Box2i.Min">
            <summary>
            The boxes min point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Box2i.Max">
            <summary>
            The boxes max point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2i.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2i.#ctor(CGALDotNetGeometry.Numerics.Point2i,CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2i.Corner00">
            <summary>
            The boxes lower left corner.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2i.Corner10">
            <summary>
            The boxes lower right corner.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2i.Corner11">
            <summary>
            The boxes upper right corner.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2i.Corner01">
            <summary>
            The boxes upper left corner.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2i.Center">
            <summary>
            The center of the box.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2i.Size">
            <summary>
            The size of the boxes sides.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2i.Width">
            <summary>
            The size of the box on the x axis.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2i.Height">
            <summary>
            The size of the box on the y axis.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box2i.Area">
            <summary>
            The area of the box.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2i.EnumeratePerimeter(System.Int32)">
            <summary>
            Enumerate each point on the boxes perimeter in ccw order.
            </summary>
            <returns></returns>
            <param name="width">The width of the perimeter.</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2i.EnumerateBounds(System.Boolean)">
            <summary>
            Enumerate each point in the box.
            </summary>
            <param name="inclusive">Should the max values be included.</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2i.Equals(System.Object)">
            <summary>
            Is the box equal to this obj.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the box equal to this obj.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2i.Equals(CGALDotNetGeometry.Shapes.Box2i)">
            <summary>
            Is the box equal to the other box.
            </summary>
            <param name="box">The other box.</param>
            <returns>Is the box equal to the other box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2i.GetHashCode">
            <summary>
            The boxes hash code.
            </summary>
            <returns>The boxes hash code.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2i.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2i.GetCorners">
            <summary>
            Get the boxes corner points as a array.
            </summary>
            <returns>The boxes corner points as a array</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2i.GetCorners(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point2i})">
            <summary>
            Copy the boxes corner points in the array.
            </summary>
            <param name="corners">A array that has a size of at least 4.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2i.GetCornersXZ(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point3i},System.Int32)">
            <summary>
            Copy the boxes corner points in the array.
            Convert the 2i points into 3i points with the
            y component now as the z component.
            </summary>
            <param name="corners">A array that has a size of at least 4.</param>
            <param name="y">The 3i points y value.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2i.Enlarge(CGALDotNetGeometry.Shapes.Box2i,CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            Returns the bounding box containing this box and the given point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2i.Enlarge(CGALDotNetGeometry.Shapes.Box2i,CGALDotNetGeometry.Shapes.Box2i)">
            <summary>
            Returns the bounding box containing this box and the given box.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2i.Expand(CGALDotNetGeometry.Shapes.Box2i,System.Int32)">
            <summary>
            Return a new box expanded by the amount.
            </summary>
            <param name="box">The box to expand.</param>
            <param name="amount">The amount to expand.</param>
            <returns>The expanded box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2i.Intersects(CGALDotNetGeometry.Shapes.Box2i,System.Boolean)">
            <summary>
            Returns true if this box intersects the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Returns true if this box intersects the other box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2i.Contains(CGALDotNetGeometry.Shapes.Box2i,System.Boolean)">
            <summary>
            Does the box fully contain the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Does the box fully contain the other box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2i.Contains(CGALDotNetGeometry.Numerics.Point2i,System.Boolean)">
            <summary>
            Does the box contain the point.
            </summary>
            <param name="point">The point.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>True if the box contains the point.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2i.Closest(CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            Find the closest point to the box.
            If point inside box return point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2i.CalculateBounds(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point2i})">
            <summary>
            Caculate the bounding box of the points.
            </summary>
            <param name="points">The points.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box2i.CalculateBounds(CGALDotNetGeometry.Numerics.Point2i,CGALDotNetGeometry.Numerics.Point2i)">
            <summary>
            Calculate the bounds of 2 points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Box3d">
            <summary>
            A 3D box represented by its min and max values.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Box3d.Min">
            <summary>
            The boxes min point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Box3d.Max">
            <summary>
            The boxes max point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.#ctor(System.Double,System.Double)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.#ctor(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3d.Bounds">
            <summary>
            The boxes bounding box is just itself.
            Needed for the IShape interface.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3d.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3d.Center">
            <summary>
            The center of the box.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3d.Size">
            <summary>
            The size of the boxes sides.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3d.Width">
            <summary>
            The size of the box on the x axis.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3d.Height">
            <summary>
            The size of the box on the y axis.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3d.Depth">
            <summary>
            The size of the box on the z axis.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3d.Volume">
            <summary>
            The volume of the box.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3d.SurfaceArea">
            <summary>
            THe boxes surface area.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.Equals(System.Object)">
            <summary>
            Is the box equal to this obj.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the box equal to this obj.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.Equals(CGALDotNetGeometry.Shapes.Box3d)">
            <summary>
            Is the box equal to the other box.
            </summary>
            <param name="box">The other box.</param>
            <returns>Is the box equal to the other box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.GetHashCode">
            <summary>
            The boxes hash code.
            </summary>
            <returns>The boxes hash code.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.GetCorners">
            <summary>
            Get the boxes corner points as a array.
            </summary>
            <returns>The boxes corner points as a array</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.GetCorners(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point3d})">
            <summary>
            Copy the boxes corner points in the array.
            </summary>
            <param name="corners">A array that has a size of at least 8.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.GetCorners(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point4d})">
            <summary>
            Copy the boxes corner points in the array.
            </summary>
            <param name="corners">A array that has a size of at least 8.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.Enlarge(CGALDotNetGeometry.Shapes.Box3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Returns the bounding box containing this box and the given point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.Enlarge(CGALDotNetGeometry.Shapes.Box3d,CGALDotNetGeometry.Shapes.Box3d)">
            <summary>
            Returns the bounding box containing this box and the given box.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.Expand(CGALDotNetGeometry.Shapes.Box3d,System.Double)">
            <summary>
            Return a new box expanded by the amount.
            </summary>
            <param name="box">The box to expand.</param>
            <param name="amount">The amount to expand.</param>
            <returns>The expanded box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.Intersects(CGALDotNetGeometry.Shapes.Box3d,System.Boolean)">
            <summary>
            Returns true if this box intersects the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Returns true if this box intersects the other box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.Contains(CGALDotNetGeometry.Shapes.Box3d,System.Boolean)">
            <summary>
            Does the box fully contain the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Does the box fully contain the other box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.Contains(CGALDotNetGeometry.Numerics.Point3d,System.Boolean)">
            <summary>
            Does the box contain the point.
            </summary>
            <param name="point">The point.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>True if the box contains the point.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.Closest(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Find the closest point to the box.
            If point inside box return point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.SignedDistance(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Return the signed distance to the point. 
            If point is outside box field is positive.
            If point is inside box field is negative.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.Round(System.Int32)">
            <summary>
            Round the boxes components.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.CalculateBounds(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point3d})">
            <summary>
            Caculate the bounding box of the points.
            </summary>
            <param name="points">The points.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.CalculateBounds(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Calculate the bounds of 2 points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3d.CalculateBounds(System.Collections.Generic.IList{CGALDotNetGeometry.Shapes.Segment3d})">
            <summary>
            Caculate the bounding box of a set of segments.
            </summary>
            <param name="segments">The segments.</param>
            <returns>The bounding box</returns>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Box3f">
            <summary>
            A 3D box represented by its min and max values.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Box3f.Min">
            <summary>
            The boxes min point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Box3f.Max">
            <summary>
            The boxes max point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.#ctor(System.Single,System.Single)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.#ctor(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3f.Bounds">
            <summary>
            The boxes bounding box is just itself.
            Needed for the IShape interface.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3f.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3f.Center">
            <summary>
            The center of the box.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3f.Size">
            <summary>
            The size of the boxes sides.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3f.Width">
            <summary>
            The size of the box on the x axis.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3f.Height">
            <summary>
            The size of the box on the y axis.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3f.Depth">
            <summary>
            The size of the box on the z axis.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3f.Volume">
            <summary>
            The volume of the box.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3f.SurfaceArea">
            <summary>
            THe boxes surface area.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.Equals(System.Object)">
            <summary>
            Is the box equal to this obj.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the box equal to this obj.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.Equals(CGALDotNetGeometry.Shapes.Box3f)">
            <summary>
            Is the box equal to the other box.
            </summary>
            <param name="box">The other box.</param>
            <returns>Is the box equal to the other box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.GetHashCode">
            <summary>
            The boxes hash code.
            </summary>
            <returns>The boxes hash code.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.GetCorners">
            <summary>
            Get the boxes corner points as a array.
            </summary>
            <returns>The boxes corner points as a array</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.GetCorners(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point3f})">
            <summary>
            Copy the boxes corner points in the array.
            </summary>
            <param name="corners">A array that has a size of at least 8.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.GetCorners(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point4d})">
            <summary>
            Copy the boxes corner points in the array.
            </summary>
            <param name="corners">A array that has a size of at least 8.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.Enlarge(CGALDotNetGeometry.Shapes.Box3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Returns the bounding box containing this box and the given point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.Enlarge(CGALDotNetGeometry.Shapes.Box3f,CGALDotNetGeometry.Shapes.Box3f)">
            <summary>
            Returns the bounding box containing this box and the given box.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.Expand(CGALDotNetGeometry.Shapes.Box3f,System.Single)">
            <summary>
            Return a new box expanded by the amount.
            </summary>
            <param name="box">The box to expand.</param>
            <param name="amount">The amount to expand.</param>
            <returns>The expanded box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.Intersects(CGALDotNetGeometry.Shapes.Box3f,System.Boolean)">
            <summary>
            Returns true if this box intersects the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Returns true if this box intersects the other box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.Contains(CGALDotNetGeometry.Shapes.Box3f,System.Boolean)">
            <summary>
            Does the box fully contain the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Does the box fully contain the other box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.Contains(CGALDotNetGeometry.Numerics.Point3f,System.Boolean)">
            <summary>
            Does the box contain the point.
            </summary>
            <param name="point">The point.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>True if the box contains the point.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.Closest(CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Find the closest point to the box.
            If point inside box return point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.SignedDistance(CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Return the signed distance to the point. 
            If point is outside box field is positive.
            If point is inside box field is negative.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.Round(System.Int32)">
            <summary>
            Round the boxes components.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.CalculateBounds(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point3f})">
            <summary>
            Caculate the bounding box of the points.
            </summary>
            <param name="points">The points.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.CalculateBounds(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Calculate the bounds of 2 points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3f.CalculateBounds(System.Collections.Generic.IList{CGALDotNetGeometry.Shapes.Segment3f})">
            <summary>
            Caculate the bounding box of a set of segments.
            </summary>
            <param name="segments">The segments.</param>
            <returns>The bounding box</returns>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Box3i">
            <summary>
            A 3D box represented by its min and max values.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Box3i.Min">
            <summary>
            The boxes min point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Box3i.Max">
            <summary>
            The boxes max point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3i.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3i.#ctor(CGALDotNetGeometry.Numerics.Point3i,CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3i.Center">
            <summary>
            The center of the box.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3i.Size">
            <summary>
            The size of the boxes sides.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3i.Width">
            <summary>
            The size of the box on the x axis.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3i.Height">
            <summary>
            The size of the box on the y axis.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3i.Depth">
            <summary>
            The size of the box on the z axis.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3i.Volume">
            <summary>
            The volume of the box.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Box3i.SurfaceArea">
            <summary>
            THe boxes surface area.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3i.Equals(System.Object)">
            <summary>
            Is the box equal to this obj.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the box equal to this obj.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3i.Equals(CGALDotNetGeometry.Shapes.Box3i)">
            <summary>
            Is the box equal to the other box.
            </summary>
            <param name="box">The other box.</param>
            <returns>Is the box equal to the other box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3i.GetHashCode">
            <summary>
            The boxes hash code.
            </summary>
            <returns>The boxes hash code.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3i.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3i.GetCorners">
            <summary>
            Get the boxes corner points as a array.
            </summary>
            <returns>The boxes corner points as a array</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3i.GetCorners(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point3i})">
            <summary>
            Copy the boxes corner points in the array.
            </summary>
            <param name="corners">A array that has a size of at least 8.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3i.GetCorners(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point4d})">
            <summary>
            Copy the boxes corner points in the array.
            </summary>
            <param name="corners">A array that has a size of at least 8.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3i.Enlarge(CGALDotNetGeometry.Shapes.Box3i,CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            Returns the bounding box containing this box and the given point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3i.Enlarge(CGALDotNetGeometry.Shapes.Box3i,CGALDotNetGeometry.Shapes.Box3i)">
            <summary>
            Returns the bounding box containing this box and the given box.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3i.Expand(CGALDotNetGeometry.Shapes.Box3i,System.Int32)">
            <summary>
            Return a new box expanded by the amount.
            </summary>
            <param name="box">The box to expand.</param>
            <param name="amount">The amount to expand.</param>
            <returns>The expanded box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3i.Intersects(CGALDotNetGeometry.Shapes.Box3i,System.Boolean)">
            <summary>
            Returns true if this box intersects the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Returns true if this box intersects the other box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3i.Contains(CGALDotNetGeometry.Shapes.Box3i,System.Boolean)">
            <summary>
            Does the box fully contain the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Does the box fully contain the other box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3i.Contains(CGALDotNetGeometry.Numerics.Point3i,System.Boolean)">
            <summary>
            Does the box contain the point.
            </summary>
            <param name="point">The point.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>True if the box contains the point.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3i.Closest(CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            Find the closest point to the box.
            If point inside box return point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3i.CalculateBounds(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point3i})">
            <summary>
            Caculate the bounding box of the points.
            </summary>
            <param name="points">The points.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Box3i.CalculateBounds(CGALDotNetGeometry.Numerics.Point3i,CGALDotNetGeometry.Numerics.Point3i)">
            <summary>
            Calculate the bounds of 2 points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Circle2d.Radius2">
            <summary>
            The squared radius.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Circle2d.Diameter">
            <summary>
            The circles diameter.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Circle2d.Area">
            <summary>
            The circles area.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Circle2d.Circumference">
            <summary>
            the circles circumference.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Circle2d.Bounds">
            <summary>
            Calculate the bounding box.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2d.GetHashCode">
            <summary>
            The circles hashcode.
            </summary>
            <returns>The circles hashcode.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2d.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2d.Closest(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Find the closest point to the circle.
            If point inside circle return point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2d.SignedDistance(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Return the signed distance to the point. 
            If point is outside circle field is positive.
            If point is inside circle field is negative.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2d.Contains(CGALDotNetGeometry.Numerics.Point2d,System.Boolean)">
            <summary>
            Does the circle contain the point.
            </summary>
            <param name="point">The point.</param>
            <param name="includeBorder">Does the border conunt as inside the circle.</param>
            <returns>true if circle contains point</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2d.Contains(CGALDotNetGeometry.Shapes.Box2d,System.Boolean)">
            <summary>
            Does the circle fully contain the box.
            </summary>
            <param name="box">The box.</param>
            <param name="includeBorder">Does the border conunt as inside the circle.</param>
            <returns>Does the circle fully contain the box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2d.Intersects(CGALDotNetGeometry.Shapes.Circle2d,System.Boolean)">
            <summary>
            Does this circle intersect with the other circle.
            </summary>
            <param name="circle">The other circle</param>
            <param name="includeBorder">Does the border conunt as inside the circle.</param>
            <returns>True if the circles intersect</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2d.Intersects(CGALDotNetGeometry.Shapes.Box2d,System.Boolean)">
            <summary>
            Does the circle intersect the box.
            </summary>
            <param name="box">The box.</param>
            <param name="includeBorder">Does the border conunt as inside the circle.</param>
            <returns>Does the circle intersect the box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2d.Enlarge(CGALDotNetGeometry.Shapes.Circle2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Enlarge the circle so it contains the point p.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2d.InCircle(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Returns true if the point d is inside the circle defined by the points a, b, c.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2d.CircumCircle(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Creates a circle that has both points on its circumference.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2d.CircumCircle(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Creates a circle that has all 3 points on its circumference.
            From MathWorld: http://mathworld.wolfram.com/Circumcircle.html.
            Fails if the points are colinear.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2d.CalculateBounds(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Creates a circle that contains all three point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2d.CalculateBounds(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point2d})">
            <summary>
            Calculate the bounding circle that contains 
            all the points in the list.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2d.ExtremePoints(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point2d})">
            <summary>
            Finds which axis contains the two most extreme points
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Circle2f.Radius2">
            <summary>
            The squared radius.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Circle2f.Diameter">
            <summary>
            The circles diameter.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Circle2f.Area">
            <summary>
            The circles area.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Circle2f.Circumference">
            <summary>
            the circles circumference.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Circle2f.Bounds">
            <summary>
            Calculate the bounding box.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2f.GetHashCode">
            <summary>
            The circles hashcode.
            </summary>
            <returns>The circles hashcode.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2f.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2f.Closest(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Find the closest point to the circle.
            If point inside circle return point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2f.SignedDistance(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Return the signed distance to the point. 
            If point is outside circle field is positive.
            If point is inside circle field is negative.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2f.Contains(CGALDotNetGeometry.Numerics.Point2f,System.Boolean)">
            <summary>
            Does the circle contain the point.
            </summary>
            <param name="point">The point.</param>
            <param name="includeBorder">Does the border conunt as inside the circle.</param>
            <returns>true if circle contains point</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2f.Contains(CGALDotNetGeometry.Shapes.Box2f,System.Boolean)">
            <summary>
            Does the circle fully contain the box.
            </summary>
            <param name="box">The box.</param>
            <param name="includeBorder">Does the border conunt as inside the circle.</param>
            <returns>Does the circle fully contain the box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2f.Intersects(CGALDotNetGeometry.Shapes.Circle2f,System.Boolean)">
            <summary>
            Does this circle intersect with the other circle.
            </summary>
            <param name="circle">The other circle</param>
            <param name="includeBorder">Does the border conunt as inside the circle.</param>
            <returns>True if the circles intersect</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2f.Intersects(CGALDotNetGeometry.Shapes.Box2f,System.Boolean)">
            <summary>
            Does the circle intersect the box.
            </summary>
            <param name="box">The box.</param>
            <param name="includeBorder">Does the border conunt as inside the circle.</param>
            <returns>Does the circle intersect the box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2f.Enlarge(CGALDotNetGeometry.Shapes.Circle2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Enlarge the circle so it contains the point p.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2f.InCircle(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Returns true if the point d is inside the circle defined by the points a, b, c.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2f.CircumCircle(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Creates a circle that has both points on its circumference.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2f.CircumCircle(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Creates a circle that has all 3 points on its circumference.
            From MathWorld: http://mathworld.wolfram.com/Circumcircle.html.
            Fails if the points are colinear.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2f.CalculateBounds(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Creates a circle that contains all three point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2f.CalculateBounds(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point2f})">
            <summary>
            Calculate the bounding circle that contains 
            all the points in the list.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Circle2f.ExtremePoints(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point2f})">
            <summary>
            Finds which axis contains the two most extreme points
            </summary>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Line2d">
            <summary>
             Represents a line from three coefficients
             a, b and c, where ax + by + c = 0 holds.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
             Create a new line from three coefficients
             a, b and c, where ax + by + c = 0 holds.
            </summary>
            <param name="a">The constant in ax.</param>
            <param name="b">The constant in by</param>
            <param name="c">The constant c</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2d.#ctor(System.Double,System.Double)">
            <summary>
             Create a new line from the slope and the y 
             intercept, where y = mx + b holds.
            </summary>
            <param name="m">The lines slope.</param>
            <param name="b">The y intercept.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2d.#ctor(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Create a new line that passes through the two points.
            </summary>
            <param name="p1">Point 1.</param>
            <param name="p2">Point 2.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Line2d.Slope">
            <summary>
            Find the slope of the line.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Line2d.IsAscending">
            <summary>
            Determines whether the line is ascending
            (that is, makes an angle with the positive
            direction of the X axis that lies in (0, pi/2).
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Line2d.IsVertical">
            <summary>
            Determines whether the line is vertical
            (that is, makes an angle with the positive
            direction of the X axis that is equal to pi/2.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Line2d.IsDescending">
            <summary>
            Determines whether the line is descending
            (that is, makes an angle with the positive
            direction of the X axis that lies in (pi/2, pi).
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Line2d.IsHorizontal">
            <summary>
            Determines whether the line is horizontal
            (that is, makes an angle with the positive
            direction of the X axis that is equal to pi.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Line2d.IsUndefined">
            <summary>
            Determines whether the line is undefined
            (e.g.two equal points were passed to the constructor).
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Line2d.Angle">
            <summary>
            Calculates the angle that the line makes
            with the positive direction of the X axis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2d.Equals(System.Object)">
            <summary>
            Is the line equal to the other object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Is the line equal to the other object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2d.Equals(CGALDotNetGeometry.Shapes.Line2d)">
            <summary>
            Is the line equal to the other line.
            </summary>
            <param name="line">The other line.</param>
            <returns>Is the line equal to the other line.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2d.GetHashCode">
            <summary>
            The lines hash code.
            </summary>
            <returns>The lines hash code.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2d.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2d.X(System.Double)">
            <summary>
            Calculates the X coordinate of a point on the line by its Y coordinate.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2d.Y(System.Double)">
            <summary>
            Calculates the Y coordinate of a point on the line by its X coordinate.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2d.PointOnLine(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Determines whether the point lies on the line.
            </summary>
            <param name="p"></param>
            <returns>if the point lies on the line</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2d.PerpendicularLine(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Calculates the perpendicular line that
            passes through the given point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2d.IsLeftPoint(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Determines whether the point lies
            on the left side of the line.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2d.IsRightPoint(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Determines whether the point lies
            on the right side of the line.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2d.AreEquivalent(CGALDotNetGeometry.Shapes.Line2d)">
            <summary>
            Determine if the two lines are the equivalent
            even though they may have a different equation.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2d.Intersects(CGALDotNetGeometry.Shapes.Line2d,CGALDotNetGeometry.Numerics.Point2d@)">
            <summary>
            Calculates the intersection of two lines.
            </summary>
            <param name="line">the other line</param>
            <param name="p">intersection point</param>
            <returns>if lines intersect</returns>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Line2f">
            <summary>
             Represents a line from three coefficients
             a, b and c, where ax + by + c = 0 holds.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
             Create a new line from three coefficients
             a, b and c, where ax + by + c = 0 holds.
            </summary>
            <param name="a">The constant in ax.</param>
            <param name="b">The constant in by</param>
            <param name="c">The constant c</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2f.#ctor(System.Single,System.Single)">
            <summary>
             Create a new line from the slope and the y 
             intercept, where y = mx + b holds.
            </summary>
            <param name="m">The lines slope.</param>
            <param name="b">The y intercept.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2f.#ctor(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Create a new line that passes through the two points.
            </summary>
            <param name="p1">Point 1.</param>
            <param name="p2">Point 2.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Line2f.Slope">
            <summary>
            Find the slope of the line.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Line2f.IsAscending">
            <summary>
            Determines whether the line is ascending
            (that is, makes an angle with the positive
            direction of the X axis that lies in (0, pi/2).
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Line2f.IsVertical">
            <summary>
            Determines whether the line is vertical
            (that is, makes an angle with the positive
            direction of the X axis that is equal to pi/2.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Line2f.IsDescending">
            <summary>
            Determines whether the line is descending
            (that is, makes an angle with the positive
            direction of the X axis that lies in (pi/2, pi).
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Line2f.IsHorizontal">
            <summary>
            Determines whether the line is horizontal
            (that is, makes an angle with the positive
            direction of the X axis that is equal to pi.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Line2f.IsUndefined">
            <summary>
            Determines whether the line is undefined
            (e.g.two equal points were passed to the constructor).
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Line2f.Angle">
            <summary>
            Calculates the angle that the line makes
            with the positive direction of the X axis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2f.Equals(System.Object)">
            <summary>
            Is the line equal to the other object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Is the line equal to the other object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2f.Equals(CGALDotNetGeometry.Shapes.Line2f)">
            <summary>
            Is the line equal to the other line.
            </summary>
            <param name="line">The other line.</param>
            <returns>Is the line equal to the other line.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2f.GetHashCode">
            <summary>
            The lines hash code.
            </summary>
            <returns>The lines hash code.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2f.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2f.X(System.Single)">
            <summary>
            Calculates the X coordinate of a point on the line by its Y coordinate.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2f.Y(System.Single)">
            <summary>
            Calculates the Y coordinate of a point on the line by its X coordinate.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2f.PointOnLine(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Determines whether the point lies on the line.
            </summary>
            <param name="p"></param>
            <returns>if the point lies on the line</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2f.PerpendicularLine(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Calculates the perpendicular line that
            passes through the given point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2f.IsLeftPoint(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Determines whether the point lies
            on the left side of the line.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2f.IsRightPoint(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Determines whether the point lies
            on the right side of the line.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2f.AreEquivalent(CGALDotNetGeometry.Shapes.Line2f)">
            <summary>
            Determine if the two lines are the equivalent
            even though they may have a different equation.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line2f.Intersects(CGALDotNetGeometry.Shapes.Line2f,CGALDotNetGeometry.Numerics.Point2f@)">
            <summary>
            Calculates the intersection of two lines.
            </summary>
            <param name="line">the other line</param>
            <param name="p">intersection point</param>
            <returns>if lines intersect</returns>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Line3d">
            <summary>
            A 3D Line struct represented by a position and a direction.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Line3d.Position">
            <summary>
            The Lines position.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Line3d.Direction">
            <summary>
            The Lines direction.
            Might not be normalized.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line3d.#ctor(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Construct a Line from a point and the direction.
            </summary>
            <param name="position">The Lines position.</param>
            <param name="direction">The Lines direction (will be normalized)</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line3d.op_Equality(CGALDotNetGeometry.Shapes.Line3d,CGALDotNetGeometry.Shapes.Line3d)">
            <summary>
            Check if the two Lines are equal.
            </summary>
            <param name="l1">The first Line.</param>
            <param name="l2">The second Line.</param>
            <returns>True if the two Lines are equal.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line3d.op_Inequality(CGALDotNetGeometry.Shapes.Line3d,CGALDotNetGeometry.Shapes.Line3d)">
            <summary>
            Check if the two Lines are not equal.
            </summary>
            <param name="l1">The first Line.</param>
            <param name="l2">The second Line.</param>
            <returns>True if the two Lines are not equal.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line3d.Equals(System.Object)">
            <summary>
            Is the Line equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the Line equal to this object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line3d.Equals(CGALDotNetGeometry.Shapes.Line3d)">
            <summary>
            Is the Line equal to the other Line.
            </summary>
            <param name="Line">The over Line.</param>
            <returns>Is the Line equal to the other Line.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line3d.GetHashCode">
            <summary>
            The Lines hashcode.
            </summary>
            <returns>The Lines hashcode.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line3d.ToString">
            <summary>
            The Lines as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line3d.Normalize">
            <summary>
            Normalize the lines direction.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line3d.Round(System.Int32)">
            <summary>
            Round the Lines position and direction.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Line3f">
            <summary>
            A 3f Line struct represented by a position and a direction.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Line3f.Position">
            <summary>
            The Lines position.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Line3f.Direction">
            <summary>
            The Lines direction.
            Might not be normalized.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line3f.#ctor(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Construct a Line from a point and the direction.
            </summary>
            <param name="position">The Lines position.</param>
            <param name="direction">The Lines direction (will be normalized)</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line3f.op_Equality(CGALDotNetGeometry.Shapes.Line3f,CGALDotNetGeometry.Shapes.Line3f)">
            <summary>
            Check if the two Lines are equal.
            </summary>
            <param name="l1">The first Line.</param>
            <param name="l2">The second Line.</param>
            <returns>True if the two Lines are equal.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line3f.op_Inequality(CGALDotNetGeometry.Shapes.Line3f,CGALDotNetGeometry.Shapes.Line3f)">
            <summary>
            Check if the two Lines are not equal.
            </summary>
            <param name="l1">The first Line.</param>
            <param name="l2">The second Line.</param>
            <returns>True if the two Lines are not equal.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line3f.Equals(System.Object)">
            <summary>
            Is the Line equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the Line equal to this object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line3f.Equals(CGALDotNetGeometry.Shapes.Line3f)">
            <summary>
            Is the Line equal to the other Line.
            </summary>
            <param name="Line">The over Line.</param>
            <returns>Is the Line equal to the other Line.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line3f.GetHashCode">
            <summary>
            The Lines hashcode.
            </summary>
            <returns>The Lines hashcode.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line3f.ToString">
            <summary>
            The Lines as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line3f.Normalize">
            <summary>
            Normalize the lines direction.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Line3f.Round(System.Int32)">
            <summary>
            Round the Lines position and direction.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Plane3d">
            <summary>
            Plane struct defined by a position and direction.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Plane3d.UnitX">
            <summary>
            A plane facing the x axis.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Plane3d.UnitY">
            <summary>
            A plane facing the y axis.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Plane3d.UnitZ">
            <summary>
            A plane facing the z axis.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Plane3d.Position">
            <summary>
            The planes position.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Plane3d.Normal">
            <summary>
            The planes direction.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3d.#ctor(CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Create a new plane.
            </summary>
            <param name="normal">The planes direction.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3d.#ctor(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Create a new plane.
            </summary>
            <param name="position">The planes position.</param>
            <param name="normal">The planes direction.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3d.#ctor(CGALDotNetGeometry.Numerics.Vector3d,System.Double)">
            <summary>
            Create a new plane.
            </summary>
            <param name="normal">The planes direction.</param>
            <param name="distance">The planes distance from the origin.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3d.#ctor(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            From three noncollinear points (ordered ccw).
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Plane3d.Distance">
            <summary>
            The planes distance from the origin.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Plane3d.SqrDistance">
            <summary>
            The planes square distance from the origin.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3d.op_Equality(CGALDotNetGeometry.Shapes.Plane3d,CGALDotNetGeometry.Shapes.Plane3d)">
            <summary>
            Check if the two planes are equal.
            </summary>
            <param name="p1">The first plane.</param>
            <param name="p2">The second plane.</param>
            <returns>True if the planes are equal.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3d.op_Inequality(CGALDotNetGeometry.Shapes.Plane3d,CGALDotNetGeometry.Shapes.Plane3d)">
            <summary>
            Check if the two planes are not equal.
            </summary>
            <param name="p1">The first plane.</param>
            <param name="p2">The second plane.</param>
            <returns>True if the planes are not equal.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3d.Equals(System.Object)">
            <summary>
            Check if this plane is equal to the other object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Are these planes equal.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3d.Equals(CGALDotNetGeometry.Shapes.Plane3d)">
            <summary>
            Check if this plane is equal to the other plane.
            </summary>
            <param name="plane">The other plane.</param>
            <returns>Are these planes equal.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3d.GetHashCode">
            <summary>
            The planes hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3d.ToString">
            <summary>
            The plane as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3d.Closest(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            The closest point on the plane to the point p.
            </summary>
            <param name="p">The point.</param>
            <returns>The closest point on the plane.</returns>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Plane3f">
            <summary>
            Plane struct defined by a position and direction.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Plane3f.UnitX">
            <summary>
            A plane facing the x axis.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Plane3f.UnitY">
            <summary>
            A plane facing the y axis.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Plane3f.UnitZ">
            <summary>
            A plane facing the z axis.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Plane3f.Position">
            <summary>
            The planes position.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Plane3f.Normal">
            <summary>
            The planes direction.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3f.#ctor(CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Create a new plane.
            </summary>
            <param name="normal">The planes direction.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3f.#ctor(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Create a new plane.
            </summary>
            <param name="position">The planes position.</param>
            <param name="normal">The planes direction.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3f.#ctor(CGALDotNetGeometry.Numerics.Vector3f,System.Single)">
            <summary>
            Create a new plane.
            </summary>
            <param name="normal">The planes direction.</param>
            <param name="distance">The planes distance from the origin.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3f.#ctor(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            From three noncollinear points (ordered ccw).
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Plane3f.Distance">
            <summary>
            The planes distance from the origin.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Plane3f.SqrDistance">
            <summary>
            The planes square distance from the origin.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3f.op_Equality(CGALDotNetGeometry.Shapes.Plane3f,CGALDotNetGeometry.Shapes.Plane3f)">
            <summary>
            Check if the two planes are equal.
            </summary>
            <param name="p1">The first plane.</param>
            <param name="p2">The second plane.</param>
            <returns>True if the planes are equal.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3f.op_Inequality(CGALDotNetGeometry.Shapes.Plane3f,CGALDotNetGeometry.Shapes.Plane3f)">
            <summary>
            Check if the two planes are not equal.
            </summary>
            <param name="p1">The first plane.</param>
            <param name="p2">The second plane.</param>
            <returns>True if the planes are not equal.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3f.Equals(System.Object)">
            <summary>
            Check if this plane is equal to the other object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Are these planes equal.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3f.Equals(CGALDotNetGeometry.Shapes.Plane3f)">
            <summary>
            Check if this plane is equal to the other plane.
            </summary>
            <param name="plane">The other plane.</param>
            <returns>Are these planes equal.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3f.GetHashCode">
            <summary>
            The planes hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3f.ToString">
            <summary>
            The plane as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Plane3f.Closest(CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            The closest point on the plane to the point p.
            </summary>
            <param name="p">The point.</param>
            <returns>The closest point on the plane.</returns>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Ray2d">
            <summary>
            A 2D ray.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Ray2d.Position">
            <summary>
            The rays position.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Ray2d.Direction">
            <summary>
            The rays direction.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2d.#ctor(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Construct a new ray.
            </summary>
            <param name="position">The rays position.</param>
            <param name="direction">The rays directio</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Ray2d.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Ray2d.IsDegenerate">
            <summary>
            Is the ray degenerate.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2d.Equals(System.Object)">
            <summary>
            Is the ray equal to the other object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Is the ray equal to the other object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2d.Equals(CGALDotNetGeometry.Shapes.Ray2d)">
            <summary>
            Is the ray equal to the other ray.
            </summary>
            <param name="ray">The other ray.</param>
            <returns>Is the ray equal to the other ray.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2d.GetHashCode">
            <summary>
            The rays hashcode.
            </summary>
            <returns>The rays hashcode.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2d.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2d.Normalize">
            <summary>
            Normalize the lines direction.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2d.Round(System.Int32)">
            <summary>
            Round the rays components.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2d.GetPosition(System.Double)">
            <summary>
            Get the position offset along the ray at t.
            </summary>
            <param name="t">The amount to offset.</param>
            <returns>The position at t.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2d.Intersection(CGALDotNetGeometry.Shapes.Ray2d)">
            <summary>
            Intersection point between two rays.
            Presumes there is a intersection.
            </summary>
            <param name="ray">The other ray.</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2d.Intersects(CGALDotNetGeometry.Shapes.Ray2d,System.Double@,System.Double@)">
            <summary>
            Intersection between two rays.
            </summary>
            <param name="ray">The other ray</param>
            <param name="s">Intersection point = Position + s * Direction.</param>
            <param name="t">Intersection point = ray.Position + t * ray.Direction.</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2d.Intersects(CGALDotNetGeometry.Shapes.Segment2d,System.Double@,System.Double@)">
            <summary>
            Intersection between ray and segment.
            </summary>
            <param name="seg">the segment</param>
            <param name="s">Intersection point = Position + s * Direction</param>
            <param name="t">Intersection point = A + t * (B - A)</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2d.Intersects(CGALDotNetGeometry.Shapes.Circle2d,System.Double@)">
            <summary>
            Intersection between ray and circle.
            </summary>
            <param name="circle">the circle</param>
            <param name="t">Intersection point = Position + t * Direction</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2d.Intersects(CGALDotNetGeometry.Shapes.Box2d,System.Double@)">
            <summary>
            Intersection between ray and box.
            </summary>
            <param name="box">the box</param>
            <param name="t">Intersection point = Position + t * Direction</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Ray2f">
            <summary>
            A 2D ray.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Ray2f.Position">
            <summary>
            The rays position.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Ray2f.Direction">
            <summary>
            The rays direction.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2f.#ctor(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Vector2f)">
            <summary>
            Construct a new ray.
            </summary>
            <param name="position">The rays position.</param>
            <param name="direction">The rays directio</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Ray2f.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Ray2f.IsDegenerate">
            <summary>
            Is the ray degenerate.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2f.Equals(System.Object)">
            <summary>
            Is the ray equal to the other object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Is the ray equal to the other object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2f.Equals(CGALDotNetGeometry.Shapes.Ray2f)">
            <summary>
            Is the ray equal to the other ray.
            </summary>
            <param name="ray">The other ray.</param>
            <returns>Is the ray equal to the other ray.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2f.GetHashCode">
            <summary>
            The rays hashcode.
            </summary>
            <returns>The rays hashcode.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2f.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2f.Normalize">
            <summary>
            Normalize the lines direction.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2f.GetPosition(System.Single)">
            <summary>
            Get the position offset along the ray at t.
            </summary>
            <param name="t">The amount to offset.</param>
            <returns>The position at t.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2f.Intersection(CGALDotNetGeometry.Shapes.Ray2f)">
            <summary>
            Intersection point between two rays.
            Presumes there is a intersection.
            </summary>
            <param name="ray">The other ray.</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2f.Intersects(CGALDotNetGeometry.Shapes.Ray2f,System.Single@,System.Single@)">
            <summary>
            Intersection between two rays.
            </summary>
            <param name="ray">The other ray</param>
            <param name="s">Intersection point = Position + s * Direction.</param>
            <param name="t">Intersection point = ray.Position + t * ray.Direction.</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2f.Intersects(CGALDotNetGeometry.Shapes.Segment2f,System.Single@,System.Single@)">
            <summary>
            Intersection between ray and segment.
            </summary>
            <param name="seg">the segment</param>
            <param name="s">Intersection point = Position + s * Direction</param>
            <param name="t">Intersection point = A + t * (B - A)</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2f.Intersects(CGALDotNetGeometry.Shapes.Circle2f,System.Single@)">
            <summary>
            Intersection between ray and circle.
            </summary>
            <param name="circle">the circle</param>
            <param name="t">Intersection point = Position + t * Direction</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray2f.Intersects(CGALDotNetGeometry.Shapes.Box2f,System.Single@)">
            <summary>
            Intersection between ray and box.
            </summary>
            <param name="box">the box</param>
            <param name="t">Intersection point = Position + t * Direction</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Ray3d">
            <summary>
            A 3D ray struct represented by a position and a direction.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Ray3d.Position">
            <summary>
            The rays position.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Ray3d.Direction">
            <summary>
            The rays direction.
            Might not be normalized.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3d.#ctor(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Construct a ray from a point and the direction.
            </summary>
            <param name="position">The rays position.</param>
            <param name="direction">The rays direction (will be normalized)</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Ray3d.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Ray3d.IsDegenerate">
            <summary>
            Is the ray degenerate.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3d.op_Equality(CGALDotNetGeometry.Shapes.Ray3d,CGALDotNetGeometry.Shapes.Ray3d)">
            <summary>
            Check if the two rays are equal.
            </summary>
            <param name="r1">The first ray.</param>
            <param name="r2">The second ray.</param>
            <returns>True if the two rays are equal.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3d.op_Inequality(CGALDotNetGeometry.Shapes.Ray3d,CGALDotNetGeometry.Shapes.Ray3d)">
            <summary>
            Check if the two rays are not equal.
            </summary>
            <param name="r1">The first ray.</param>
            <param name="r2">The second ray.</param>
            <returns>True if the two rays are not equal.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3d.Equals(System.Object)">
            <summary>
            Is the ray equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the ray equal to this object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3d.Equals(CGALDotNetGeometry.Shapes.Ray3d)">
            <summary>
            Is the ray equal to the other ray.
            </summary>
            <param name="ray">The over ray.</param>
            <returns>Is the ray equal to the other ray.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3d.GetHashCode">
            <summary>
            The rays hashcode.
            </summary>
            <returns>The rays hashcode.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3d.ToString">
            <summary>
            The rays as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Ray3d.Magnitude">
            <summary>
            The rays directions magnidute.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Ray3d.SqrMagnitude">
            <summary>
            The rays directions square magnidute.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3d.GetPosition(System.Double)">
            <summary>
            Get the position offset along the ray at t.
            </summary>
            <param name="t">The amount to offset.</param>
            <returns>The position at t.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3d.Normalize">
            <summary>
            Normalize the lines direction.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3d.Round(System.Int32)">
            <summary>
            Round the rays position and direction.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3d.Intersects(CGALDotNetGeometry.Shapes.Box3d)">
            <summary>
            Does the ray intersect the box.
            </summary>
            <param name="bounds">The box.</param>
            <returns>Does the ray intersect the box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3d.Intersects(CGALDotNetGeometry.Shapes.Box3d,System.Double@,System.Double@)">
            <summary>
            Does the ray intersect the box.
            </summary>
            <param name="bounds">The box.</param>
            <param name="s">Intersection point = Position + s * Direction where ray enters box.</param>
            <param name="t">Intersection point = Position + t * Direction where ray exits box.</param>
            <returns>Does the ray intersect the box.</returns>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Ray3f">
            <summary>
            A 3D ray struct represented by a position and a direction.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Ray3f.Position">
            <summary>
            The rays position.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Ray3f.Direction">
            <summary>
            The rays direction.
            Might not be normalized.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3f.#ctor(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Vector3f)">
            <summary>
            Construct a ray from a point and the direction.
            </summary>
            <param name="position">The rays position.</param>
            <param name="direction">The rays direction (will be normalized)</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Ray3f.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Ray3f.IsDegenerate">
            <summary>
            Is the ray degenerate.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3f.op_Equality(CGALDotNetGeometry.Shapes.Ray3f,CGALDotNetGeometry.Shapes.Ray3f)">
            <summary>
            Check if the two rays are equal.
            </summary>
            <param name="r1">The first ray.</param>
            <param name="r2">The second ray.</param>
            <returns>True if the two rays are equal.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3f.op_Inequality(CGALDotNetGeometry.Shapes.Ray3f,CGALDotNetGeometry.Shapes.Ray3f)">
            <summary>
            Check if the two rays are not equal.
            </summary>
            <param name="r1">The first ray.</param>
            <param name="r2">The second ray.</param>
            <returns>True if the two rays are not equal.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3f.Equals(System.Object)">
            <summary>
            Is the ray equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the ray equal to this object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3f.Equals(CGALDotNetGeometry.Shapes.Ray3f)">
            <summary>
            Is the ray equal to the other ray.
            </summary>
            <param name="ray">The over ray.</param>
            <returns>Is the ray equal to the other ray.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3f.GetHashCode">
            <summary>
            The rays hashcode.
            </summary>
            <returns>The rays hashcode.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3f.ToString">
            <summary>
            The rays as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Ray3f.Magnitude">
            <summary>
            The rays directions magnidute.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Ray3f.SqrMagnitude">
            <summary>
            The rays directions square magnidute.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3f.GetPosition(System.Single)">
            <summary>
            Get the position offset along the ray at t.
            </summary>
            <param name="t">The amount to offset.</param>
            <returns>The position at t.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3f.Normalize">
            <summary>
            Normalize the lines direction.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3f.Round(System.Int32)">
            <summary>
            Round the rays position and direction.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3f.Intersects(CGALDotNetGeometry.Shapes.Box3f)">
            <summary>
            Does the ray intersect the box.
            </summary>
            <param name="bounds">The box.</param>
            <returns>Does the ray intersect the box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Ray3f.Intersects(CGALDotNetGeometry.Shapes.Box3f,System.Single@,System.Single@)">
            <summary>
            Does the ray intersect the box.
            </summary>
            <param name="bounds">The box.</param>
            <param name="s">Intersection point = Position + s * Direction where ray enters box.</param>
            <param name="t">Intersection point = Position + t * Direction where ray exits box.</param>
            <returns>Does the ray intersect the box.</returns>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Segment2d">
            <summary>
            A 2D segment.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Segment2d.A">
            <summary>
            The segments first point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Segment2d.B">
            <summary>
            The segments second point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.#ctor(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Construct a new segment.
            </summary>
            <param name="a">The segments first point.</param>
            <param name="b">The segments second point.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a new segment.
            </summary>
            <param name="ax">The segments first points x value.</param>
            <param name="ay">The segments first points y value.</param>
            <param name="bx">The segments second points x value.</param>
            <param name="by">The segments second points y value.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2d.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2d.Center">
            <summary>
            The segments center.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2d.Length">
            <summary>
            The segments length.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2d.SqrLength">
            <summary>
            The segments square length.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2d.Tangent">
            <summary>
            The segments tangent vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2d.Normal">
            <summary>
            The segments normal vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2d.LeftMost">
            <summary>
            The left most point of the segment.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2d.RightMost">
            <summary>
            The right most point of the segment.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2d.BottomMost">
            <summary>
            The bottom most point of the segment.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2d.TopMost">
            <summary>
            The top most point of the segment.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2d.Reversed">
            <summary>
            THe segment flipped, a is now b, b is now a.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2d.Bounds">
            <summary>
            The segments bounding box.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.Equals(System.Object)">
            <summary>
            Is the segment equal to the other object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Is the segment equal to the other object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.Equals(CGALDotNetGeometry.Shapes.Segment2d)">
            <summary>
            Is the segment equal to the other segment.
            </summary>
            <param name="seg">The other segment.</param>
            <returns>Is the segment equal to the other segment.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.GetHashCode">
            <summary>
            The segments hashcode.
            </summary>
            <returns>The segments hashcode.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.Distance(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            The points distance from the segment.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.SqrDistance(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            The points sqr distance from the segment.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.Round(System.Int32)">
            <summary>
            Round the segments points.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.Contains(CGALDotNetGeometry.Numerics.Point2d,System.Double)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p">The point</param>
            <param name="eps">A small value to give the segment some width.</param>
            <returns>Does the point line on the segemnts.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.Contains(CGALDotNetGeometry.Numerics.Point2d,System.Boolean)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p">The point</param>
            <param name="includeBorder">NA here. Needed for IShape interface.</param>
            <returns>Does the point line on the segemnts.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.SignedDistance(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Return the signed distance to the point. 
            Always positive.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.Intersects(CGALDotNetGeometry.Shapes.Box2d,System.Boolean)">
            <summary>
            Does the shape intersect the box.
            </summary>
            <param name="box">The box.</param>
            <param name="includeBorder">NA here. Needed for IShape interface.</param>
            <returns>Does the shape intersect the box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.Intersects(CGALDotNetGeometry.Shapes.Segment2d)">
            <summary>
            Does the two segments intersect.
            </summary>
            <param name="seg">other segment</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.Intersects(CGALDotNetGeometry.Shapes.Segment2d,System.Double@)">
            <summary>
            Do the two segments intersect.
            </summary>
            <param name="seg">other segment</param>
            <param name="t">Intersection point = A + t * (B - A)</param>
            <returns>If they intersect</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.Intersects(CGALDotNetGeometry.Shapes.Segment2d,System.Double@,System.Double@)">
            <summary>
            Do the two segments intersect.
            </summary>
            <param name="seg">other segment</param>
            <param name="s">Intersection point = A + s * (B - A)</param>
            <param name="t">Intersection point = seg.A + t * (seg.B - seg.A)</param>
            <returns>If they intersect</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.Intersects(CGALDotNetGeometry.Shapes.Box2d)">
            <summary>
            Does the segment intersect this box.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.Closest(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="p">point</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.Closest(CGALDotNetGeometry.Numerics.Point2d,System.Double@)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="p">point</param>
            <param name="t">closest point = A + t * (B - A)</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.Closest(CGALDotNetGeometry.Shapes.Segment2d)">
            <summary>
            The closest segment spanning two other segments.
            </summary>
            <param name="seg">the other segment</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2d.Closest(CGALDotNetGeometry.Shapes.Segment2d,System.Double@,System.Double@)">
            <summary>
            The closest segment spanning two other segments.
            </summary>
            <param name="seg">the other segment</param>
            <param name="s">closest point = A + s * (B - A)</param>
            <param name="t">other closest point = seg.A + t * (seg.B - seg.A)</param>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Segment2f">
            <summary>
            A 2D segment.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Segment2f.A">
            <summary>
            The segments first point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Segment2f.B">
            <summary>
            The segments second point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.#ctor(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Construct a new segment.
            </summary>
            <param name="a">The segments first point.</param>
            <param name="b">The segments second point.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a new segment.
            </summary>
            <param name="ax">The segments first points x value.</param>
            <param name="ay">The segments first points y value.</param>
            <param name="bx">The segments second points x value.</param>
            <param name="by">The segments second points y value.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2f.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2f.Center">
            <summary>
            The segments center.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2f.Length">
            <summary>
            The segments length.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2f.SqrLength">
            <summary>
            The segments square length.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2f.Tangent">
            <summary>
            The segments tangent vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2f.Normal">
            <summary>
            The segments normal vector.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2f.LeftMost">
            <summary>
            The left most point of the segment.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2f.RightMost">
            <summary>
            The right most point of the segment.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2f.BottomMost">
            <summary>
            The bottom most point of the segment.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2f.TopMost">
            <summary>
            The top most point of the segment.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2f.Reversed">
            <summary>
            The segment flipped, a is now b, b is now a.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment2f.Bounds">
            <summary>
            The segments bounding box.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.Equals(System.Object)">
            <summary>
            Is the segment equal to the other object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Is the segment equal to the other object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.Equals(CGALDotNetGeometry.Shapes.Segment2f)">
            <summary>
            Is the segment equal to the other segment.
            </summary>
            <param name="seg">The other segment.</param>
            <returns>Is the segment equal to the other segment.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.GetHashCode">
            <summary>
            The segments hashcode.
            </summary>
            <returns>The segments hashcode.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.Distance(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            The points distance from the segment.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.SqrDistance(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            The points sqr distance from the segment.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.Round(System.Int32)">
            <summary>
            Round the segments points.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.Contains(CGALDotNetGeometry.Numerics.Point2f,System.Single)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p">The point</param>
            <param name="eps">A small value to give the segment some width.</param>
            <returns>Does the point line on the segemnts.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.Contains(CGALDotNetGeometry.Numerics.Point2f,System.Boolean)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p">The point</param>
            <param name="includeBorder">NA here. Needed for IShape interface.</param>
            <returns>Does the point line on the segemnts.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.SignedDistance(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Return the signed distance to the point. 
            Always positive.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.Intersects(CGALDotNetGeometry.Shapes.Box2f,System.Boolean)">
            <summary>
            Does the shape intersect the box.
            </summary>
            <param name="box">The box.</param>
            <param name="includeBorder"></param>
            <returns>Does the shape intersect the box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.Intersects(CGALDotNetGeometry.Shapes.Segment2f)">
            <summary>
            Does the two segments intersect.
            </summary>
            <param name="seg">other segment</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.Intersects(CGALDotNetGeometry.Shapes.Segment2f,System.Single@)">
            <summary>
            Do the two segments intersect.
            </summary>
            <param name="seg">other segment</param>
            <param name="t">Intersection point = A + t * (B - A)</param>
            <returns>If they intersect</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.Intersects(CGALDotNetGeometry.Shapes.Segment2f,System.Single@,System.Single@)">
            <summary>
            Do the two segments intersect.
            </summary>
            <param name="seg">other segment</param>
            <param name="s">Intersection point = A + s * (B - A)</param>
            <param name="t">Intersection point = seg.A + t * (seg.B - seg.A)</param>
            <returns>If they intersect</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.Intersects(CGALDotNetGeometry.Shapes.Box2f)">
            <summary>
            Does the segment intersect this box.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.Closest(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="p">point</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.Closest(CGALDotNetGeometry.Numerics.Point2f,System.Single@)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="p">point</param>
            <param name="t">closest point = A + t * (B - A)</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.Closest(CGALDotNetGeometry.Shapes.Segment2f)">
            <summary>
            The closest segment spanning two other segments.
            </summary>
            <param name="seg">the other segment</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment2f.Closest(CGALDotNetGeometry.Shapes.Segment2f,System.Single@,System.Single@)">
            <summary>
            The closest segment spanning two other segments.
            </summary>
            <param name="seg">the other segment</param>
            <param name="s">closest point = A + s * (B - A)</param>
            <param name="t">other closest point = seg.A + t * (seg.B - seg.A)</param>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Segment3d">
            <summary>
            A 3D segment.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Segment3d.A">
            <summary>
            The segments first (aka source) point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Segment3d.B">
            <summary>
            The segments second (aka target) point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3d.#ctor(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Create a new segment.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new segment.
            </summary>
            <param name="ax">The first points x value.</param>
            <param name="ay">The first points y value.</param>
            <param name="az">The first points z value.</param>
            <param name="bx">The second points x value.</param>
            <param name="by">The second points y value.</param>
            <param name="bz">The second points z value.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment3d.Length">
            <summary>
            The length of the segment.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment3d.SqrLength">
            <summary>
            The square length of the segment.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment3d.Reversed">
            <summary>
            The segment flipped, a is now b, b is now a.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment3d.Bounds">
            <summary>
            The bounding box of the segment.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment3d.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment3d.Item(System.Int32)">
            <summary>
            Array acess to the segments points.
            </summary>
            <param name="i">The index of the point to access (0-2)</param>
            <returns>The point at index i.</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3d.Equals(System.Object)">
            <summary>
            Is the segment equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the segment equal to this object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3d.Equals(CGALDotNetGeometry.Shapes.Segment3d)">
            <summary>
            Is the segment equal to the other segment.
            </summary>
            <param name="seg">The other segment.</param>
            <returns>Is the segment equal to the other segment.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3d.GetHashCode">
            <summary>
            The segments hash code.
            </summary>
            <returns>The segments hash code.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3d.ToString">
            <summary>
            The segment as a string.
            </summary>
            <returns>The segment as a string.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3d.Round(System.Int32)">
            <summary>
            Round the segments points.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3d.Contains(CGALDotNetGeometry.Numerics.Point3d,System.Double)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p">The point</param>
            <param name="eps">A small value to give the segment some width.</param>
            <returns>Does the point line on the segemnts.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3d.Contains(CGALDotNetGeometry.Numerics.Point3d,System.Boolean)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p">The point</param>
            <param name="includeBorder">NA here. Needed for IShape interface.</param>
            <returns>Does the point line on the segemnts.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3d.Intersects(CGALDotNetGeometry.Shapes.Box3d,System.Boolean)">
            <summary>
            Does the shape intersect the box.
            </summary>
            <param name="box">The box.</param>
            <param name="includeBorder"></param>
            <returns>Does the shape intersect the box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3d.SignedDistance(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Return the signed distance to the point. 
            Always positive.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3d.Closest(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="point">point</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3d.Closest(CGALDotNetGeometry.Numerics.Point3d,System.Double@)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="point">point</param>
            <param name="t">closest point = A + t * (B - A)</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3d.Closest(CGALDotNetGeometry.Shapes.Segment3d)">
            <summary>
            The closest segment spanning two other segments.
            </summary>
            <param name="seg">the other segment</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3d.Closest(CGALDotNetGeometry.Shapes.Segment3d,System.Double@,System.Double@)">
            <summary>
            The closest segment spanning two other segments.
            </summary>
            <param name="seg">the other segment</param>
            <param name="s">closest point = A + s * (B - A)</param>
            <param name="t">other closest point = seg.A + t * (seg.B - seg.A)</param>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Segment3f">
            <summary>
            A 3D segment.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Segment3f.A">
            <summary>
            The segments first (aka source) point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Segment3f.B">
            <summary>
            The segments second (aka target) point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3f.#ctor(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Create a new segment.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a new segment.
            </summary>
            <param name="ax">The first points x value.</param>
            <param name="ay">The first points y value.</param>
            <param name="az">The first points z value.</param>
            <param name="bx">The second points x value.</param>
            <param name="by">The second points y value.</param>
            <param name="bz">The second points z value.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment3f.Length">
            <summary>
            The length of the segment.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment3f.SqrLength">
            <summary>
            The square length of the segment.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment3f.Reversed">
            <summary>
            The segment flipped, a is now b, b is now a.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment3f.Bounds">
            <summary>
            The bounding box of the segment.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment3f.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Segment3f.Item(System.Int32)">
            <summary>
            Array acess to the segments points.
            </summary>
            <param name="i">The index of the point to access (0-2)</param>
            <returns>The point at index i.</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3f.Equals(System.Object)">
            <summary>
            Is the segment equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the segment equal to this object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3f.Equals(CGALDotNetGeometry.Shapes.Segment3f)">
            <summary>
            Is the segment equal to the other segment.
            </summary>
            <param name="seg">The other segment.</param>
            <returns>Is the segment equal to the other segment.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3f.GetHashCode">
            <summary>
            The segments hash code.
            </summary>
            <returns>The segments hash code.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3f.ToString">
            <summary>
            The segment as a string.
            </summary>
            <returns>The segment as a string.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3f.Round(System.Int32)">
            <summary>
            Round the segments points.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3f.Contains(CGALDotNetGeometry.Numerics.Point3f,System.Single)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p">The point</param>
            <param name="eps">A small value to give the segment some width.</param>
            <returns>Does the point line on the segemnts.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3f.Contains(CGALDotNetGeometry.Numerics.Point3f,System.Boolean)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p">The point</param>
            <param name="includeBorder">NA here. Needed for IShape interface.</param>
            <returns>Does the point line on the segemnts.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3f.Intersects(CGALDotNetGeometry.Shapes.Box3f,System.Boolean)">
            <summary>
            Does the shape intersect the box.
            </summary>
            <param name="box">The box.</param>
            <param name="includeBorder"></param>
            <returns>Does the shape intersect the box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3f.SignedDistance(CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Return the signed distance to the point. 
            Always positive.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3f.Closest(CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="point">point</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3f.Closest(CGALDotNetGeometry.Numerics.Point3f,System.Single@)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="point">point</param>
            <param name="t">closest point = A + t * (B - A)</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3f.Closest(CGALDotNetGeometry.Shapes.Segment3f)">
            <summary>
            The closest segment spanning two other segments.
            </summary>
            <param name="seg">the other segment</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Segment3f.Closest(CGALDotNetGeometry.Shapes.Segment3f,System.Single@,System.Single@)">
            <summary>
            The closest segment spanning two other segments.
            </summary>
            <param name="seg">the other segment</param>
            <param name="s">closest point = A + s * (B - A)</param>
            <param name="t">other closest point = seg.A + t * (seg.B - seg.A)</param>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.SegmentIndex">
            <summary>
            A segment represented by indices instead of points.
            The indices represent a index into a array of points.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.SegmentIndex.A">
            <summary>
            The segments first point index.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.SegmentIndex.B">
            <summary>
            The segments seconds point index.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.SegmentIndex.#ctor(System.Int32,System.Int32)">
            <summary>
            Consturct a new segment.
            </summary>
            <param name="a">The segments first point index.</param>
            <param name="b">The segments second point index.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.SegmentIndex.HasNullIndex">
            <summary>
            Does the segment have a null index.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.SegmentIndex.Reversed">
            <summary>
            The segment reverse where a is now b and b is now a.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.SegmentIndex.Equals(System.Object)">
            <summary>
            Is the segment equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the segment equal to this object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.SegmentIndex.Equals(CGALDotNetGeometry.Shapes.SegmentIndex)">
            <summary>
            Is the segment equal to the other segment.
            </summary>
            <param name="seg">The other segment.</param>
            <returns>Is the segment equal to the other segment.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.SegmentIndex.GetHashCode">
            <summary>
            The segments hash code.
            </summary>
            <returns>The segments hash code.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.SegmentIndex.ToString">
            <summary>
            The segment as a string.
            </summary>
            <returns>The segment as a string.</returns>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.IShape2d.Bounds">
            <summary>
            The bounding box that contains the shape.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.IShape2d.Contains(CGALDotNetGeometry.Numerics.Point2d,System.Boolean)">
            <summary>
            Does the shape contain the point.
            Points on the shapes surface count as 
            being contained in the shape.
            </summary>
            <param name="p"></param>
            <param name="includeBorder"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.IShape2d.Intersects(CGALDotNetGeometry.Shapes.Box2d,System.Boolean)">
            <summary>
            Does the shape intersect the box.
            </summary>
            <param name="box"></param>
            <param name="includeBorder"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.IShape2d.Closest(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            The closest point to the shape.
            If point inside shape return the same point.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.IShape2d.SignedDistance(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            The signed distance between the shapes surface and the point.
            </summary>
            <param name="p"></param>
            <returns>Positive if outside shape, negative if inside and 0 on boundary</returns>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Shape2d.Bounds">
            <summary>
            The bounding box that contains the shape.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Shape2d.Contains(CGALDotNetGeometry.Numerics.Point2d,System.Boolean)">
            <summary>
            Does the shape contain the point.
            Points on the shapes surface count as 
            being contained in the shape.
            </summary>
            <param name="p"></param>
            <param name="includeBorder"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Shape2d.Intersects(CGALDotNetGeometry.Shapes.Box2d,System.Boolean)">
            <summary>
            Does the shape intersect the box.
            </summary>
            <param name="box"></param>
            <param name="includeBorder"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Shape2d.Closest(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            The closest point to the shape.
            If point inside shape return the same point.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Shape2d.SignedDistance(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            The signed distance between the shapes surface and the point.
            </summary>
            <param name="p"></param>
            <returns>Positive if outside shape, negative if inside and 0 on boundary</returns>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.IShape2f.Bounds">
            <summary>
            The bounding box that contains the shape.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.IShape2f.Contains(CGALDotNetGeometry.Numerics.Point2f,System.Boolean)">
            <summary>
            Does the shape contain the point.
            Points on the shapes surface count as 
            being contained in the shape.
            </summary>
            <param name="p">The point.</param>
            <param name="includeBorder"></param>
            <returns>Does the shape contain the point.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.IShape2f.Intersects(CGALDotNetGeometry.Shapes.Box2f,System.Boolean)">
            <summary>
            Does the shape intersect the box.
            </summary>
            <param name="box">The box.</param>
            <param name="includeBorder"></param>
            <returns>Does the shape intersect the box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.IShape2f.Closest(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            The closest point to the shape.
            If point inside shape return the same point.
            </summary>
            <param name="p">The point.</param>
            <returns>The closest point to the shape.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.IShape2f.SignedDistance(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            The signed distance between the shapes surface and the point.
            </summary>
            <param name="p">The point.</param>
            <returns>Positive if outside shape, negative if inside and 0 on boundary</returns>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Shape2f.Bounds">
            <summary>
            The bounding box that contains the shape.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Shape2f.Contains(CGALDotNetGeometry.Numerics.Point2f,System.Boolean)">
            <summary>
            Does the shape contain the point.
            Points on the shapes surface count as 
            being contained in the shape.
            </summary>
            <param name="p">The point.</param>
            <param name="includeBorder"></param>
            <returns>Does the shape contain the point.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Shape2f.Intersects(CGALDotNetGeometry.Shapes.Box2f,System.Boolean)">
            <summary>
            Does the shape intersect the box.
            </summary>
            <param name="box">The box.</param>
            <param name="includeBorder"></param>
            <returns>Does the shape intersect the box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Shape2f.Closest(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            The closest point to the shape.
            If point inside shape return the same point.
            </summary>
            <param name="p">The point.</param>
            <returns>The closest point to the shape.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Shape2f.SignedDistance(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            The signed distance between the shapes surface and the point.
            </summary>
            <param name="p">The point.</param>
            <returns>Positive if outside shape, negative if inside and 0 on boundary</returns>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Sphere3d">
            <summary>
            A 3D sphere.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Sphere3d.Center">
            <summary>
            The shperes center point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Sphere3d.Radius">
            <summary>
            The spheres radius.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3d.#ctor(CGALDotNetGeometry.Numerics.Point3d,System.Double)">
            <summary>
            Construct a new sphere.
            </summary>
            <param name="center">The shperes center point.</param>
            <param name="radius">The spheres radius.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Sphere3d.Radius2">
            <summary>
            The squared radius.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Sphere3d.Diameter">
            <summary>
            The spheres diameter.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Sphere3d.Area">
            <summary>
            The spheres area.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Sphere3d.SurfaceArea">
            <summary>
            The spheres surface area.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Sphere3d.Bounds">
            <summary>
            Calculate the bounding box.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3d.Equals(System.Object)">
            <summary>
            Is this sphere equal to the other object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Is this sphere equal to the other object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3d.Equals(CGALDotNetGeometry.Shapes.Sphere3d)">
            <summary>
            Is this sphere equal to the other sphere.
            </summary>
            <param name="sphere">The other sphere.</param>
            <returns>Is this sphere equal to the other sphere.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3d.GetHashCode">
            <summary>
            The spheres hashcode.
            </summary>
            <returns>The spheres hashcode.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3d.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3d.Enlarge(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Enlarge the sphere so it contains the point p.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3d.Round(System.Int32)">
            <summary>
            Round the spheres components.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3d.Closest(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Find the closest point to the sphere.
            If point inside sphere return point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3d.SignedDistance(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Return the signed distance to the point. 
            If point is outside sphere field is positive.
            If point is inside spher field is negative.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3d.Contains(CGALDotNetGeometry.Numerics.Point3d,System.Boolean)">
            <summary>
            Does the sphere contain the point.
            </summary>
            <param name="point">The point</param>
            <param name="inculdeBorder">Does the border count as being in side the sphere.</param>
            <returns>true if sphere contains point</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3d.Contains(CGALDotNetGeometry.Shapes.Box3d,System.Boolean)">
            <summary>
            Does the sphere fully contain the box.
            </summary>
            <param name="box">The box.</param>
            <param name="inculdeBorder">Does the border count as being in side the sphere.</param>
            <returns>oes the sphere fully contain the box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3d.Intersects(CGALDotNetGeometry.Shapes.Sphere3d,System.Boolean)">
            <summary>
            Does this sphere intersect with the other sphere.
            </summary>
            <param name="sphere">The other sphere</param>
            <param name="inculdeBorder">Does the border count as being in side the sphere.</param>
            <returns>True if the spheres intersect</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3d.Intersects(CGALDotNetGeometry.Shapes.Box3d,System.Boolean)">
            <summary>
            Does the sphere intersect the box.
            </summary>
            <param name="box"></param>
            <param name="inculdeBorder">Does the border count as being in side the sphere.</param>
            <returns>Does the sphere intersect the box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3d.CircumSphere(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Creates a sphere that has both points on its surface.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3d.CircumSphere(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Creates a sphere that has all 4 points on its surface.
            From MathWorld: http://mathworld.wolfram.com/Circumsphere.html.
            Fails if the points are colinear.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3d.CalculateBounds(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Creates a sphere that contains all three points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3d.CalculateBounds(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point3d})">
            <summary>
            Calculate the minimum bounding sphere that contains 
            all the points in the list.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3d.ExtremePoints(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point3d})">
            <summary>
            Finds which axis contains the two most extreme points
            </summary>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Sphere3f">
            <summary>
            A 3D sphere.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Sphere3f.Center">
            <summary>
            The shperes center point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Sphere3f.Radius">
            <summary>
            The spheres radius.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3f.#ctor(CGALDotNetGeometry.Numerics.Point3f,System.Single)">
            <summary>
            Construct a new sphere.
            </summary>
            <param name="center">The shperes center point.</param>
            <param name="radius">The spheres radius.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Sphere3f.Radius2">
            <summary>
            The squared radius.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Sphere3f.Diameter">
            <summary>
            The spheres diameter.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Sphere3f.Area">
            <summary>
            The spheres area.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Sphere3f.SurfaceArea">
            <summary>
            The spheres surface area.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Sphere3f.Bounds">
            <summary>
            Calculate the bounding box.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3f.Equals(System.Object)">
            <summary>
            Is this sphere equal to the other object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Is this sphere equal to the other object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3f.Equals(CGALDotNetGeometry.Shapes.Sphere3f)">
            <summary>
            Is this sphere equal to the other sphere.
            </summary>
            <param name="sphere">The other sphere.</param>
            <returns>Is this sphere equal to the other sphere.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3f.GetHashCode">
            <summary>
            The spheres hashcode.
            </summary>
            <returns>The spheres hashcode.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3f.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3f.Enlarge(CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Enlarge the sphere so it contains the point p.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3f.Round(System.Int32)">
            <summary>
            Round the spheres components.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3f.Closest(CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Find the closest point to the sphere.
            If point inside sphere return point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3f.SignedDistance(CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Return the signed distance to the point. 
            If point is outside sphere field is positive.
            If point is inside spher field is negative.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3f.Contains(CGALDotNetGeometry.Numerics.Point3f,System.Boolean)">
            <summary>
            Does the sphere contain the point.
            </summary>
            <param name="point">The point</param>
            <param name="inculdeBorder">Does the border count as being in side the sphere.</param>
            <returns>true if sphere contains point</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3f.Contains(CGALDotNetGeometry.Shapes.Box3f,System.Boolean)">
            <summary>
            Does the sphere fully contain the box.
            </summary>
            <param name="box">The box.</param>
            <param name="inculdeBorder">Does the border count as being in side the sphere.</param>
            <returns>oes the sphere fully contain the box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3f.Intersects(CGALDotNetGeometry.Shapes.Sphere3f,System.Boolean)">
            <summary>
            Does this sphere intersect with the other sphere.
            </summary>
            <param name="sphere">The other sphere</param>
            <param name="inculdeBorder">Does the border count as being in side the sphere.</param>
            <returns>True if the spheres intersect</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3f.Intersects(CGALDotNetGeometry.Shapes.Box3f,System.Boolean)">
            <summary>
            Does the sphere intersect the box.
            </summary>
            <param name="box"></param>
            <param name="inculdeBorder">Does the border count as being in side the sphere.</param>
            <returns>Does the sphere intersect the box.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3f.CircumSphere(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Creates a sphere that has both points on its surface.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3f.CircumSphere(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Creates a sphere that has all 4 points on its surface.
            From MathWorld: http://mathworld.wolfram.com/Circumsphere.html.
            Fails if the points are colinear.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3f.CalculateBounds(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Creates a sphere that contains all three points.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3f.CalculateBounds(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point3f})">
            <summary>
            Calculate the minimum bounding sphere that contains 
            all the points in the list.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Sphere3f.ExtremePoints(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point3f})">
            <summary>
            Finds which axis contains the two most extreme points
            </summary>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Tetrahedron3d">
            <summary>
            A 3D tetrahedron.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Tetrahedron3d.A">
            <summary>
            The tetrahedrons first point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Tetrahedron3d.B">
            <summary>
            The tetrahedrons second point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Tetrahedron3d.C">
            <summary>
            The tetrahedrons third point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Tetrahedron3d.D">
            <summary>
            The tetrahedrons fourth point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Tetrahedron3d.#ctor(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Create a new tetrahedron.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <param name="c">The third point.</param>
            <param name="d">The fourth point.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Tetrahedron3d.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Tetrahedron3d.Bounds">
            <summary>
            The bounding box of the tetrahedron.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Tetrahedron3d.Item(System.Int32)">
            <summary>
            Array acess to the tetrahedrons points.
            </summary>
            <param name="i">The index of the point to access (0-3)</param>
            <returns>The point at index i.</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Tetrahedron3d.Equals(System.Object)">
            <summary>
            Is the tetrahedron equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the tetrahedron equal to this object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Tetrahedron3d.Equals(CGALDotNetGeometry.Shapes.Tetrahedron3d)">
            <summary>
            Is the tetrahedron equal to the other tetrahedron.
            </summary>
            <param name="tri">The other tetrahedron.</param>
            <returns>Is the tetrahedron equal to the other tetrahedron.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Tetrahedron3d.GetHashCode">
            <summary>
            The tetrahedrons hash code.
            </summary>
            <returns>The tetrahedrons hash code.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Tetrahedron3d.ToString">
            <summary>
            The tetrahedron as a string.
            </summary>
            <returns>The tetrahedron as a string.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Tetrahedron3d.Round(System.Int32)">
            <summary>
            Round the tetrahedrons points.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Tetrahedron3f">
            <summary>
            A 3D tetrahedron.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Tetrahedron3f.A">
            <summary>
            The tetrahedrons first point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Tetrahedron3f.B">
            <summary>
            The tetrahedrons second point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Tetrahedron3f.C">
            <summary>
            The tetrahedrons third point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Tetrahedron3f.D">
            <summary>
            The tetrahedrons fourth point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Tetrahedron3f.#ctor(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Create a new tetrahedron.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <param name="c">The third point.</param>
            <param name="d">The fourth point.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Tetrahedron3f.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Tetrahedron3f.Bounds">
            <summary>
            The bounding box of the tetrahedron.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Tetrahedron3f.Item(System.Int32)">
            <summary>
            Array acess to the tetrahedrons points.
            </summary>
            <param name="i">The index of the point to access (0-3)</param>
            <returns>The point at index i.</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Tetrahedron3f.Equals(System.Object)">
            <summary>
            Is the tetrahedron equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the tetrahedron equal to this object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Tetrahedron3f.Equals(CGALDotNetGeometry.Shapes.Tetrahedron3f)">
            <summary>
            Is the tetrahedron equal to the other tetrahedron.
            </summary>
            <param name="tri">The other tetrahedron.</param>
            <returns>Is the tetrahedron equal to the other tetrahedron.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Tetrahedron3f.GetHashCode">
            <summary>
            The tetrahedrons hash code.
            </summary>
            <returns>The tetrahedrons hash code.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Tetrahedron3f.ToString">
            <summary>
            The tetrahedron as a string.
            </summary>
            <returns>The tetrahedron as a string.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Tetrahedron3f.Round(System.Int32)">
            <summary>
            Round the tetrahedrons points.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Triangle2d">
            <summary>
            A 2D triangle.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Triangle2d.A">
            <summary>
            The triangles first point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Triangle2d.B">
            <summary>
            The triangles second point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Triangle2d.C">
            <summary>
            The triangles third point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2d.#ctor(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Construct a new triangle.
            </summary>
            <param name="a">The triangles first point.</param>
            <param name="b">The triangles second point.</param>
            <param name="c">The triangles third point.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a new triangle.
            </summary>
            <param name="ax">The triangles first points x value.</param>
            <param name="ay">The triangles first points y value.</param>
            <param name="bx">The triangles second points x value.</param>
            <param name="by">The triangles second points y value.</param>
            <param name="cx">The triangles third points x value.</param>
            <param name="cy">The triangles third points y value.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2d.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2d.Center">
            <summary>
            The average of the triangles positions.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2d.IsCCW">
            <summary>
            Is the triangle orientated ccw.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2d.Area">
            <summary>
            The triangles area.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2d.SignedArea">
            <summary>
            The triangles signed area.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2d.SideLengths">
            <summary>
            The side lengths are given as
            a = sqrt((cx - bx)^2 + (cy - by)^2) -- side BC opposite of A
            b = sqrt((cx - ax)^2 + (cy - ay)^2) -- side CA opposite of B
            c = sqrt((ax - bx)^2 + (ay - by)^2) -- side AB opposite of C
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2d.Angles">
            <summary>
            The side lengths are given as
            ang_a = acos((b^2 + c^2 - a^2)  / (2 * b * c)) -- angle at A
            ang_b = acos((c^2 + a^2 - b^2)  / (2 * c * a)) -- angle at B
            ang_c = acos((a^2 + b^2 - c^2)  / (2 * a * b)) -- angle at C
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2d.SemiPerimeter">
            <summary>
            The semiperimeter is given as
            s = (a + b + c) / 2
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2d.InRadius">
            <summary>
            The inradius is given as
            r = D / s
            This is the radius of the largest circle that can
            fit within the triangle. Not the same as the 
            circum circles radius.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2d.CircumRadius">
            <summary>
            The circumradius is given as
              R = a * b * c / (4 * D)
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2d.CircumCircle">
            <summary>
            The circum circle formed by the 
            triangles points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2d.Altitudes">
            <summary>
            The altitudes are given as
              alt_a = 2 * D / a -- altitude above side a
              alt_b = 2 * D / b -- altitude above side b
              alt_c = 2 * D / c -- altitude above side c
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2d.AspectRatio">
            <summary>
            The aspect ratio may be given as the ratio of the longest to the
            shortest edge or, more commonly as the ratio of the circumradius 
            to twice the inradius
              ar = R / (2 * r)
                 = a * b * c / (8 * (s - a) * (s - b) * (s - c))
                 = a * b * c / ((b + c - a) * (c + a - b) * (a + b - c))
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2d.Bounds">
            <summary>
            The triangles bounding box.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2d.Equals(System.Object)">
            <summary>
            Is the triangle equal to the other object.
            </summary>
            <param name="obj">The  other object.</param>
            <returns>Is the triangle equal to the other object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2d.Equals(CGALDotNetGeometry.Shapes.Triangle2d)">
            <summary>
            Is the triangle equal to the other riangle.
            </summary>
            <param name="tri">The  other riangle.</param>
            <returns>Is the triangle equal to the other riangle.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2d.GetHashCode">
            <summary>
            The triangles hashcode.
            </summary>
            <returns>The triangles hashcode.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2d.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2d.Round(System.Int32)">
            <summary>
            Round the triangles components.
            </summary>
            <param name="digits">The digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2d.CrossProductArea(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            The cross product area which is the 
            same as double the signed area.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2d.Barycentric(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Return th barycentric coordinates
            with respect to p.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2d.Closest(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Find the closest point to the triangle.
            If point inside triangle return point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2d.SignedDistance(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Returns the signed distance to surface of triangle.
            </summary>
            <returns>positive if outside triangle, negative if inside and 0 on boundary</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2d.Contains(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Does triangle contain point.
            </summary>
            <param name="p">The point</param>
            <returns>true if triangle contains point</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2d.Contains(CGALDotNetGeometry.Numerics.Point2d,System.Boolean)">
            <summary>
            Does triangle contain point.
            </summary>
            <param name="p">The point</param>
            <param name="includeBorder"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2d.ContainsCCW(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Does triangle contain point.
            Asumes triangle is CCW;
            </summary>
            <param name="p">point</param>
            <returns>true if triangle contains point</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2d.Intersects(CGALDotNetGeometry.Shapes.Box2d,System.Boolean)">
            <summary>
            Does the triangle intersect this box.
            </summary>
            <param name="box"></param>
            <param name="includeBorder"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Triangle2f">
            <summary>
            A 2D triangle.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Triangle2f.A">
            <summary>
            The triangles first point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Triangle2f.B">
            <summary>
            The triangles second point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Triangle2f.C">
            <summary>
            The triangles third point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2f.#ctor(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Construct a new triangle.
            </summary>
            <param name="a">The triangles first point.</param>
            <param name="b">The triangles second point.</param>
            <param name="c">The triangles third point.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a new triangle.
            </summary>
            <param name="ax">The triangles first points x value.</param>
            <param name="ay">The triangles first points y value.</param>
            <param name="bx">The triangles second points x value.</param>
            <param name="by">The triangles second points y value.</param>
            <param name="cx">The triangles third points x value.</param>
            <param name="cy">The triangles third points y value.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2f.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2f.Center">
            <summary>
            The average of the triangles positions.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2f.IsCCW">
            <summary>
            Is the triangle orientated ccw.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2f.Area">
            <summary>
            The triangles area.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2f.SignedArea">
            <summary>
            The triangles signed area.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2f.SideLengths">
            <summary>
            The side lengths are given as
            a = sqrt((cx - bx)^2 + (cy - by)^2) -- side BC opposite of A
            b = sqrt((cx - ax)^2 + (cy - ay)^2) -- side CA opposite of B
            c = sqrt((ax - bx)^2 + (ay - by)^2) -- side AB opposite of C
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2f.Angles">
            <summary>
            The side lengths are given as
            ang_a = acos((b^2 + c^2 - a^2)  / (2 * b * c)) -- angle at A
            ang_b = acos((c^2 + a^2 - b^2)  / (2 * c * a)) -- angle at B
            ang_c = acos((a^2 + b^2 - c^2)  / (2 * a * b)) -- angle at C
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2f.SemiPerimeter">
            <summary>
            The semiperimeter is given as
            s = (a + b + c) / 2
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2f.InRadius">
            <summary>
            The inradius is given as
            r = D / s
            This is the radius of the largest circle that can
            fit within the triangle. Not the same as the 
            circum circles radius.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2f.CircumRadius">
            <summary>
            The circumradius is given as
              R = a * b * c / (4 * D)
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2f.CircumCircle">
            <summary>
            The circum circle formed by the 
            triangles points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2f.Altitudes">
            <summary>
            The altitudes are given as
              alt_a = 2 * D / a -- altitude above side a
              alt_b = 2 * D / b -- altitude above side b
              alt_c = 2 * D / c -- altitude above side c
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2f.AspectRatio">
            <summary>
            The aspect ratio may be given as the ratio of the longest to the
            shortest edge or, more commonly as the ratio of the circumradius 
            to twice the inradius
              ar = R / (2 * r)
                 = a * b * c / (8 * (s - a) * (s - b) * (s - c))
                 = a * b * c / ((b + c - a) * (c + a - b) * (a + b - c))
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle2f.Bounds">
            <summary>
            The triangles bounding box.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2f.Equals(System.Object)">
            <summary>
            Is the triangle equal to the other object.
            </summary>
            <param name="obj">The  other object.</param>
            <returns>Is the triangle equal to the other object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2f.Equals(CGALDotNetGeometry.Shapes.Triangle2f)">
            <summary>
            Is the triangle equal to the other riangle.
            </summary>
            <param name="tri">The  other riangle.</param>
            <returns>Is the triangle equal to the other riangle.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2f.GetHashCode">
            <summary>
            The triangles hashcode.
            </summary>
            <returns>The triangles hashcode.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2f.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2f.Round(System.Int32)">
            <summary>
            Round the triangles components.
            </summary>
            <param name="digits">The digits to round to.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2f.CrossProductArea(CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f,CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            The cross product area which is the 
            same as double the signed area.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2f.Barycentric(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Return th barycentric coordinates
            with respect to p.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2f.Closest(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Find the closest point to the triangle.
            If point inside triangle return point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2f.SignedDistance(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Returns the signed distance to surface of triangle.
            </summary>
            <returns>positive if outside triangle, negative if inside and 0 on boundary</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2f.Contains(CGALDotNetGeometry.Numerics.Point2f)">
            <summary>
            Does triangle contain point.
            </summary>
            <param name="p">The point</param>
            <returns>true if triangle contains point</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2f.Contains(CGALDotNetGeometry.Numerics.Point2f,System.Boolean)">
            <summary>
            Does triangle contain point.
            </summary>
            <param name="p">The point</param>
            <param name="includeBorder"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2f.ContainsCCW(CGALDotNetGeometry.Numerics.Point2f,System.Boolean)">
            <summary>
            Does triangle contain point.
            Asumes triangle is CCW;
            </summary>
            <param name="p">point</param>
            <param name="includeBorder"></param>
            <returns>true if triangle contains point</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle2f.Intersects(CGALDotNetGeometry.Shapes.Box2f,System.Boolean)">
            <summary>
            Does the triangle intersect this box.
            </summary>
            <param name="box"></param>
            <param name="includeBorder"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Triangle3d">
            <summary>
            A 3D triangle.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Triangle3d.A">
            <summary>
            The triangles first point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Triangle3d.B">
            <summary>
            The triangles second point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Triangle3d.C">
            <summary>
            The triangles third point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle3d.#ctor(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Create a new triangle.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <param name="c">The third point.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle3d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new triangle.
            </summary>
            <param name="ax">The first points x value.</param>
            <param name="ay">The first points y value.</param>
            <param name="az">The first points z value.</param>
            <param name="bx">The second points x value.</param>
            <param name="by">The second points y value.</param>
            <param name="bz">The second points z value.</param>
            <param name="cx">The third points x value.</param>
            <param name="cy">The third points y value.</param>
            <param name="cz">The third points z value.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle3d.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle3d.Bounds">
            <summary>
            The bounding box of the triangle.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle3d.Item(System.Int32)">
            <summary>
            Array acess to the triangles points.
            </summary>
            <param name="i">The index of the point to access (0-2)</param>
            <returns>The point at index i.</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle3d.Equals(System.Object)">
            <summary>
            Is the triangle equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the triangle equal to this object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle3d.Equals(CGALDotNetGeometry.Shapes.Triangle3d)">
            <summary>
            Is the triangle equal to the other triangle.
            </summary>
            <param name="tri">The other triangle.</param>
            <returns>Is the triangle equal to the other triangle.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle3d.GetHashCode">
            <summary>
            The triangles hash code.
            </summary>
            <returns>The triangles hash code.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle3d.ToString">
            <summary>
            The triangle as a string.
            </summary>
            <returns>The triangle as a string.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle3d.Round(System.Int32)">
            <summary>
            Round the triangles points.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.Triangle3f">
            <summary>
            A 3D triangle.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Triangle3f.A">
            <summary>
            The triangles first point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Triangle3f.B">
            <summary>
            The triangles second point.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.Triangle3f.C">
            <summary>
            The triangles third point.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle3f.#ctor(CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f,CGALDotNetGeometry.Numerics.Point3f)">
            <summary>
            Create a new triangle.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <param name="c">The third point.</param>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle3f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a new triangle.
            </summary>
            <param name="ax">The first points x value.</param>
            <param name="ay">The first points y value.</param>
            <param name="az">The first points z value.</param>
            <param name="bx">The second points x value.</param>
            <param name="by">The second points y value.</param>
            <param name="bz">The second points z value.</param>
            <param name="cx">The third points x value.</param>
            <param name="cy">The third points y value.</param>
            <param name="cz">The third points z value.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle3f.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle3f.Bounds">
            <summary>
            The bounding box of the triangle.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.Triangle3f.Item(System.Int32)">
            <summary>
            Array acess to the triangles points.
            </summary>
            <param name="i">The index of the point to access (0-2)</param>
            <returns>The point at index i.</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle3f.Equals(System.Object)">
            <summary>
            Is the triangle equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the triangle equal to this object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle3f.Equals(CGALDotNetGeometry.Shapes.Triangle3f)">
            <summary>
            Is the triangle equal to the other triangle.
            </summary>
            <param name="tri">The other triangle.</param>
            <returns>Is the triangle equal to the other triangle.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle3f.GetHashCode">
            <summary>
            The triangles hash code.
            </summary>
            <returns>The triangles hash code.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle3f.ToString">
            <summary>
            The triangle as a string.
            </summary>
            <returns>The triangle as a string.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.Triangle3f.Round(System.Int32)">
            <summary>
            Round the triangles points.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="T:CGALDotNetGeometry.Shapes.TriangleIndex">
            <summary>
            A triangle represented by indices instead of points.
            The indices represent a index into a array of points.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.TriangleIndex.A">
            <summary>
            The triangles first point index.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.TriangleIndex.B">
            <summary>
            The triangles second point index.
            </summary>
        </member>
        <member name="F:CGALDotNetGeometry.Shapes.TriangleIndex.C">
            <summary>
            The triangles third point index.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.TriangleIndex.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Consturct a new triangle.
            </summary>
            <param name="a">The triangles first point index.</param>
            <param name="b">The triangles second point index.</param>
            <param name="c">The triangles third point index.</param>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.TriangleIndex.HasNullIndex">
            <summary>
            Does the triangle have a null index.
            </summary>
        </member>
        <member name="P:CGALDotNetGeometry.Shapes.TriangleIndex.Reversed">
            <summary>
            The triangle reversed.
            </summary>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.TriangleIndex.Equals(System.Object)">
            <summary>
            Is the triangle equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the triangle equal to this object.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.TriangleIndex.Equals(CGALDotNetGeometry.Shapes.TriangleIndex)">
            <summary>
            Is the triangle equal to the other triangle.
            </summary>
            <param name="tri">The other triangle.</param>
            <returns>Is the triangle equal to the other triangle.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.TriangleIndex.GetHashCode">
            <summary>
            The triangles hash code.
            </summary>
            <returns>The triangles hash code.</returns>
        </member>
        <member name="M:CGALDotNetGeometry.Shapes.TriangleIndex.ToString">
            <summary>
            The triangle as a string.
            </summary>
            <returns>The triangle as a string.</returns>
        </member>
    </members>
</doc>
